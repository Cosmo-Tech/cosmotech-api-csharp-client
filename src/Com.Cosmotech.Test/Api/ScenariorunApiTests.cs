/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Com.Cosmotech.Client;
using Com.Cosmotech.Api;
// uncomment below to import models
//using Com.Cosmotech.Model;

namespace Com.Cosmotech.Test.Api
{
    /// <summary>
    ///  Class for testing ScenariorunApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ScenariorunApiTests : IDisposable
    {
        private ScenariorunApi instance;

        public ScenariorunApiTests()
        {
            instance = new ScenariorunApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ScenariorunApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ScenariorunApi
            //Assert.IsType<ScenariorunApi>(instance);
        }

        /// <summary>
        /// Test DeleteScenarioRun
        /// </summary>
        [Fact]
        public void DeleteScenarioRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string scenariorunId = null;
            //var response = instance.DeleteScenarioRun(organizationId, scenariorunId);
            //Assert.IsType<ScenarioRun>(response);
        }

        /// <summary>
        /// Test FindScenarioRunById
        /// </summary>
        [Fact]
        public void FindScenarioRunByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string scenariorunId = null;
            //var response = instance.FindScenarioRunById(organizationId, scenariorunId);
            //Assert.IsType<ScenarioRun>(response);
        }

        /// <summary>
        /// Test GetScenarioScenarioRun
        /// </summary>
        [Fact]
        public void GetScenarioScenarioRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //string scenarioId = null;
            //string scenariorunId = null;
            //var response = instance.GetScenarioScenarioRun(organizationId, workspaceId, scenarioId, scenariorunId);
            //Assert.IsType<ScenarioRun>(response);
        }

        /// <summary>
        /// Test GetScenarioScenarioRunLogs
        /// </summary>
        [Fact]
        public void GetScenarioScenarioRunLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //string scenarioId = null;
            //string scenariorunId = null;
            //var response = instance.GetScenarioScenarioRunLogs(organizationId, workspaceId, scenarioId, scenariorunId);
            //Assert.IsType<ScenarioRunLogs>(response);
        }

        /// <summary>
        /// Test GetScenarioScenarioRuns
        /// </summary>
        [Fact]
        public void GetScenarioScenarioRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //string scenarioId = null;
            //var response = instance.GetScenarioScenarioRuns(organizationId, workspaceId, scenarioId);
            //Assert.IsType<List<ScenarioRunBase>>(response);
        }

        /// <summary>
        /// Test GetWorkspaceScenarioRuns
        /// </summary>
        [Fact]
        public void GetWorkspaceScenarioRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //var response = instance.GetWorkspaceScenarioRuns(organizationId, workspaceId);
            //Assert.IsType<List<ScenarioRunBase>>(response);
        }

        /// <summary>
        /// Test RunScenario
        /// </summary>
        [Fact]
        public void RunScenarioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //string scenarioId = null;
            //var response = instance.RunScenario(organizationId, workspaceId, scenarioId);
            //Assert.IsType<ScenarioRunBase>(response);
        }

        /// <summary>
        /// Test SearchScenarioRunLogs
        /// </summary>
        [Fact]
        public void SearchScenarioRunLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string scenariorunId = null;
            //ScenarioRunLogsOptions scenarioRunLogsOptions = null;
            //var response = instance.SearchScenarioRunLogs(organizationId, scenariorunId, scenarioRunLogsOptions);
            //Assert.IsType<ScenarioRunLogs>(response);
        }

        /// <summary>
        /// Test SearchScenarioRuns
        /// </summary>
        [Fact]
        public void SearchScenarioRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //ScenarioRunSearch scenarioRunSearch = null;
            //var response = instance.SearchScenarioRuns(organizationId, scenarioRunSearch);
            //Assert.IsType<List<ScenarioRunBase>>(response);
        }

        /// <summary>
        /// Test StartScenarioRunContainers
        /// </summary>
        [Fact]
        public void StartScenarioRunContainersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //ScenarioRunStartContainers scenarioRunStartContainers = null;
            //var response = instance.StartScenarioRunContainers(organizationId, scenarioRunStartContainers);
            //Assert.IsType<ScenarioRun>(response);
        }

        /// <summary>
        /// Test StartScenarioRunScenario
        /// </summary>
        [Fact]
        public void StartScenarioRunScenarioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //ScenarioRunStart scenarioRunStart = null;
            //var response = instance.StartScenarioRunScenario(organizationId, scenarioRunStart);
            //Assert.IsType<ScenarioRun>(response);
        }

        /// <summary>
        /// Test StartScenarioRunSolution
        /// </summary>
        [Fact]
        public void StartScenarioRunSolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //ScenarioRunStartSolution scenarioRunStartSolution = null;
            //var response = instance.StartScenarioRunSolution(organizationId, scenarioRunStartSolution);
            //Assert.IsType<ScenarioRun>(response);
        }
    }
}
