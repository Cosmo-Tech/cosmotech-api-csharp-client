/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Com.Cosmotech.Client;
using Com.Cosmotech.Api;
// uncomment below to import models
//using Com.Cosmotech.Model;

namespace Com.Cosmotech.Test.Api
{
    /// <summary>
    ///  Class for testing SimulatorApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SimulatorApiTests : IDisposable
    {
        private SimulatorApi instance;

        public SimulatorApiTests()
        {
            instance = new SimulatorApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SimulatorApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SimulatorApi
            //Assert.IsType<SimulatorApi>(instance);
        }

        /// <summary>
        /// Test CreateSimulator
        /// </summary>
        [Fact]
        public void CreateSimulatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //Simulator simulator = null;
            //var response = instance.CreateSimulator(organizationId, simulator);
            //Assert.IsType<Simulator>(response);
        }

        /// <summary>
        /// Test DeleteSimulator
        /// </summary>
        [Fact]
        public void DeleteSimulatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string simulatorId = null;
            //var response = instance.DeleteSimulator(organizationId, simulatorId);
            //Assert.IsType<Simulator>(response);
        }

        /// <summary>
        /// Test FindAllSimulators
        /// </summary>
        [Fact]
        public void FindAllSimulatorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //var response = instance.FindAllSimulators(organizationId);
            //Assert.IsType<List<Simulator>>(response);
        }

        /// <summary>
        /// Test FindSimulatorById
        /// </summary>
        [Fact]
        public void FindSimulatorByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string simulatorId = null;
            //var response = instance.FindSimulatorById(organizationId, simulatorId);
            //Assert.IsType<Simulator>(response);
        }

        /// <summary>
        /// Test UpdateSimulator
        /// </summary>
        [Fact]
        public void UpdateSimulatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string simulatorId = null;
            //Simulator simulator = null;
            //var response = instance.UpdateSimulator(organizationId, simulatorId, simulator);
            //Assert.IsType<Simulator>(response);
        }

        /// <summary>
        /// Test Upload
        /// </summary>
        [Fact]
        public void UploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //System.IO.Stream body = null;
            //var response = instance.Upload(organizationId, body);
            //Assert.IsType<Simulator>(response);
        }
    }
}
