/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Com.Cosmotech.Client;
using Com.Cosmotech.Api;
// uncomment below to import models
//using Com.Cosmotech.Model;

namespace Com.Cosmotech.Test.Api
{
    /// <summary>
    ///  Class for testing SimulationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SimulationApiTests : IDisposable
    {
        private SimulationApi instance;

        public SimulationApiTests()
        {
            instance = new SimulationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SimulationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SimulationApi
            //Assert.IsType<SimulationApi>(instance);
        }

        /// <summary>
        /// Test DeleteSimulation
        /// </summary>
        [Fact]
        public void DeleteSimulationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string simulationId = null;
            //var response = instance.DeleteSimulation(organizationId, simulationId);
            //Assert.IsType<Simulation>(response);
        }

        /// <summary>
        /// Test FindSimulationById
        /// </summary>
        [Fact]
        public void FindSimulationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string simulationId = null;
            //var response = instance.FindSimulationById(organizationId, simulationId);
            //Assert.IsType<Simulation>(response);
        }

        /// <summary>
        /// Test GetScenarioSimulation
        /// </summary>
        [Fact]
        public void GetScenarioSimulationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //string scenarioId = null;
            //string simulationId = null;
            //var response = instance.GetScenarioSimulation(organizationId, workspaceId, scenarioId, simulationId);
            //Assert.IsType<Simulation>(response);
        }

        /// <summary>
        /// Test GetScenarioSimulationLogs
        /// </summary>
        [Fact]
        public void GetScenarioSimulationLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //string scenarioId = null;
            //string simulationId = null;
            //var response = instance.GetScenarioSimulationLogs(organizationId, workspaceId, scenarioId, simulationId);
            //Assert.IsType<SimulationLogs>(response);
        }

        /// <summary>
        /// Test GetScenarioSimulations
        /// </summary>
        [Fact]
        public void GetScenarioSimulationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //string scenarioId = null;
            //var response = instance.GetScenarioSimulations(organizationId, workspaceId, scenarioId);
            //Assert.IsType<List<SimulationBase>>(response);
        }

        /// <summary>
        /// Test GetWorkspaceSimulations
        /// </summary>
        [Fact]
        public void GetWorkspaceSimulationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //var response = instance.GetWorkspaceSimulations(organizationId, workspaceId);
            //Assert.IsType<List<SimulationBase>>(response);
        }

        /// <summary>
        /// Test RunScenario
        /// </summary>
        [Fact]
        public void RunScenarioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string workspaceId = null;
            //string scenarioId = null;
            //var response = instance.RunScenario(organizationId, workspaceId, scenarioId);
            //Assert.IsType<SimulationBase>(response);
        }

        /// <summary>
        /// Test SearchSimulationLogs
        /// </summary>
        [Fact]
        public void SearchSimulationLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string simulationId = null;
            //SimulationLogsOptions simulationLogsOptions = null;
            //var response = instance.SearchSimulationLogs(organizationId, simulationId, simulationLogsOptions);
            //Assert.IsType<SimulationLogs>(response);
        }

        /// <summary>
        /// Test SearchSimulations
        /// </summary>
        [Fact]
        public void SearchSimulationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //SimulationSearch simulationSearch = null;
            //var response = instance.SearchSimulations(organizationId, simulationSearch);
            //Assert.IsType<List<SimulationBase>>(response);
        }

        /// <summary>
        /// Test StartSimulationContainers
        /// </summary>
        [Fact]
        public void StartSimulationContainersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //SimulationStartContainers simulationStartContainers = null;
            //var response = instance.StartSimulationContainers(organizationId, simulationStartContainers);
            //Assert.IsType<Simulation>(response);
        }

        /// <summary>
        /// Test StartSimulationScenario
        /// </summary>
        [Fact]
        public void StartSimulationScenarioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //SimulationStartScenario simulationStartScenario = null;
            //var response = instance.StartSimulationScenario(organizationId, simulationStartScenario);
            //Assert.IsType<Simulation>(response);
        }

        /// <summary>
        /// Test StartSimulationSolution
        /// </summary>
        [Fact]
        public void StartSimulationSolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //SimulationStartSolution simulationStartSolution = null;
            //var response = instance.StartSimulationSolution(organizationId, simulationStartSolution);
            //Assert.IsType<Simulation>(response);
        }
    }
}
