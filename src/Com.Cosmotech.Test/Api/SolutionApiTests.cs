/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Com.Cosmotech.Client;
using Com.Cosmotech.Api;
// uncomment below to import models
//using Com.Cosmotech.Model;

namespace Com.Cosmotech.Test.Api
{
    /// <summary>
    ///  Class for testing SolutionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SolutionApiTests : IDisposable
    {
        private SolutionApi instance;

        public SolutionApiTests()
        {
            instance = new SolutionApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SolutionApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SolutionApi
            //Assert.IsType<SolutionApi>(instance);
        }

        /// <summary>
        /// Test CreateSolution
        /// </summary>
        [Fact]
        public void CreateSolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //Solution solution = null;
            //var response = instance.CreateSolution(organizationId, solution);
            //Assert.IsType<Solution>(response);
        }

        /// <summary>
        /// Test DeleteSolution
        /// </summary>
        [Fact]
        public void DeleteSolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string solutionId = null;
            //var response = instance.DeleteSolution(organizationId, solutionId);
            //Assert.IsType<Solution>(response);
        }

        /// <summary>
        /// Test FindAllSolutions
        /// </summary>
        [Fact]
        public void FindAllSolutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //var response = instance.FindAllSolutions(organizationId);
            //Assert.IsType<List<Solution>>(response);
        }

        /// <summary>
        /// Test FindSolutionById
        /// </summary>
        [Fact]
        public void FindSolutionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string solutionId = null;
            //var response = instance.FindSolutionById(organizationId, solutionId);
            //Assert.IsType<Solution>(response);
        }

        /// <summary>
        /// Test UpdateSolution
        /// </summary>
        [Fact]
        public void UpdateSolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string solutionId = null;
            //Solution solution = null;
            //var response = instance.UpdateSolution(organizationId, solutionId, solution);
            //Assert.IsType<Solution>(response);
        }

        /// <summary>
        /// Test Upload
        /// </summary>
        [Fact]
        public void UploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //System.IO.Stream body = null;
            //var response = instance.Upload(organizationId, body);
            //Assert.IsType<Solution>(response);
        }
    }
}
