/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// the list of Platform services
    /// </summary>
    [DataContract(Name = "PlatformServices")]
    public partial class PlatformServices : IEquatable<PlatformServices>, IValidatableObject
    {
        /// <summary>
        /// the Cloud Provider for the services
        /// </summary>
        /// <value>the Cloud Provider for the services</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderEnum
        {
            /// <summary>
            /// Enum Azure for value: Azure
            /// </summary>
            [EnumMember(Value = "Azure")]
            Azure = 1

        }

        /// <summary>
        /// the Cloud Provider for the services
        /// </summary>
        /// <value>the Cloud Provider for the services</value>
        [DataMember(Name = "provider", IsRequired = true, EmitDefaultValue = false)]
        public ProviderEnum Provider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlatformServices" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlatformServices() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlatformServices" /> class.
        /// </summary>
        /// <param name="provider">the Cloud Provider for the services (required).</param>
        /// <param name="credentials">a freeform credentials object for the Platform. Structure depends on cloud provider.</param>
        /// <param name="storage">storage.</param>
        /// <param name="coreContainerRegistry">coreContainerRegistry.</param>
        /// <param name="solutionsContainerRegistry">solutionsContainerRegistry.</param>
        /// <param name="eventBusCluster">eventBusCluster.</param>
        /// <param name="dataWarehouseCluster">dataWarehouseCluster.</param>
        /// <param name="databaseCluster">databaseCluster.</param>
        /// <param name="keyVault">keyVault.</param>
        /// <param name="kubernetesCluster">kubernetesCluster.</param>
        /// <param name="directory">directory.</param>
        /// <param name="monitoring">monitoring.</param>
        /// <param name="analytic">analytic.</param>
        public PlatformServices(ProviderEnum provider = default(ProviderEnum), Dictionary<string, Object> credentials = default(Dictionary<string, Object>), PlatformService storage = default(PlatformService), PlatformService coreContainerRegistry = default(PlatformService), PlatformService solutionsContainerRegistry = default(PlatformService), PlatformService eventBusCluster = default(PlatformService), PlatformService dataWarehouseCluster = default(PlatformService), PlatformService databaseCluster = default(PlatformService), PlatformService keyVault = default(PlatformService), PlatformService kubernetesCluster = default(PlatformService), PlatformService directory = default(PlatformService), PlatformService monitoring = default(PlatformService), PlatformService analytic = default(PlatformService))
        {
            this.Provider = provider;
            this.Credentials = credentials;
            this.Storage = storage;
            this.CoreContainerRegistry = coreContainerRegistry;
            this.SolutionsContainerRegistry = solutionsContainerRegistry;
            this.EventBusCluster = eventBusCluster;
            this.DataWarehouseCluster = dataWarehouseCluster;
            this.DatabaseCluster = databaseCluster;
            this.KeyVault = keyVault;
            this.KubernetesCluster = kubernetesCluster;
            this.Directory = directory;
            this.Monitoring = monitoring;
            this.Analytic = analytic;
        }

        /// <summary>
        /// a freeform credentials object for the Platform. Structure depends on cloud provider
        /// </summary>
        /// <value>a freeform credentials object for the Platform. Structure depends on cloud provider</value>
        [DataMember(Name = "credentials", EmitDefaultValue = false)]
        public Dictionary<string, Object> Credentials { get; set; }

        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name = "storage", EmitDefaultValue = false)]
        public PlatformService Storage { get; set; }

        /// <summary>
        /// Gets or Sets CoreContainerRegistry
        /// </summary>
        [DataMember(Name = "coreContainerRegistry", EmitDefaultValue = false)]
        public PlatformService CoreContainerRegistry { get; set; }

        /// <summary>
        /// Gets or Sets SolutionsContainerRegistry
        /// </summary>
        [DataMember(Name = "solutionsContainerRegistry", EmitDefaultValue = false)]
        public PlatformService SolutionsContainerRegistry { get; set; }

        /// <summary>
        /// Gets or Sets EventBusCluster
        /// </summary>
        [DataMember(Name = "eventBusCluster", EmitDefaultValue = false)]
        public PlatformService EventBusCluster { get; set; }

        /// <summary>
        /// Gets or Sets DataWarehouseCluster
        /// </summary>
        [DataMember(Name = "dataWarehouseCluster", EmitDefaultValue = false)]
        public PlatformService DataWarehouseCluster { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseCluster
        /// </summary>
        [DataMember(Name = "databaseCluster", EmitDefaultValue = false)]
        public PlatformService DatabaseCluster { get; set; }

        /// <summary>
        /// Gets or Sets KeyVault
        /// </summary>
        [DataMember(Name = "keyVault", EmitDefaultValue = false)]
        public PlatformService KeyVault { get; set; }

        /// <summary>
        /// Gets or Sets KubernetesCluster
        /// </summary>
        [DataMember(Name = "kubernetesCluster", EmitDefaultValue = false)]
        public PlatformService KubernetesCluster { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name = "directory", EmitDefaultValue = false)]
        public PlatformService Directory { get; set; }

        /// <summary>
        /// Gets or Sets Monitoring
        /// </summary>
        [DataMember(Name = "monitoring", EmitDefaultValue = false)]
        public PlatformService Monitoring { get; set; }

        /// <summary>
        /// Gets or Sets Analytic
        /// </summary>
        [DataMember(Name = "analytic", EmitDefaultValue = false)]
        public PlatformService Analytic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlatformServices {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("  CoreContainerRegistry: ").Append(CoreContainerRegistry).Append("\n");
            sb.Append("  SolutionsContainerRegistry: ").Append(SolutionsContainerRegistry).Append("\n");
            sb.Append("  EventBusCluster: ").Append(EventBusCluster).Append("\n");
            sb.Append("  DataWarehouseCluster: ").Append(DataWarehouseCluster).Append("\n");
            sb.Append("  DatabaseCluster: ").Append(DatabaseCluster).Append("\n");
            sb.Append("  KeyVault: ").Append(KeyVault).Append("\n");
            sb.Append("  KubernetesCluster: ").Append(KubernetesCluster).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  Monitoring: ").Append(Monitoring).Append("\n");
            sb.Append("  Analytic: ").Append(Analytic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlatformServices);
        }

        /// <summary>
        /// Returns true if PlatformServices instances are equal
        /// </summary>
        /// <param name="input">Instance of PlatformServices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlatformServices input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Provider == input.Provider ||
                    this.Provider.Equals(input.Provider)
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    this.Credentials != null &&
                    input.Credentials != null &&
                    this.Credentials.SequenceEqual(input.Credentials)
                ) && 
                (
                    this.Storage == input.Storage ||
                    (this.Storage != null &&
                    this.Storage.Equals(input.Storage))
                ) && 
                (
                    this.CoreContainerRegistry == input.CoreContainerRegistry ||
                    (this.CoreContainerRegistry != null &&
                    this.CoreContainerRegistry.Equals(input.CoreContainerRegistry))
                ) && 
                (
                    this.SolutionsContainerRegistry == input.SolutionsContainerRegistry ||
                    (this.SolutionsContainerRegistry != null &&
                    this.SolutionsContainerRegistry.Equals(input.SolutionsContainerRegistry))
                ) && 
                (
                    this.EventBusCluster == input.EventBusCluster ||
                    (this.EventBusCluster != null &&
                    this.EventBusCluster.Equals(input.EventBusCluster))
                ) && 
                (
                    this.DataWarehouseCluster == input.DataWarehouseCluster ||
                    (this.DataWarehouseCluster != null &&
                    this.DataWarehouseCluster.Equals(input.DataWarehouseCluster))
                ) && 
                (
                    this.DatabaseCluster == input.DatabaseCluster ||
                    (this.DatabaseCluster != null &&
                    this.DatabaseCluster.Equals(input.DatabaseCluster))
                ) && 
                (
                    this.KeyVault == input.KeyVault ||
                    (this.KeyVault != null &&
                    this.KeyVault.Equals(input.KeyVault))
                ) && 
                (
                    this.KubernetesCluster == input.KubernetesCluster ||
                    (this.KubernetesCluster != null &&
                    this.KubernetesCluster.Equals(input.KubernetesCluster))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                ) && 
                (
                    this.Monitoring == input.Monitoring ||
                    (this.Monitoring != null &&
                    this.Monitoring.Equals(input.Monitoring))
                ) && 
                (
                    this.Analytic == input.Analytic ||
                    (this.Analytic != null &&
                    this.Analytic.Equals(input.Analytic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Credentials != null)
                    hashCode = hashCode * 59 + this.Credentials.GetHashCode();
                if (this.Storage != null)
                    hashCode = hashCode * 59 + this.Storage.GetHashCode();
                if (this.CoreContainerRegistry != null)
                    hashCode = hashCode * 59 + this.CoreContainerRegistry.GetHashCode();
                if (this.SolutionsContainerRegistry != null)
                    hashCode = hashCode * 59 + this.SolutionsContainerRegistry.GetHashCode();
                if (this.EventBusCluster != null)
                    hashCode = hashCode * 59 + this.EventBusCluster.GetHashCode();
                if (this.DataWarehouseCluster != null)
                    hashCode = hashCode * 59 + this.DataWarehouseCluster.GetHashCode();
                if (this.DatabaseCluster != null)
                    hashCode = hashCode * 59 + this.DatabaseCluster.GetHashCode();
                if (this.KeyVault != null)
                    hashCode = hashCode * 59 + this.KeyVault.GetHashCode();
                if (this.KubernetesCluster != null)
                    hashCode = hashCode * 59 + this.KubernetesCluster.GetHashCode();
                if (this.Directory != null)
                    hashCode = hashCode * 59 + this.Directory.GetHashCode();
                if (this.Monitoring != null)
                    hashCode = hashCode * 59 + this.Monitoring.GetHashCode();
                if (this.Analytic != null)
                    hashCode = hashCode * 59 + this.Analytic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
