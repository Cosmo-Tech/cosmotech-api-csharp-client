/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a version of a Simulator
    /// </summary>
    [DataContract(Name = "Simulator")]
    public partial class Simulator : IEquatable<Simulator>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Simulator" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Simulator() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Simulator" /> class.
        /// </summary>
        /// <param name="simulatorKey">the Simulator key which group Simulator versions (required).</param>
        /// <param name="name">the Simulator name (required).</param>
        /// <param name="description">the Simulator description.</param>
        /// <param name="repository">the registry repository containing the image (required).</param>
        /// <param name="version">the Simulator version MAJOR.MINOR.PATCH. Must be aligned with an existing repository tag (required).</param>
        /// <param name="url">an optional URL link to simulator page.</param>
        /// <param name="tags">the list of tags.</param>
        /// <param name="analysis">list of Simulator Analysis.</param>
        public Simulator(string simulatorKey = default(string), string name = default(string), string description = default(string), string repository = default(string), string version = default(string), string url = default(string), List<string> tags = default(List<string>), List<SimulatorAnalysis> analysis = default(List<SimulatorAnalysis>))
        {
            // to ensure "simulatorKey" is required (not null)
            this.SimulatorKey = simulatorKey ?? throw new ArgumentNullException("simulatorKey is a required property for Simulator and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Simulator and cannot be null");
            // to ensure "repository" is required (not null)
            this.Repository = repository ?? throw new ArgumentNullException("repository is a required property for Simulator and cannot be null");
            // to ensure "version" is required (not null)
            this.Version = version ?? throw new ArgumentNullException("version is a required property for Simulator and cannot be null");
            this.Description = description;
            this.Url = url;
            this.Tags = tags;
            this.Analysis = analysis;
        }

        /// <summary>
        /// the Simulator version unique identifier
        /// </summary>
        /// <value>the Simulator version unique identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// the Simulator key which group Simulator versions
        /// </summary>
        /// <value>the Simulator key which group Simulator versions</value>
        [DataMember(Name = "simulatorKey", IsRequired = true, EmitDefaultValue = false)]
        public string SimulatorKey { get; set; }

        /// <summary>
        /// the Simulator name
        /// </summary>
        /// <value>the Simulator name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the Simulator description
        /// </summary>
        /// <value>the Simulator description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// the registry repository containing the image
        /// </summary>
        /// <value>the registry repository containing the image</value>
        [DataMember(Name = "repository", IsRequired = true, EmitDefaultValue = false)]
        public string Repository { get; set; }

        /// <summary>
        /// the Simulator version MAJOR.MINOR.PATCH. Must be aligned with an existing repository tag
        /// </summary>
        /// <value>the Simulator version MAJOR.MINOR.PATCH. Must be aligned with an existing repository tag</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public string Version { get; set; }

        /// <summary>
        /// the User id which own this Simulator
        /// </summary>
        /// <value>the User id which own this Simulator</value>
        [DataMember(Name = "ownerId", EmitDefaultValue = false)]
        public string OwnerId { get; private set; }

        /// <summary>
        /// Returns false as OwnerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOwnerId()
        {
            return false;
        }

        /// <summary>
        /// an optional URL link to simulator page
        /// </summary>
        /// <value>an optional URL link to simulator page</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// the list of tags
        /// </summary>
        /// <value>the list of tags</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// list of Simulator Analysis
        /// </summary>
        /// <value>list of Simulator Analysis</value>
        [DataMember(Name = "analysis", EmitDefaultValue = false)]
        public List<SimulatorAnalysis> Analysis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Simulator {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SimulatorKey: ").Append(SimulatorKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Analysis: ").Append(Analysis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Simulator);
        }

        /// <summary>
        /// Returns true if Simulator instances are equal
        /// </summary>
        /// <param name="input">Instance of Simulator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Simulator input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SimulatorKey == input.SimulatorKey ||
                    (this.SimulatorKey != null &&
                    this.SimulatorKey.Equals(input.SimulatorKey))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Repository == input.Repository ||
                    (this.Repository != null &&
                    this.Repository.Equals(input.Repository))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Analysis == input.Analysis ||
                    this.Analysis != null &&
                    input.Analysis != null &&
                    this.Analysis.SequenceEqual(input.Analysis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SimulatorKey != null)
                    hashCode = hashCode * 59 + this.SimulatorKey.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Repository != null)
                    hashCode = hashCode * 59 + this.Repository.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Analysis != null)
                    hashCode = hashCode * 59 + this.Analysis.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
