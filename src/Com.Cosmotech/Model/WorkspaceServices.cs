/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// the cloud service resources of the Workspace
    /// </summary>
    [DataContract(Name = "WorkspaceServices")]
    public partial class WorkspaceServices : IEquatable<WorkspaceServices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceServices" /> class.
        /// </summary>
        /// <param name="tenantCredentials">a freeform credentials object for the tenant. Structure depends on cloud provider.</param>
        /// <param name="resultsEventBus">resultsEventBus.</param>
        /// <param name="simulationEventBus">simulationEventBus.</param>
        /// <param name="dataWarehouse">dataWarehouse.</param>
        /// <param name="storage">storage.</param>
        public WorkspaceServices(Dictionary<string, Object> tenantCredentials = default(Dictionary<string, Object>), WorkspaceService resultsEventBus = default(WorkspaceService), WorkspaceService simulationEventBus = default(WorkspaceService), WorkspaceService dataWarehouse = default(WorkspaceService), WorkspaceService storage = default(WorkspaceService))
        {
            this.TenantCredentials = tenantCredentials;
            this.ResultsEventBus = resultsEventBus;
            this.SimulationEventBus = simulationEventBus;
            this.DataWarehouse = dataWarehouse;
            this.Storage = storage;
        }

        /// <summary>
        /// a freeform credentials object for the tenant. Structure depends on cloud provider
        /// </summary>
        /// <value>a freeform credentials object for the tenant. Structure depends on cloud provider</value>
        [DataMember(Name = "tenantCredentials", EmitDefaultValue = false)]
        public Dictionary<string, Object> TenantCredentials { get; set; }

        /// <summary>
        /// Gets or Sets ResultsEventBus
        /// </summary>
        [DataMember(Name = "resultsEventBus", EmitDefaultValue = false)]
        public WorkspaceService ResultsEventBus { get; set; }

        /// <summary>
        /// Gets or Sets SimulationEventBus
        /// </summary>
        [DataMember(Name = "simulationEventBus", EmitDefaultValue = false)]
        public WorkspaceService SimulationEventBus { get; set; }

        /// <summary>
        /// Gets or Sets DataWarehouse
        /// </summary>
        [DataMember(Name = "dataWarehouse", EmitDefaultValue = false)]
        public WorkspaceService DataWarehouse { get; set; }

        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name = "storage", EmitDefaultValue = false)]
        public WorkspaceService Storage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkspaceServices {\n");
            sb.Append("  TenantCredentials: ").Append(TenantCredentials).Append("\n");
            sb.Append("  ResultsEventBus: ").Append(ResultsEventBus).Append("\n");
            sb.Append("  SimulationEventBus: ").Append(SimulationEventBus).Append("\n");
            sb.Append("  DataWarehouse: ").Append(DataWarehouse).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkspaceServices);
        }

        /// <summary>
        /// Returns true if WorkspaceServices instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkspaceServices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkspaceServices input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TenantCredentials == input.TenantCredentials ||
                    this.TenantCredentials != null &&
                    input.TenantCredentials != null &&
                    this.TenantCredentials.SequenceEqual(input.TenantCredentials)
                ) && 
                (
                    this.ResultsEventBus == input.ResultsEventBus ||
                    (this.ResultsEventBus != null &&
                    this.ResultsEventBus.Equals(input.ResultsEventBus))
                ) && 
                (
                    this.SimulationEventBus == input.SimulationEventBus ||
                    (this.SimulationEventBus != null &&
                    this.SimulationEventBus.Equals(input.SimulationEventBus))
                ) && 
                (
                    this.DataWarehouse == input.DataWarehouse ||
                    (this.DataWarehouse != null &&
                    this.DataWarehouse.Equals(input.DataWarehouse))
                ) && 
                (
                    this.Storage == input.Storage ||
                    (this.Storage != null &&
                    this.Storage.Equals(input.Storage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantCredentials != null)
                    hashCode = hashCode * 59 + this.TenantCredentials.GetHashCode();
                if (this.ResultsEventBus != null)
                    hashCode = hashCode * 59 + this.ResultsEventBus.GetHashCode();
                if (this.SimulationEventBus != null)
                    hashCode = hashCode * 59 + this.SimulationEventBus.GetHashCode();
                if (this.DataWarehouse != null)
                    hashCode = hashCode * 59 + this.DataWarehouse.GetHashCode();
                if (this.Storage != null)
                    hashCode = hashCode * 59 + this.Storage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
