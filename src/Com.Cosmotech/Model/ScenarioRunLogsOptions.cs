/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// the scenariorun logs options
    /// </summary>
    [DataContract(Name = "ScenarioRunLogsOptions")]
    public partial class ScenarioRunLogsOptions : IEquatable<ScenarioRunLogsOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioRunLogsOptions" /> class.
        /// </summary>
        /// <param name="containerIds">the list of container Id to get the log for.</param>
        /// <param name="plainText">whether or not to return the log in plain text instead of structured form.</param>
        public ScenarioRunLogsOptions(List<string> containerIds = default(List<string>), bool plainText = default(bool))
        {
            this.ContainerIds = containerIds;
            this.PlainText = plainText;
        }

        /// <summary>
        /// the list of container Id to get the log for
        /// </summary>
        /// <value>the list of container Id to get the log for</value>
        [DataMember(Name = "containerIds", EmitDefaultValue = false)]
        public List<string> ContainerIds { get; set; }

        /// <summary>
        /// whether or not to return the log in plain text instead of structured form
        /// </summary>
        /// <value>whether or not to return the log in plain text instead of structured form</value>
        [DataMember(Name = "plainText", EmitDefaultValue = false)]
        public bool PlainText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScenarioRunLogsOptions {\n");
            sb.Append("  ContainerIds: ").Append(ContainerIds).Append("\n");
            sb.Append("  PlainText: ").Append(PlainText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScenarioRunLogsOptions);
        }

        /// <summary>
        /// Returns true if ScenarioRunLogsOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ScenarioRunLogsOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioRunLogsOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerIds == input.ContainerIds ||
                    this.ContainerIds != null &&
                    input.ContainerIds != null &&
                    this.ContainerIds.SequenceEqual(input.ContainerIds)
                ) && 
                (
                    this.PlainText == input.PlainText ||
                    this.PlainText.Equals(input.PlainText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerIds != null)
                    hashCode = hashCode * 59 + this.ContainerIds.GetHashCode();
                hashCode = hashCode * 59 + this.PlainText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
