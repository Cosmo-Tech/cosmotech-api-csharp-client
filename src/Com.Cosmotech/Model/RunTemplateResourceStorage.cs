/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// RunTemplateResourceStorage
    /// </summary>
    [DataContract(Name = "RunTemplateResourceStorage")]
    public partial class RunTemplateResourceStorage : IEquatable<RunTemplateResourceStorage>, IValidatableObject
    {
        /// <summary>
        /// the storage type
        /// </summary>
        /// <value>the storage type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StorageTypeEnum
        {
            /// <summary>
            /// Enum Local for value: local
            /// </summary>
            [EnumMember(Value = "local")]
            Local = 1,

            /// <summary>
            /// Enum CloudStorage for value: cloudStorage
            /// </summary>
            [EnumMember(Value = "cloudStorage")]
            CloudStorage = 2

        }

        /// <summary>
        /// the storage type
        /// </summary>
        /// <value>the storage type</value>
        [DataMember(Name = "storageType", IsRequired = true, EmitDefaultValue = false)]
        public StorageTypeEnum StorageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunTemplateResourceStorage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RunTemplateResourceStorage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunTemplateResourceStorage" /> class.
        /// </summary>
        /// <param name="storageType">the storage type (required).</param>
        /// <param name="resourcePath">the resource path (required).</param>
        /// <param name="storageOptions">freeform options for storage.</param>
        public RunTemplateResourceStorage(StorageTypeEnum storageType = default(StorageTypeEnum), string resourcePath = default(string), Dictionary<string, Object> storageOptions = default(Dictionary<string, Object>))
        {
            this.StorageType = storageType;
            // to ensure "resourcePath" is required (not null)
            this.ResourcePath = resourcePath ?? throw new ArgumentNullException("resourcePath is a required property for RunTemplateResourceStorage and cannot be null");
            this.StorageOptions = storageOptions;
        }

        /// <summary>
        /// the resource path
        /// </summary>
        /// <value>the resource path</value>
        [DataMember(Name = "resourcePath", IsRequired = true, EmitDefaultValue = false)]
        public string ResourcePath { get; set; }

        /// <summary>
        /// freeform options for storage
        /// </summary>
        /// <value>freeform options for storage</value>
        [DataMember(Name = "storageOptions", EmitDefaultValue = false)]
        public Dictionary<string, Object> StorageOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunTemplateResourceStorage {\n");
            sb.Append("  StorageType: ").Append(StorageType).Append("\n");
            sb.Append("  ResourcePath: ").Append(ResourcePath).Append("\n");
            sb.Append("  StorageOptions: ").Append(StorageOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunTemplateResourceStorage);
        }

        /// <summary>
        /// Returns true if RunTemplateResourceStorage instances are equal
        /// </summary>
        /// <param name="input">Instance of RunTemplateResourceStorage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunTemplateResourceStorage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StorageType == input.StorageType ||
                    this.StorageType.Equals(input.StorageType)
                ) && 
                (
                    this.ResourcePath == input.ResourcePath ||
                    (this.ResourcePath != null &&
                    this.ResourcePath.Equals(input.ResourcePath))
                ) && 
                (
                    this.StorageOptions == input.StorageOptions ||
                    this.StorageOptions != null &&
                    input.StorageOptions != null &&
                    this.StorageOptions.SequenceEqual(input.StorageOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.StorageType.GetHashCode();
                if (this.ResourcePath != null)
                    hashCode = hashCode * 59 + this.ResourcePath.GetHashCode();
                if (this.StorageOptions != null)
                    hashCode = hashCode * 59 + this.StorageOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
