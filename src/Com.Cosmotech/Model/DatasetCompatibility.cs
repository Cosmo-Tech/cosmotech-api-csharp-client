/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a Dataset compatibility constraint to a Simulator version open range
    /// </summary>
    [DataContract(Name = "DatasetCompatibility")]
    public partial class DatasetCompatibility : IEquatable<DatasetCompatibility>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetCompatibility" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DatasetCompatibility() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetCompatibility" /> class.
        /// </summary>
        /// <param name="simulatorKey">the Simulator key which group Simulator versions (required).</param>
        /// <param name="minimumVersion">the Simulator minimum version compatibility (version included).</param>
        /// <param name="maximumVersion">the Simulator maximum version compatibility (version included).</param>
        public DatasetCompatibility(string simulatorKey = default(string), string minimumVersion = default(string), string maximumVersion = default(string))
        {
            // to ensure "simulatorKey" is required (not null)
            this.SimulatorKey = simulatorKey ?? throw new ArgumentNullException("simulatorKey is a required property for DatasetCompatibility and cannot be null");
            this.MinimumVersion = minimumVersion;
            this.MaximumVersion = maximumVersion;
        }

        /// <summary>
        /// the Simulator key which group Simulator versions
        /// </summary>
        /// <value>the Simulator key which group Simulator versions</value>
        [DataMember(Name = "simulatorKey", IsRequired = true, EmitDefaultValue = false)]
        public string SimulatorKey { get; set; }

        /// <summary>
        /// the Simulator minimum version compatibility (version included)
        /// </summary>
        /// <value>the Simulator minimum version compatibility (version included)</value>
        [DataMember(Name = "minimumVersion", EmitDefaultValue = false)]
        public string MinimumVersion { get; set; }

        /// <summary>
        /// the Simulator maximum version compatibility (version included)
        /// </summary>
        /// <value>the Simulator maximum version compatibility (version included)</value>
        [DataMember(Name = "maximumVersion", EmitDefaultValue = false)]
        public string MaximumVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatasetCompatibility {\n");
            sb.Append("  SimulatorKey: ").Append(SimulatorKey).Append("\n");
            sb.Append("  MinimumVersion: ").Append(MinimumVersion).Append("\n");
            sb.Append("  MaximumVersion: ").Append(MaximumVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DatasetCompatibility);
        }

        /// <summary>
        /// Returns true if DatasetCompatibility instances are equal
        /// </summary>
        /// <param name="input">Instance of DatasetCompatibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatasetCompatibility input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SimulatorKey == input.SimulatorKey ||
                    (this.SimulatorKey != null &&
                    this.SimulatorKey.Equals(input.SimulatorKey))
                ) && 
                (
                    this.MinimumVersion == input.MinimumVersion ||
                    (this.MinimumVersion != null &&
                    this.MinimumVersion.Equals(input.MinimumVersion))
                ) && 
                (
                    this.MaximumVersion == input.MaximumVersion ||
                    (this.MaximumVersion != null &&
                    this.MaximumVersion.Equals(input.MaximumVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SimulatorKey != null)
                    hashCode = hashCode * 59 + this.SimulatorKey.GetHashCode();
                if (this.MinimumVersion != null)
                    hashCode = hashCode * 59 + this.MinimumVersion.GetHashCode();
                if (this.MaximumVersion != null)
                    hashCode = hashCode * 59 + this.MaximumVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
