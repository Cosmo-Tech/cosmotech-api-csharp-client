/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a Simulation
    /// </summary>
    [DataContract(Name = "Simulation_allOf")]
    public partial class SimulationAllOf : IEquatable<SimulationAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationAllOf" /> class.
        /// </summary>
        /// <param name="dataWarehouseDB">the DataWarehouse database name to send data if sendInputToDataWarehouse is set.</param>
        /// <param name="resultsEventBusResourceUri">the event bus which receive Workspace Simulation results messages. Message won&#39;t be send if this is not set.</param>
        /// <param name="simulationEventBusResourceUri">the event bus which receive Workspace Simulation events messages. Message won&#39;t be send if this is not set.</param>
        /// <param name="mainContainer">mainContainer.</param>
        public SimulationAllOf(string dataWarehouseDB = default(string), string resultsEventBusResourceUri = default(string), string simulationEventBusResourceUri = default(string), SimulationContainers mainContainer = default(SimulationContainers))
        {
            this.DataWarehouseDB = dataWarehouseDB;
            this.ResultsEventBusResourceUri = resultsEventBusResourceUri;
            this.SimulationEventBusResourceUri = simulationEventBusResourceUri;
            this.MainContainer = mainContainer;
        }

        /// <summary>
        /// the list of Dataset Id associated to this Analysis
        /// </summary>
        /// <value>the list of Dataset Id associated to this Analysis</value>
        [DataMember(Name = "datasetList", EmitDefaultValue = false)]
        public List<string> DatasetList { get; private set; }

        /// <summary>
        /// Returns false as DatasetList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDatasetList()
        {
            return false;
        }

        /// <summary>
        /// the list of Simulator Analysis parameters values
        /// </summary>
        /// <value>the list of Simulator Analysis parameters values</value>
        [DataMember(Name = "parametersValues", EmitDefaultValue = false)]
        public List<SimulationAnalysisParameterValue> ParametersValues { get; private set; }

        /// <summary>
        /// Returns false as ParametersValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParametersValues()
        {
            return false;
        }

        /// <summary>
        /// whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run
        /// </summary>
        /// <value>whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run</value>
        [DataMember(Name = "sendInputToDataWarehouse", EmitDefaultValue = false)]
        public bool SendInputToDataWarehouse { get; private set; }

        /// <summary>
        /// Returns false as SendInputToDataWarehouse should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSendInputToDataWarehouse()
        {
            return false;
        }

        /// <summary>
        /// the DataWarehouse database name to send data if sendInputToDataWarehouse is set
        /// </summary>
        /// <value>the DataWarehouse database name to send data if sendInputToDataWarehouse is set</value>
        [DataMember(Name = "dataWarehouseDB", EmitDefaultValue = false)]
        public string DataWarehouseDB { get; set; }

        /// <summary>
        /// the event bus which receive Workspace Simulation results messages. Message won&#39;t be send if this is not set
        /// </summary>
        /// <value>the event bus which receive Workspace Simulation results messages. Message won&#39;t be send if this is not set</value>
        [DataMember(Name = "resultsEventBusResourceUri", EmitDefaultValue = false)]
        public string ResultsEventBusResourceUri { get; set; }

        /// <summary>
        /// the event bus which receive Workspace Simulation events messages. Message won&#39;t be send if this is not set
        /// </summary>
        /// <value>the event bus which receive Workspace Simulation events messages. Message won&#39;t be send if this is not set</value>
        [DataMember(Name = "simulationEventBusResourceUri", EmitDefaultValue = false)]
        public string SimulationEventBusResourceUri { get; set; }

        /// <summary>
        /// the node label request
        /// </summary>
        /// <value>the node label request</value>
        [DataMember(Name = "nodeLabel", EmitDefaultValue = false)]
        public string NodeLabel { get; private set; }

        /// <summary>
        /// Returns false as NodeLabel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNodeLabel()
        {
            return false;
        }

        /// <summary>
        /// the list of init containers
        /// </summary>
        /// <value>the list of init containers</value>
        [DataMember(Name = "initContainers", EmitDefaultValue = false)]
        public List<SimulationContainers> InitContainers { get; private set; }

        /// <summary>
        /// Returns false as InitContainers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInitContainers()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets MainContainer
        /// </summary>
        [DataMember(Name = "mainContainer", EmitDefaultValue = false)]
        public SimulationContainers MainContainer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimulationAllOf {\n");
            sb.Append("  DatasetList: ").Append(DatasetList).Append("\n");
            sb.Append("  ParametersValues: ").Append(ParametersValues).Append("\n");
            sb.Append("  SendInputToDataWarehouse: ").Append(SendInputToDataWarehouse).Append("\n");
            sb.Append("  DataWarehouseDB: ").Append(DataWarehouseDB).Append("\n");
            sb.Append("  ResultsEventBusResourceUri: ").Append(ResultsEventBusResourceUri).Append("\n");
            sb.Append("  SimulationEventBusResourceUri: ").Append(SimulationEventBusResourceUri).Append("\n");
            sb.Append("  NodeLabel: ").Append(NodeLabel).Append("\n");
            sb.Append("  InitContainers: ").Append(InitContainers).Append("\n");
            sb.Append("  MainContainer: ").Append(MainContainer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulationAllOf);
        }

        /// <summary>
        /// Returns true if SimulationAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulationAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulationAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatasetList == input.DatasetList ||
                    this.DatasetList != null &&
                    input.DatasetList != null &&
                    this.DatasetList.SequenceEqual(input.DatasetList)
                ) && 
                (
                    this.ParametersValues == input.ParametersValues ||
                    this.ParametersValues != null &&
                    input.ParametersValues != null &&
                    this.ParametersValues.SequenceEqual(input.ParametersValues)
                ) && 
                (
                    this.SendInputToDataWarehouse == input.SendInputToDataWarehouse ||
                    this.SendInputToDataWarehouse.Equals(input.SendInputToDataWarehouse)
                ) && 
                (
                    this.DataWarehouseDB == input.DataWarehouseDB ||
                    (this.DataWarehouseDB != null &&
                    this.DataWarehouseDB.Equals(input.DataWarehouseDB))
                ) && 
                (
                    this.ResultsEventBusResourceUri == input.ResultsEventBusResourceUri ||
                    (this.ResultsEventBusResourceUri != null &&
                    this.ResultsEventBusResourceUri.Equals(input.ResultsEventBusResourceUri))
                ) && 
                (
                    this.SimulationEventBusResourceUri == input.SimulationEventBusResourceUri ||
                    (this.SimulationEventBusResourceUri != null &&
                    this.SimulationEventBusResourceUri.Equals(input.SimulationEventBusResourceUri))
                ) && 
                (
                    this.NodeLabel == input.NodeLabel ||
                    (this.NodeLabel != null &&
                    this.NodeLabel.Equals(input.NodeLabel))
                ) && 
                (
                    this.InitContainers == input.InitContainers ||
                    this.InitContainers != null &&
                    input.InitContainers != null &&
                    this.InitContainers.SequenceEqual(input.InitContainers)
                ) && 
                (
                    this.MainContainer == input.MainContainer ||
                    (this.MainContainer != null &&
                    this.MainContainer.Equals(input.MainContainer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatasetList != null)
                    hashCode = hashCode * 59 + this.DatasetList.GetHashCode();
                if (this.ParametersValues != null)
                    hashCode = hashCode * 59 + this.ParametersValues.GetHashCode();
                hashCode = hashCode * 59 + this.SendInputToDataWarehouse.GetHashCode();
                if (this.DataWarehouseDB != null)
                    hashCode = hashCode * 59 + this.DataWarehouseDB.GetHashCode();
                if (this.ResultsEventBusResourceUri != null)
                    hashCode = hashCode * 59 + this.ResultsEventBusResourceUri.GetHashCode();
                if (this.SimulationEventBusResourceUri != null)
                    hashCode = hashCode * 59 + this.SimulationEventBusResourceUri.GetHashCode();
                if (this.NodeLabel != null)
                    hashCode = hashCode * 59 + this.NodeLabel.GetHashCode();
                if (this.InitContainers != null)
                    hashCode = hashCode * 59 + this.InitContainers.GetHashCode();
                if (this.MainContainer != null)
                    hashCode = hashCode * 59 + this.MainContainer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
