/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a Simulation with only base properties
    /// </summary>
    [DataContract(Name = "SimulationBase")]
    public partial class SimulationBase : IEquatable<SimulationBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationBase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SimulationBase()
        {
        }

        /// <summary>
        /// the Simulation
        /// </summary>
        /// <value>the Simulation</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// the Platform compute cluster Job Id
        /// </summary>
        /// <value>the Platform compute cluster Job Id</value>
        [DataMember(Name = "jobId", EmitDefaultValue = false)]
        public string JobId { get; private set; }

        /// <summary>
        /// Returns false as JobId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJobId()
        {
            return false;
        }

        /// <summary>
        /// the user id which own this simulation
        /// </summary>
        /// <value>the user id which own this simulation</value>
        [DataMember(Name = "ownerId", EmitDefaultValue = false)]
        public string OwnerId { get; private set; }

        /// <summary>
        /// Returns false as OwnerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOwnerId()
        {
            return false;
        }

        /// <summary>
        /// the Workspace Id
        /// </summary>
        /// <value>the Workspace Id</value>
        [DataMember(Name = "workspaceId", EmitDefaultValue = false)]
        public string WorkspaceId { get; private set; }

        /// <summary>
        /// Returns false as WorkspaceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWorkspaceId()
        {
            return false;
        }

        /// <summary>
        /// the Workspace name
        /// </summary>
        /// <value>the Workspace name</value>
        [DataMember(Name = "workspaceName", EmitDefaultValue = false)]
        public string WorkspaceName { get; private set; }

        /// <summary>
        /// Returns false as WorkspaceName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWorkspaceName()
        {
            return false;
        }

        /// <summary>
        /// the Scenario Id
        /// </summary>
        /// <value>the Scenario Id</value>
        [DataMember(Name = "scenarioId", EmitDefaultValue = false)]
        public string ScenarioId { get; private set; }

        /// <summary>
        /// Returns false as ScenarioId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeScenarioId()
        {
            return false;
        }

        /// <summary>
        /// the Scenario name
        /// </summary>
        /// <value>the Scenario name</value>
        [DataMember(Name = "scenarioName", EmitDefaultValue = false)]
        public string ScenarioName { get; private set; }

        /// <summary>
        /// Returns false as ScenarioName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeScenarioName()
        {
            return false;
        }

        /// <summary>
        /// the Solution Id
        /// </summary>
        /// <value>the Solution Id</value>
        [DataMember(Name = "solutionId", EmitDefaultValue = false)]
        public string SolutionId { get; private set; }

        /// <summary>
        /// Returns false as SolutionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSolutionId()
        {
            return false;
        }

        /// <summary>
        /// the Solution name
        /// </summary>
        /// <value>the Solution name</value>
        [DataMember(Name = "solutionName", EmitDefaultValue = false)]
        public string SolutionName { get; private set; }

        /// <summary>
        /// Returns false as SolutionName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSolutionName()
        {
            return false;
        }

        /// <summary>
        /// the Solution version
        /// </summary>
        /// <value>the Solution version</value>
        [DataMember(Name = "solutionVersion", EmitDefaultValue = false)]
        public string SolutionVersion { get; private set; }

        /// <summary>
        /// Returns false as SolutionVersion should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSolutionVersion()
        {
            return false;
        }

        /// <summary>
        /// the Solution Run Template id
        /// </summary>
        /// <value>the Solution Run Template id</value>
        [DataMember(Name = "runTemplateId", EmitDefaultValue = false)]
        public string RunTemplateId { get; private set; }

        /// <summary>
        /// Returns false as RunTemplateId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRunTemplateId()
        {
            return false;
        }

        /// <summary>
        /// the Run Template name
        /// </summary>
        /// <value>the Run Template name</value>
        [DataMember(Name = "runTemplateName", EmitDefaultValue = false)]
        public string RunTemplateName { get; private set; }

        /// <summary>
        /// Returns false as RunTemplateName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRunTemplateName()
        {
            return false;
        }

        /// <summary>
        /// the compute size needed for this Analysis. Standard sizes are basic and highcpu. Default is basic
        /// </summary>
        /// <value>the compute size needed for this Analysis. Standard sizes are basic and highcpu. Default is basic</value>
        [DataMember(Name = "computeSize", EmitDefaultValue = false)]
        public string ComputeSize { get; private set; }

        /// <summary>
        /// Returns false as ComputeSize should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeComputeSize()
        {
            return false;
        }

        /// <summary>
        /// the Simulation state
        /// </summary>
        /// <value>the Simulation state</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; private set; }

        /// <summary>
        /// Returns false as State should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeState()
        {
            return false;
        }

        /// <summary>
        /// the Simulation start Date Time
        /// </summary>
        /// <value>the Simulation start Date Time</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public string StartTime { get; private set; }

        /// <summary>
        /// Returns false as StartTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartTime()
        {
            return false;
        }

        /// <summary>
        /// the Simulation end Date Time
        /// </summary>
        /// <value>the Simulation end Date Time</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public string EndTime { get; private set; }

        /// <summary>
        /// Returns false as EndTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEndTime()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimulationBase {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  WorkspaceName: ").Append(WorkspaceName).Append("\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  ScenarioName: ").Append(ScenarioName).Append("\n");
            sb.Append("  SolutionId: ").Append(SolutionId).Append("\n");
            sb.Append("  SolutionName: ").Append(SolutionName).Append("\n");
            sb.Append("  SolutionVersion: ").Append(SolutionVersion).Append("\n");
            sb.Append("  RunTemplateId: ").Append(RunTemplateId).Append("\n");
            sb.Append("  RunTemplateName: ").Append(RunTemplateName).Append("\n");
            sb.Append("  ComputeSize: ").Append(ComputeSize).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulationBase);
        }

        /// <summary>
        /// Returns true if SimulationBase instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulationBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulationBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                ) && 
                (
                    this.WorkspaceName == input.WorkspaceName ||
                    (this.WorkspaceName != null &&
                    this.WorkspaceName.Equals(input.WorkspaceName))
                ) && 
                (
                    this.ScenarioId == input.ScenarioId ||
                    (this.ScenarioId != null &&
                    this.ScenarioId.Equals(input.ScenarioId))
                ) && 
                (
                    this.ScenarioName == input.ScenarioName ||
                    (this.ScenarioName != null &&
                    this.ScenarioName.Equals(input.ScenarioName))
                ) && 
                (
                    this.SolutionId == input.SolutionId ||
                    (this.SolutionId != null &&
                    this.SolutionId.Equals(input.SolutionId))
                ) && 
                (
                    this.SolutionName == input.SolutionName ||
                    (this.SolutionName != null &&
                    this.SolutionName.Equals(input.SolutionName))
                ) && 
                (
                    this.SolutionVersion == input.SolutionVersion ||
                    (this.SolutionVersion != null &&
                    this.SolutionVersion.Equals(input.SolutionVersion))
                ) && 
                (
                    this.RunTemplateId == input.RunTemplateId ||
                    (this.RunTemplateId != null &&
                    this.RunTemplateId.Equals(input.RunTemplateId))
                ) && 
                (
                    this.RunTemplateName == input.RunTemplateName ||
                    (this.RunTemplateName != null &&
                    this.RunTemplateName.Equals(input.RunTemplateName))
                ) && 
                (
                    this.ComputeSize == input.ComputeSize ||
                    (this.ComputeSize != null &&
                    this.ComputeSize.Equals(input.ComputeSize))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                if (this.WorkspaceName != null)
                    hashCode = hashCode * 59 + this.WorkspaceName.GetHashCode();
                if (this.ScenarioId != null)
                    hashCode = hashCode * 59 + this.ScenarioId.GetHashCode();
                if (this.ScenarioName != null)
                    hashCode = hashCode * 59 + this.ScenarioName.GetHashCode();
                if (this.SolutionId != null)
                    hashCode = hashCode * 59 + this.SolutionId.GetHashCode();
                if (this.SolutionName != null)
                    hashCode = hashCode * 59 + this.SolutionName.GetHashCode();
                if (this.SolutionVersion != null)
                    hashCode = hashCode * 59 + this.SolutionVersion.GetHashCode();
                if (this.RunTemplateId != null)
                    hashCode = hashCode * 59 + this.RunTemplateId.GetHashCode();
                if (this.RunTemplateName != null)
                    hashCode = hashCode * 59 + this.RunTemplateName.GetHashCode();
                if (this.ComputeSize != null)
                    hashCode = hashCode * 59 + this.ComputeSize.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
