/*
 * Cosmo Tech Platform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.2.7
 * Contact: platform@cosmotech.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// the Connector setup bound to a Dataset
    /// </summary>
    [DataContract(Name = "Dataset_connector")]
    public partial class DatasetConnector : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetConnector" /> class.
        /// </summary>
        /// <param name="id">the Connector id.</param>
        /// <param name="name">the Connector name.</param>
        /// <param name="varVersion">the Connector version.</param>
        /// <param name="parametersValues">parametersValues.</param>
        public DatasetConnector(string id = default(string), string name = default(string), string varVersion = default(string), Dictionary<string, string> parametersValues = default(Dictionary<string, string>))
        {
            this.Id = id;
            this.Name = name;
            this.VarVersion = varVersion;
            this.ParametersValues = parametersValues;
        }

        /// <summary>
        /// the Connector id
        /// </summary>
        /// <value>the Connector id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// the Connector name
        /// </summary>
        /// <value>the Connector name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the Connector version
        /// </summary>
        /// <value>the Connector version</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets ParametersValues
        /// </summary>
        [DataMember(Name = "parametersValues", EmitDefaultValue = false)]
        public Dictionary<string, string> ParametersValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatasetConnector {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  ParametersValues: ").Append(ParametersValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
