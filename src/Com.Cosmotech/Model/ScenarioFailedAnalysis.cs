/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// ScenarioFailedAnalysis
    /// </summary>
    [DataContract(Name = "ScenarioFailedAnalysis")]
    public partial class ScenarioFailedAnalysis : IEquatable<ScenarioFailedAnalysis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioFailedAnalysis" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScenarioFailedAnalysis() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioFailedAnalysis" /> class.
        /// </summary>
        /// <param name="analysisId">the Simulator Analysis Id (required).</param>
        /// <param name="datasetList">the list of Dataset Id associated to this Scenario Analysis.</param>
        /// <param name="parametersValues">the list of Simulator Analysis parameters values.</param>
        public ScenarioFailedAnalysis(string analysisId = default(string), List<string> datasetList = default(List<string>), List<ScenarioAnalysisParameterValue> parametersValues = default(List<ScenarioAnalysisParameterValue>))
        {
            // to ensure "analysisId" is required (not null)
            this.AnalysisId = analysisId ?? throw new ArgumentNullException("analysisId is a required property for ScenarioFailedAnalysis and cannot be null");
            this.DatasetList = datasetList;
            this.ParametersValues = parametersValues;
        }

        /// <summary>
        /// the Simulator Analysis Id
        /// </summary>
        /// <value>the Simulator Analysis Id</value>
        [DataMember(Name = "analysisId", IsRequired = true, EmitDefaultValue = false)]
        public string AnalysisId { get; set; }

        /// <summary>
        /// the list of Dataset Id associated to this Scenario Analysis
        /// </summary>
        /// <value>the list of Dataset Id associated to this Scenario Analysis</value>
        [DataMember(Name = "datasetList", EmitDefaultValue = false)]
        public List<string> DatasetList { get; set; }

        /// <summary>
        /// the list of Simulator Analysis parameters values
        /// </summary>
        /// <value>the list of Simulator Analysis parameters values</value>
        [DataMember(Name = "parametersValues", EmitDefaultValue = false)]
        public List<ScenarioAnalysisParameterValue> ParametersValues { get; set; }

        /// <summary>
        /// the Simulation Run Id
        /// </summary>
        /// <value>the Simulation Run Id</value>
        [DataMember(Name = "simulationId", EmitDefaultValue = false)]
        public string SimulationId { get; private set; }

        /// <summary>
        /// Returns false as SimulationId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSimulationId()
        {
            return false;
        }

        /// <summary>
        /// the Simulation Run error message
        /// </summary>
        /// <value>the Simulation Run error message</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; private set; }

        /// <summary>
        /// Returns false as Error should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeError()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScenarioFailedAnalysis {\n");
            sb.Append("  AnalysisId: ").Append(AnalysisId).Append("\n");
            sb.Append("  DatasetList: ").Append(DatasetList).Append("\n");
            sb.Append("  ParametersValues: ").Append(ParametersValues).Append("\n");
            sb.Append("  SimulationId: ").Append(SimulationId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScenarioFailedAnalysis);
        }

        /// <summary>
        /// Returns true if ScenarioFailedAnalysis instances are equal
        /// </summary>
        /// <param name="input">Instance of ScenarioFailedAnalysis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioFailedAnalysis input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnalysisId == input.AnalysisId ||
                    (this.AnalysisId != null &&
                    this.AnalysisId.Equals(input.AnalysisId))
                ) && 
                (
                    this.DatasetList == input.DatasetList ||
                    this.DatasetList != null &&
                    input.DatasetList != null &&
                    this.DatasetList.SequenceEqual(input.DatasetList)
                ) && 
                (
                    this.ParametersValues == input.ParametersValues ||
                    this.ParametersValues != null &&
                    input.ParametersValues != null &&
                    this.ParametersValues.SequenceEqual(input.ParametersValues)
                ) && 
                (
                    this.SimulationId == input.SimulationId ||
                    (this.SimulationId != null &&
                    this.SimulationId.Equals(input.SimulationId))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnalysisId != null)
                    hashCode = hashCode * 59 + this.AnalysisId.GetHashCode();
                if (this.DatasetList != null)
                    hashCode = hashCode * 59 + this.DatasetList.GetHashCode();
                if (this.ParametersValues != null)
                    hashCode = hashCode * 59 + this.ParametersValues.GetHashCode();
                if (this.SimulationId != null)
                    hashCode = hashCode * 59 + this.SimulationId.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
