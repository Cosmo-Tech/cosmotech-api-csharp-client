/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a Solution Run Template
    /// </summary>
    [DataContract(Name = "RunTemplate")]
    public partial class RunTemplate : IEquatable<RunTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunTemplate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RunTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunTemplate" /> class.
        /// </summary>
        /// <param name="id">the Solution Run Template id (required).</param>
        /// <param name="name">the Run Template name (required).</param>
        /// <param name="description">the Run Template description.</param>
        /// <param name="csmSimulation">the Cosmo Tech simulation name. This information is send to the Engine. Mandatory information if no Engine is defined.</param>
        /// <param name="tags">the list of Run Template tags.</param>
        /// <param name="computeSize">the compute size needed for this Run Template. Standard sizes are basic and highcpu. Default is basic.</param>
        /// <param name="parametersHandlerResource">parametersHandlerResource.</param>
        /// <param name="datasetValidatorResource">datasetValidatorResource.</param>
        /// <param name="preRunResource">preRunResource.</param>
        /// <param name="engineResource">engineResource.</param>
        /// <param name="postRunResource">postRunResource.</param>
        /// <param name="sendDatasetsToDataWarehouse">whether or not the Datasets values are send to the DataWarehouse prior to Simulation Run (default to true).</param>
        /// <param name="sendInputParametersToDataWarehouse">whether or not the input parameters values are send to the DataWarehouse prior to Simulation Run (default to true).</param>
        /// <param name="parameterGroups">the ordered list of parameters groups for the Run Template.</param>
        public RunTemplate(string id = default(string), string name = default(string), string description = default(string), string csmSimulation = default(string), List<string> tags = default(List<string>), string computeSize = default(string), RunTemplateResourceStorage parametersHandlerResource = default(RunTemplateResourceStorage), RunTemplateResourceStorage datasetValidatorResource = default(RunTemplateResourceStorage), RunTemplateResourceStorage preRunResource = default(RunTemplateResourceStorage), RunTemplateResourceStorage engineResource = default(RunTemplateResourceStorage), RunTemplateResourceStorage postRunResource = default(RunTemplateResourceStorage), bool sendDatasetsToDataWarehouse = true, bool sendInputParametersToDataWarehouse = true, List<string> parameterGroups = default(List<string>))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for RunTemplate and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for RunTemplate and cannot be null");
            this.Description = description;
            this.CsmSimulation = csmSimulation;
            this.Tags = tags;
            this.ComputeSize = computeSize;
            this.ParametersHandlerResource = parametersHandlerResource;
            this.DatasetValidatorResource = datasetValidatorResource;
            this.PreRunResource = preRunResource;
            this.EngineResource = engineResource;
            this.PostRunResource = postRunResource;
            this.SendDatasetsToDataWarehouse = sendDatasetsToDataWarehouse;
            this.SendInputParametersToDataWarehouse = sendInputParametersToDataWarehouse;
            this.ParameterGroups = parameterGroups;
        }

        /// <summary>
        /// the Solution Run Template id
        /// </summary>
        /// <value>the Solution Run Template id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// the Run Template name
        /// </summary>
        /// <value>the Run Template name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the Run Template description
        /// </summary>
        /// <value>the Run Template description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// the Cosmo Tech simulation name. This information is send to the Engine. Mandatory information if no Engine is defined
        /// </summary>
        /// <value>the Cosmo Tech simulation name. This information is send to the Engine. Mandatory information if no Engine is defined</value>
        [DataMember(Name = "csmSimulation", EmitDefaultValue = false)]
        public string CsmSimulation { get; set; }

        /// <summary>
        /// the list of Run Template tags
        /// </summary>
        /// <value>the list of Run Template tags</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// the compute size needed for this Run Template. Standard sizes are basic and highcpu. Default is basic
        /// </summary>
        /// <value>the compute size needed for this Run Template. Standard sizes are basic and highcpu. Default is basic</value>
        [DataMember(Name = "computeSize", EmitDefaultValue = false)]
        public string ComputeSize { get; set; }

        /// <summary>
        /// Gets or Sets ParametersHandlerResource
        /// </summary>
        [DataMember(Name = "parametersHandlerResource", EmitDefaultValue = false)]
        public RunTemplateResourceStorage ParametersHandlerResource { get; set; }

        /// <summary>
        /// Gets or Sets DatasetValidatorResource
        /// </summary>
        [DataMember(Name = "datasetValidatorResource", EmitDefaultValue = false)]
        public RunTemplateResourceStorage DatasetValidatorResource { get; set; }

        /// <summary>
        /// Gets or Sets PreRunResource
        /// </summary>
        [DataMember(Name = "preRunResource", EmitDefaultValue = false)]
        public RunTemplateResourceStorage PreRunResource { get; set; }

        /// <summary>
        /// Gets or Sets EngineResource
        /// </summary>
        [DataMember(Name = "engineResource", EmitDefaultValue = false)]
        public RunTemplateResourceStorage EngineResource { get; set; }

        /// <summary>
        /// Gets or Sets PostRunResource
        /// </summary>
        [DataMember(Name = "postRunResource", EmitDefaultValue = false)]
        public RunTemplateResourceStorage PostRunResource { get; set; }

        /// <summary>
        /// whether or not the Datasets values are send to the DataWarehouse prior to Simulation Run
        /// </summary>
        /// <value>whether or not the Datasets values are send to the DataWarehouse prior to Simulation Run</value>
        [DataMember(Name = "sendDatasetsToDataWarehouse", EmitDefaultValue = false)]
        public bool SendDatasetsToDataWarehouse { get; set; }

        /// <summary>
        /// whether or not the input parameters values are send to the DataWarehouse prior to Simulation Run
        /// </summary>
        /// <value>whether or not the input parameters values are send to the DataWarehouse prior to Simulation Run</value>
        [DataMember(Name = "sendInputParametersToDataWarehouse", EmitDefaultValue = false)]
        public bool SendInputParametersToDataWarehouse { get; set; }

        /// <summary>
        /// the ordered list of parameters groups for the Run Template
        /// </summary>
        /// <value>the ordered list of parameters groups for the Run Template</value>
        [DataMember(Name = "parameterGroups", EmitDefaultValue = false)]
        public List<string> ParameterGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunTemplate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CsmSimulation: ").Append(CsmSimulation).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ComputeSize: ").Append(ComputeSize).Append("\n");
            sb.Append("  ParametersHandlerResource: ").Append(ParametersHandlerResource).Append("\n");
            sb.Append("  DatasetValidatorResource: ").Append(DatasetValidatorResource).Append("\n");
            sb.Append("  PreRunResource: ").Append(PreRunResource).Append("\n");
            sb.Append("  EngineResource: ").Append(EngineResource).Append("\n");
            sb.Append("  PostRunResource: ").Append(PostRunResource).Append("\n");
            sb.Append("  SendDatasetsToDataWarehouse: ").Append(SendDatasetsToDataWarehouse).Append("\n");
            sb.Append("  SendInputParametersToDataWarehouse: ").Append(SendInputParametersToDataWarehouse).Append("\n");
            sb.Append("  ParameterGroups: ").Append(ParameterGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunTemplate);
        }

        /// <summary>
        /// Returns true if RunTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of RunTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CsmSimulation == input.CsmSimulation ||
                    (this.CsmSimulation != null &&
                    this.CsmSimulation.Equals(input.CsmSimulation))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.ComputeSize == input.ComputeSize ||
                    (this.ComputeSize != null &&
                    this.ComputeSize.Equals(input.ComputeSize))
                ) && 
                (
                    this.ParametersHandlerResource == input.ParametersHandlerResource ||
                    (this.ParametersHandlerResource != null &&
                    this.ParametersHandlerResource.Equals(input.ParametersHandlerResource))
                ) && 
                (
                    this.DatasetValidatorResource == input.DatasetValidatorResource ||
                    (this.DatasetValidatorResource != null &&
                    this.DatasetValidatorResource.Equals(input.DatasetValidatorResource))
                ) && 
                (
                    this.PreRunResource == input.PreRunResource ||
                    (this.PreRunResource != null &&
                    this.PreRunResource.Equals(input.PreRunResource))
                ) && 
                (
                    this.EngineResource == input.EngineResource ||
                    (this.EngineResource != null &&
                    this.EngineResource.Equals(input.EngineResource))
                ) && 
                (
                    this.PostRunResource == input.PostRunResource ||
                    (this.PostRunResource != null &&
                    this.PostRunResource.Equals(input.PostRunResource))
                ) && 
                (
                    this.SendDatasetsToDataWarehouse == input.SendDatasetsToDataWarehouse ||
                    this.SendDatasetsToDataWarehouse.Equals(input.SendDatasetsToDataWarehouse)
                ) && 
                (
                    this.SendInputParametersToDataWarehouse == input.SendInputParametersToDataWarehouse ||
                    this.SendInputParametersToDataWarehouse.Equals(input.SendInputParametersToDataWarehouse)
                ) && 
                (
                    this.ParameterGroups == input.ParameterGroups ||
                    this.ParameterGroups != null &&
                    input.ParameterGroups != null &&
                    this.ParameterGroups.SequenceEqual(input.ParameterGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CsmSimulation != null)
                    hashCode = hashCode * 59 + this.CsmSimulation.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.ComputeSize != null)
                    hashCode = hashCode * 59 + this.ComputeSize.GetHashCode();
                if (this.ParametersHandlerResource != null)
                    hashCode = hashCode * 59 + this.ParametersHandlerResource.GetHashCode();
                if (this.DatasetValidatorResource != null)
                    hashCode = hashCode * 59 + this.DatasetValidatorResource.GetHashCode();
                if (this.PreRunResource != null)
                    hashCode = hashCode * 59 + this.PreRunResource.GetHashCode();
                if (this.EngineResource != null)
                    hashCode = hashCode * 59 + this.EngineResource.GetHashCode();
                if (this.PostRunResource != null)
                    hashCode = hashCode * 59 + this.PostRunResource.GetHashCode();
                hashCode = hashCode * 59 + this.SendDatasetsToDataWarehouse.GetHashCode();
                hashCode = hashCode * 59 + this.SendInputParametersToDataWarehouse.GetHashCode();
                if (this.ParameterGroups != null)
                    hashCode = hashCode * 59 + this.ParameterGroups.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
