/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// logs for a given container
    /// </summary>
    [DataContract(Name = "SimulationContainerLogs")]
    public partial class SimulationContainerLogs : IEquatable<SimulationContainerLogs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationContainerLogs" /> class.
        /// </summary>
        /// <param name="textLog">the plain text log if plainText option has been set.</param>
        public SimulationContainerLogs(string textLog = default(string))
        {
            this.TextLog = textLog;
        }

        /// <summary>
        /// container ID for log source as seen by Docker engine
        /// </summary>
        /// <value>container ID for log source as seen by Docker engine</value>
        [DataMember(Name = "containerId", EmitDefaultValue = false)]
        public string ContainerId { get; private set; }

        /// <summary>
        /// Returns false as ContainerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContainerId()
        {
            return false;
        }

        /// <summary>
        /// computer/node that&#39;s generating the log
        /// </summary>
        /// <value>computer/node that&#39;s generating the log</value>
        [DataMember(Name = "computer", EmitDefaultValue = false)]
        public string Computer { get; private set; }

        /// <summary>
        /// Returns false as Computer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeComputer()
        {
            return false;
        }

        /// <summary>
        /// the list of container logs in structured format
        /// </summary>
        /// <value>the list of container logs in structured format</value>
        [DataMember(Name = "logs", EmitDefaultValue = false)]
        public List<SimulationContainerLog> Logs { get; private set; }

        /// <summary>
        /// Returns false as Logs should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLogs()
        {
            return false;
        }

        /// <summary>
        /// the plain text log if plainText option has been set
        /// </summary>
        /// <value>the plain text log if plainText option has been set</value>
        [DataMember(Name = "textLog", EmitDefaultValue = false)]
        public string TextLog { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimulationContainerLogs {\n");
            sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
            sb.Append("  Computer: ").Append(Computer).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  TextLog: ").Append(TextLog).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulationContainerLogs);
        }

        /// <summary>
        /// Returns true if SimulationContainerLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulationContainerLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulationContainerLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerId == input.ContainerId ||
                    (this.ContainerId != null &&
                    this.ContainerId.Equals(input.ContainerId))
                ) && 
                (
                    this.Computer == input.Computer ||
                    (this.Computer != null &&
                    this.Computer.Equals(input.Computer))
                ) && 
                (
                    this.Logs == input.Logs ||
                    this.Logs != null &&
                    input.Logs != null &&
                    this.Logs.SequenceEqual(input.Logs)
                ) && 
                (
                    this.TextLog == input.TextLog ||
                    (this.TextLog != null &&
                    this.TextLog.Equals(input.TextLog))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerId != null)
                    hashCode = hashCode * 59 + this.ContainerId.GetHashCode();
                if (this.Computer != null)
                    hashCode = hashCode * 59 + this.Computer.GetHashCode();
                if (this.Logs != null)
                    hashCode = hashCode * 59 + this.Logs.GetHashCode();
                if (this.TextLog != null)
                    hashCode = hashCode * 59 + this.TextLog.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
