/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a Simulation container description
    /// </summary>
    [DataContract(Name = "SimulationContainers")]
    public partial class SimulationContainers : IEquatable<SimulationContainers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationContainers" /> class.
        /// </summary>
        /// <param name="envVars">a freeform environment variable map.</param>
        /// <param name="image">the container image URI.</param>
        /// <param name="runArgs">the list of run arguments for the container.</param>
        public SimulationContainers(Dictionary<string, Object> envVars = default(Dictionary<string, Object>), string image = default(string), List<string> runArgs = default(List<string>))
        {
            this.EnvVars = envVars;
            this.Image = image;
            this.RunArgs = runArgs;
        }

        /// <summary>
        /// the container Id
        /// </summary>
        /// <value>the container Id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// a freeform environment variable map
        /// </summary>
        /// <value>a freeform environment variable map</value>
        [DataMember(Name = "envVars", EmitDefaultValue = false)]
        public Dictionary<string, Object> EnvVars { get; set; }

        /// <summary>
        /// the container image URI
        /// </summary>
        /// <value>the container image URI</value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        /// the list of run arguments for the container
        /// </summary>
        /// <value>the list of run arguments for the container</value>
        [DataMember(Name = "runArgs", EmitDefaultValue = false)]
        public List<string> RunArgs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimulationContainers {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EnvVars: ").Append(EnvVars).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  RunArgs: ").Append(RunArgs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulationContainers);
        }

        /// <summary>
        /// Returns true if SimulationContainers instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulationContainers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulationContainers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EnvVars == input.EnvVars ||
                    this.EnvVars != null &&
                    input.EnvVars != null &&
                    this.EnvVars.SequenceEqual(input.EnvVars)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.RunArgs == input.RunArgs ||
                    this.RunArgs != null &&
                    input.RunArgs != null &&
                    this.RunArgs.SequenceEqual(input.RunArgs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EnvVars != null)
                    hashCode = hashCode * 59 + this.EnvVars.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.RunArgs != null)
                    hashCode = hashCode * 59 + this.RunArgs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
