/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a Scenario with detailed information
    /// </summary>
    [DataContract(Name = "Scenario_allOf")]
    public partial class ScenarioAllOf : IEquatable<ScenarioAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioAllOf" /> class.
        /// </summary>
        /// <param name="datasetList">the list of Dataset Id associated to this Scenario Run Template.</param>
        /// <param name="parametersValues">the list of Solution Run Template parameters values.</param>
        /// <param name="sendInputToDataWarehouse">whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run.</param>
        public ScenarioAllOf(List<string> datasetList = default(List<string>), List<ScenarioRunTemplateParameterValue> parametersValues = default(List<ScenarioRunTemplateParameterValue>), bool sendInputToDataWarehouse = default(bool))
        {
            this.DatasetList = datasetList;
            this.ParametersValues = parametersValues;
            this.SendInputToDataWarehouse = sendInputToDataWarehouse;
        }

        /// <summary>
        /// the Solution name
        /// </summary>
        /// <value>the Solution name</value>
        [DataMember(Name = "solutionName", EmitDefaultValue = false)]
        public string SolutionName { get; private set; }

        /// <summary>
        /// Returns false as SolutionName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSolutionName()
        {
            return false;
        }

        /// <summary>
        /// the Solution Run Template name associated with this Scenario
        /// </summary>
        /// <value>the Solution Run Template name associated with this Scenario</value>
        [DataMember(Name = "runTemplateName", EmitDefaultValue = false)]
        public string RunTemplateName { get; private set; }

        /// <summary>
        /// Returns false as RunTemplateName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRunTemplateName()
        {
            return false;
        }

        /// <summary>
        /// the list of Dataset Id associated to this Scenario Run Template
        /// </summary>
        /// <value>the list of Dataset Id associated to this Scenario Run Template</value>
        [DataMember(Name = "datasetList", EmitDefaultValue = false)]
        public List<string> DatasetList { get; set; }

        /// <summary>
        /// the list of Solution Run Template parameters values
        /// </summary>
        /// <value>the list of Solution Run Template parameters values</value>
        [DataMember(Name = "parametersValues", EmitDefaultValue = false)]
        public List<ScenarioRunTemplateParameterValue> ParametersValues { get; set; }

        /// <summary>
        /// whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run
        /// </summary>
        /// <value>whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run</value>
        [DataMember(Name = "sendInputToDataWarehouse", EmitDefaultValue = false)]
        public bool SendInputToDataWarehouse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScenarioAllOf {\n");
            sb.Append("  SolutionName: ").Append(SolutionName).Append("\n");
            sb.Append("  RunTemplateName: ").Append(RunTemplateName).Append("\n");
            sb.Append("  DatasetList: ").Append(DatasetList).Append("\n");
            sb.Append("  ParametersValues: ").Append(ParametersValues).Append("\n");
            sb.Append("  SendInputToDataWarehouse: ").Append(SendInputToDataWarehouse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScenarioAllOf);
        }

        /// <summary>
        /// Returns true if ScenarioAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ScenarioAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SolutionName == input.SolutionName ||
                    (this.SolutionName != null &&
                    this.SolutionName.Equals(input.SolutionName))
                ) && 
                (
                    this.RunTemplateName == input.RunTemplateName ||
                    (this.RunTemplateName != null &&
                    this.RunTemplateName.Equals(input.RunTemplateName))
                ) && 
                (
                    this.DatasetList == input.DatasetList ||
                    this.DatasetList != null &&
                    input.DatasetList != null &&
                    this.DatasetList.SequenceEqual(input.DatasetList)
                ) && 
                (
                    this.ParametersValues == input.ParametersValues ||
                    this.ParametersValues != null &&
                    input.ParametersValues != null &&
                    this.ParametersValues.SequenceEqual(input.ParametersValues)
                ) && 
                (
                    this.SendInputToDataWarehouse == input.SendInputToDataWarehouse ||
                    this.SendInputToDataWarehouse.Equals(input.SendInputToDataWarehouse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SolutionName != null)
                    hashCode = hashCode * 59 + this.SolutionName.GetHashCode();
                if (this.RunTemplateName != null)
                    hashCode = hashCode * 59 + this.RunTemplateName.GetHashCode();
                if (this.DatasetList != null)
                    hashCode = hashCode * 59 + this.DatasetList.GetHashCode();
                if (this.ParametersValues != null)
                    hashCode = hashCode * 59 + this.ParametersValues.GetHashCode();
                hashCode = hashCode * 59 + this.SendInputToDataWarehouse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
