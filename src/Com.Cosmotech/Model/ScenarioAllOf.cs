/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a Scenario with detailed information
    /// </summary>
    [DataContract(Name = "Scenario_allOf")]
    public partial class ScenarioAllOf : IEquatable<ScenarioAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioAllOf" /> class.
        /// </summary>
        /// <param name="simulatorName">simulatorName.</param>
        /// <param name="simulatorAnalysisName">simulatorAnalysisName.</param>
        /// <param name="analysis">analysis.</param>
        /// <param name="sendInputToDataWarehouse">default setting for all Analysis to set whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run.</param>
        public ScenarioAllOf(string simulatorName = default(string), string simulatorAnalysisName = default(string), ScenarioAnalysis analysis = default(ScenarioAnalysis), bool sendInputToDataWarehouse = default(bool))
        {
            this.SimulatorName = simulatorName;
            this.SimulatorAnalysisName = simulatorAnalysisName;
            this.Analysis = analysis;
            this.SendInputToDataWarehouse = sendInputToDataWarehouse;
        }

        /// <summary>
        /// Gets or Sets SimulatorName
        /// </summary>
        [DataMember(Name = "simulatorName", EmitDefaultValue = false)]
        public string SimulatorName { get; set; }

        /// <summary>
        /// Gets or Sets SimulatorAnalysisName
        /// </summary>
        [DataMember(Name = "simulatorAnalysisName", EmitDefaultValue = false)]
        public string SimulatorAnalysisName { get; set; }

        /// <summary>
        /// Gets or Sets Analysis
        /// </summary>
        [DataMember(Name = "analysis", EmitDefaultValue = false)]
        public ScenarioAnalysis Analysis { get; set; }

        /// <summary>
        /// default setting for all Analysis to set whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run
        /// </summary>
        /// <value>default setting for all Analysis to set whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run</value>
        [DataMember(Name = "sendInputToDataWarehouse", EmitDefaultValue = false)]
        public bool SendInputToDataWarehouse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScenarioAllOf {\n");
            sb.Append("  SimulatorName: ").Append(SimulatorName).Append("\n");
            sb.Append("  SimulatorAnalysisName: ").Append(SimulatorAnalysisName).Append("\n");
            sb.Append("  Analysis: ").Append(Analysis).Append("\n");
            sb.Append("  SendInputToDataWarehouse: ").Append(SendInputToDataWarehouse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScenarioAllOf);
        }

        /// <summary>
        /// Returns true if ScenarioAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ScenarioAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SimulatorName == input.SimulatorName ||
                    (this.SimulatorName != null &&
                    this.SimulatorName.Equals(input.SimulatorName))
                ) && 
                (
                    this.SimulatorAnalysisName == input.SimulatorAnalysisName ||
                    (this.SimulatorAnalysisName != null &&
                    this.SimulatorAnalysisName.Equals(input.SimulatorAnalysisName))
                ) && 
                (
                    this.Analysis == input.Analysis ||
                    (this.Analysis != null &&
                    this.Analysis.Equals(input.Analysis))
                ) && 
                (
                    this.SendInputToDataWarehouse == input.SendInputToDataWarehouse ||
                    this.SendInputToDataWarehouse.Equals(input.SendInputToDataWarehouse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SimulatorName != null)
                    hashCode = hashCode * 59 + this.SimulatorName.GetHashCode();
                if (this.SimulatorAnalysisName != null)
                    hashCode = hashCode * 59 + this.SimulatorAnalysisName.GetHashCode();
                if (this.Analysis != null)
                    hashCode = hashCode * 59 + this.Analysis.GetHashCode();
                hashCode = hashCode * 59 + this.SendInputToDataWarehouse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
