/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a Workspace
    /// </summary>
    [DataContract(Name = "Workspace")]
    public partial class Workspace : IEquatable<Workspace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Workspace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspace" /> class.
        /// </summary>
        /// <param name="name">the Workspace name (required).</param>
        /// <param name="description">the Workspace description.</param>
        /// <param name="version">the Workspace version MAJOR.MINOR.PATCH..</param>
        /// <param name="tags">the list of tags.</param>
        /// <param name="simulator">simulator (required).</param>
        /// <param name="userList">the list of users Id with their role.</param>
        /// <param name="webApp">webApp.</param>
        /// <param name="services">services.</param>
        public Workspace(string name = default(string), string description = default(string), string version = default(string), List<string> tags = default(List<string>), WorkspaceSimulator simulator = default(WorkspaceSimulator), List<WorkspaceUser> userList = default(List<WorkspaceUser>), WorkspaceWebApp webApp = default(WorkspaceWebApp), WorkspaceServices services = default(WorkspaceServices))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Workspace and cannot be null");
            // to ensure "simulator" is required (not null)
            this.Simulator = simulator ?? throw new ArgumentNullException("simulator is a required property for Workspace and cannot be null");
            this.Description = description;
            this.Version = version;
            this.Tags = tags;
            this.UserList = userList;
            this.WebApp = webApp;
            this.Services = services;
        }

        /// <summary>
        /// the Workspace version unique identifier
        /// </summary>
        /// <value>the Workspace version unique identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// the Workspace name
        /// </summary>
        /// <value>the Workspace name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the Workspace description
        /// </summary>
        /// <value>the Workspace description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// the Workspace version MAJOR.MINOR.PATCH.
        /// </summary>
        /// <value>the Workspace version MAJOR.MINOR.PATCH.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string Version { get; set; }

        /// <summary>
        /// the list of tags
        /// </summary>
        /// <value>the list of tags</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// the user id which own this workspace
        /// </summary>
        /// <value>the user id which own this workspace</value>
        [DataMember(Name = "ownerId", EmitDefaultValue = false)]
        public string OwnerId { get; private set; }

        /// <summary>
        /// Returns false as OwnerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOwnerId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Simulator
        /// </summary>
        [DataMember(Name = "simulator", IsRequired = true, EmitDefaultValue = false)]
        public WorkspaceSimulator Simulator { get; set; }

        /// <summary>
        /// the list of users Id with their role
        /// </summary>
        /// <value>the list of users Id with their role</value>
        [DataMember(Name = "userList", EmitDefaultValue = false)]
        public List<WorkspaceUser> UserList { get; set; }

        /// <summary>
        /// Gets or Sets WebApp
        /// </summary>
        [DataMember(Name = "webApp", EmitDefaultValue = false)]
        public WorkspaceWebApp WebApp { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name = "services", EmitDefaultValue = false)]
        public WorkspaceServices Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Workspace {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Simulator: ").Append(Simulator).Append("\n");
            sb.Append("  UserList: ").Append(UserList).Append("\n");
            sb.Append("  WebApp: ").Append(WebApp).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Workspace);
        }

        /// <summary>
        /// Returns true if Workspace instances are equal
        /// </summary>
        /// <param name="input">Instance of Workspace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Workspace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.Simulator == input.Simulator ||
                    (this.Simulator != null &&
                    this.Simulator.Equals(input.Simulator))
                ) && 
                (
                    this.UserList == input.UserList ||
                    this.UserList != null &&
                    input.UserList != null &&
                    this.UserList.SequenceEqual(input.UserList)
                ) && 
                (
                    this.WebApp == input.WebApp ||
                    (this.WebApp != null &&
                    this.WebApp.Equals(input.WebApp))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.Simulator != null)
                    hashCode = hashCode * 59 + this.Simulator.GetHashCode();
                if (this.UserList != null)
                    hashCode = hashCode * 59 + this.UserList.GetHashCode();
                if (this.WebApp != null)
                    hashCode = hashCode * 59 + this.WebApp.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
