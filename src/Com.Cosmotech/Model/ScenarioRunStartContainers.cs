/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// the parameters to run directly containers
    /// </summary>
    [DataContract(Name = "ScenarioRunStartContainers")]
    public partial class ScenarioRunStartContainers : IEquatable<ScenarioRunStartContainers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioRunStartContainers" /> class.
        /// </summary>
        /// <param name="nodeLabel">the node label request.</param>
        /// <param name="fetchScenarioParametersContainer">fetchScenarioParametersContainer.</param>
        /// <param name="applyParametersContainer">applyParametersContainer.</param>
        /// <param name="validateDataContainer">validateDataContainer.</param>
        /// <param name="sendDataWarehouseContainer">sendDataWarehouseContainer.</param>
        /// <param name="preRunContainer">preRunContainer.</param>
        /// <param name="runContainer">runContainer.</param>
        /// <param name="postRunContainer">postRunContainer.</param>
        public ScenarioRunStartContainers(string nodeLabel = default(string), ScenarioRunContainer fetchScenarioParametersContainer = default(ScenarioRunContainer), ScenarioRunContainer applyParametersContainer = default(ScenarioRunContainer), ScenarioRunContainer validateDataContainer = default(ScenarioRunContainer), ScenarioRunContainer sendDataWarehouseContainer = default(ScenarioRunContainer), ScenarioRunContainer preRunContainer = default(ScenarioRunContainer), ScenarioRunContainer runContainer = default(ScenarioRunContainer), ScenarioRunContainer postRunContainer = default(ScenarioRunContainer))
        {
            this.NodeLabel = nodeLabel;
            this.FetchScenarioParametersContainer = fetchScenarioParametersContainer;
            this.ApplyParametersContainer = applyParametersContainer;
            this.ValidateDataContainer = validateDataContainer;
            this.SendDataWarehouseContainer = sendDataWarehouseContainer;
            this.PreRunContainer = preRunContainer;
            this.RunContainer = runContainer;
            this.PostRunContainer = postRunContainer;
        }

        /// <summary>
        /// the node label request
        /// </summary>
        /// <value>the node label request</value>
        [DataMember(Name = "nodeLabel", EmitDefaultValue = false)]
        public string NodeLabel { get; set; }

        /// <summary>
        /// the containers which fetch the Scenario Datasets
        /// </summary>
        /// <value>the containers which fetch the Scenario Datasets</value>
        [DataMember(Name = "fetchDatasetContainers", EmitDefaultValue = false)]
        public List<ScenarioRunContainer> FetchDatasetContainers { get; private set; }

        /// <summary>
        /// Returns false as FetchDatasetContainers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFetchDatasetContainers()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets FetchScenarioParametersContainer
        /// </summary>
        [DataMember(Name = "fetchScenarioParametersContainer", EmitDefaultValue = false)]
        public ScenarioRunContainer FetchScenarioParametersContainer { get; set; }

        /// <summary>
        /// Gets or Sets ApplyParametersContainer
        /// </summary>
        [DataMember(Name = "applyParametersContainer", EmitDefaultValue = false)]
        public ScenarioRunContainer ApplyParametersContainer { get; set; }

        /// <summary>
        /// Gets or Sets ValidateDataContainer
        /// </summary>
        [DataMember(Name = "validateDataContainer", EmitDefaultValue = false)]
        public ScenarioRunContainer ValidateDataContainer { get; set; }

        /// <summary>
        /// Gets or Sets SendDataWarehouseContainer
        /// </summary>
        [DataMember(Name = "sendDataWarehouseContainer", EmitDefaultValue = false)]
        public ScenarioRunContainer SendDataWarehouseContainer { get; set; }

        /// <summary>
        /// Gets or Sets PreRunContainer
        /// </summary>
        [DataMember(Name = "preRunContainer", EmitDefaultValue = false)]
        public ScenarioRunContainer PreRunContainer { get; set; }

        /// <summary>
        /// Gets or Sets RunContainer
        /// </summary>
        [DataMember(Name = "runContainer", EmitDefaultValue = false)]
        public ScenarioRunContainer RunContainer { get; set; }

        /// <summary>
        /// Gets or Sets PostRunContainer
        /// </summary>
        [DataMember(Name = "postRunContainer", EmitDefaultValue = false)]
        public ScenarioRunContainer PostRunContainer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScenarioRunStartContainers {\n");
            sb.Append("  NodeLabel: ").Append(NodeLabel).Append("\n");
            sb.Append("  FetchDatasetContainers: ").Append(FetchDatasetContainers).Append("\n");
            sb.Append("  FetchScenarioParametersContainer: ").Append(FetchScenarioParametersContainer).Append("\n");
            sb.Append("  ApplyParametersContainer: ").Append(ApplyParametersContainer).Append("\n");
            sb.Append("  ValidateDataContainer: ").Append(ValidateDataContainer).Append("\n");
            sb.Append("  SendDataWarehouseContainer: ").Append(SendDataWarehouseContainer).Append("\n");
            sb.Append("  PreRunContainer: ").Append(PreRunContainer).Append("\n");
            sb.Append("  RunContainer: ").Append(RunContainer).Append("\n");
            sb.Append("  PostRunContainer: ").Append(PostRunContainer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScenarioRunStartContainers);
        }

        /// <summary>
        /// Returns true if ScenarioRunStartContainers instances are equal
        /// </summary>
        /// <param name="input">Instance of ScenarioRunStartContainers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioRunStartContainers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NodeLabel == input.NodeLabel ||
                    (this.NodeLabel != null &&
                    this.NodeLabel.Equals(input.NodeLabel))
                ) && 
                (
                    this.FetchDatasetContainers == input.FetchDatasetContainers ||
                    this.FetchDatasetContainers != null &&
                    input.FetchDatasetContainers != null &&
                    this.FetchDatasetContainers.SequenceEqual(input.FetchDatasetContainers)
                ) && 
                (
                    this.FetchScenarioParametersContainer == input.FetchScenarioParametersContainer ||
                    (this.FetchScenarioParametersContainer != null &&
                    this.FetchScenarioParametersContainer.Equals(input.FetchScenarioParametersContainer))
                ) && 
                (
                    this.ApplyParametersContainer == input.ApplyParametersContainer ||
                    (this.ApplyParametersContainer != null &&
                    this.ApplyParametersContainer.Equals(input.ApplyParametersContainer))
                ) && 
                (
                    this.ValidateDataContainer == input.ValidateDataContainer ||
                    (this.ValidateDataContainer != null &&
                    this.ValidateDataContainer.Equals(input.ValidateDataContainer))
                ) && 
                (
                    this.SendDataWarehouseContainer == input.SendDataWarehouseContainer ||
                    (this.SendDataWarehouseContainer != null &&
                    this.SendDataWarehouseContainer.Equals(input.SendDataWarehouseContainer))
                ) && 
                (
                    this.PreRunContainer == input.PreRunContainer ||
                    (this.PreRunContainer != null &&
                    this.PreRunContainer.Equals(input.PreRunContainer))
                ) && 
                (
                    this.RunContainer == input.RunContainer ||
                    (this.RunContainer != null &&
                    this.RunContainer.Equals(input.RunContainer))
                ) && 
                (
                    this.PostRunContainer == input.PostRunContainer ||
                    (this.PostRunContainer != null &&
                    this.PostRunContainer.Equals(input.PostRunContainer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeLabel != null)
                    hashCode = hashCode * 59 + this.NodeLabel.GetHashCode();
                if (this.FetchDatasetContainers != null)
                    hashCode = hashCode * 59 + this.FetchDatasetContainers.GetHashCode();
                if (this.FetchScenarioParametersContainer != null)
                    hashCode = hashCode * 59 + this.FetchScenarioParametersContainer.GetHashCode();
                if (this.ApplyParametersContainer != null)
                    hashCode = hashCode * 59 + this.ApplyParametersContainer.GetHashCode();
                if (this.ValidateDataContainer != null)
                    hashCode = hashCode * 59 + this.ValidateDataContainer.GetHashCode();
                if (this.SendDataWarehouseContainer != null)
                    hashCode = hashCode * 59 + this.SendDataWarehouseContainer.GetHashCode();
                if (this.PreRunContainer != null)
                    hashCode = hashCode * 59 + this.PreRunContainer.GetHashCode();
                if (this.RunContainer != null)
                    hashCode = hashCode * 59 + this.RunContainer.GetHashCode();
                if (this.PostRunContainer != null)
                    hashCode = hashCode * 59 + this.PostRunContainer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
