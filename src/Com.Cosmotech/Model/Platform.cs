/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// a Platform
    /// </summary>
    [DataContract(Name = "Platform")]
    public partial class Platform : IEquatable<Platform>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Platform" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Platform() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Platform" /> class.
        /// </summary>
        /// <param name="name">the Platform name (required).</param>
        /// <param name="description">the Platform description.</param>
        /// <param name="version">the Platform version MAJOR.MINOR.PATCH. (required).</param>
        /// <param name="ownerId">the Platform owner Id (required).</param>
        /// <param name="apiHost">Platform host name.</param>
        /// <param name="webAppUrl">the Web Application Portal to use the Platform.</param>
        /// <param name="services">services (required).</param>
        public Platform(string name = default(string), string description = default(string), string version = default(string), string ownerId = default(string), string apiHost = default(string), string webAppUrl = default(string), PlatformServices services = default(PlatformServices))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Platform and cannot be null");
            // to ensure "version" is required (not null)
            this.Version = version ?? throw new ArgumentNullException("version is a required property for Platform and cannot be null");
            // to ensure "ownerId" is required (not null)
            this.OwnerId = ownerId ?? throw new ArgumentNullException("ownerId is a required property for Platform and cannot be null");
            // to ensure "services" is required (not null)
            this.Services = services ?? throw new ArgumentNullException("services is a required property for Platform and cannot be null");
            this.Description = description;
            this.ApiHost = apiHost;
            this.WebAppUrl = webAppUrl;
        }

        /// <summary>
        /// the Platform name
        /// </summary>
        /// <value>the Platform name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the Platform description
        /// </summary>
        /// <value>the Platform description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// the Platform version MAJOR.MINOR.PATCH.
        /// </summary>
        /// <value>the Platform version MAJOR.MINOR.PATCH.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public string Version { get; set; }

        /// <summary>
        /// the Platform owner Id
        /// </summary>
        /// <value>the Platform owner Id</value>
        [DataMember(Name = "ownerId", IsRequired = true, EmitDefaultValue = false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Platform host name
        /// </summary>
        /// <value>Platform host name</value>
        [DataMember(Name = "apiHost", EmitDefaultValue = false)]
        public string ApiHost { get; set; }

        /// <summary>
        /// the Web Application Portal to use the Platform
        /// </summary>
        /// <value>the Web Application Portal to use the Platform</value>
        [DataMember(Name = "webAppUrl", EmitDefaultValue = false)]
        public string WebAppUrl { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name = "services", IsRequired = true, EmitDefaultValue = false)]
        public PlatformServices Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Platform {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  ApiHost: ").Append(ApiHost).Append("\n");
            sb.Append("  WebAppUrl: ").Append(WebAppUrl).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Platform);
        }

        /// <summary>
        /// Returns true if Platform instances are equal
        /// </summary>
        /// <param name="input">Instance of Platform to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Platform input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.ApiHost == input.ApiHost ||
                    (this.ApiHost != null &&
                    this.ApiHost.Equals(input.ApiHost))
                ) && 
                (
                    this.WebAppUrl == input.WebAppUrl ||
                    (this.WebAppUrl != null &&
                    this.WebAppUrl.Equals(input.WebAppUrl))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.ApiHost != null)
                    hashCode = hashCode * 59 + this.ApiHost.GetHashCode();
                if (this.WebAppUrl != null)
                    hashCode = hashCode * 59 + this.WebAppUrl.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
