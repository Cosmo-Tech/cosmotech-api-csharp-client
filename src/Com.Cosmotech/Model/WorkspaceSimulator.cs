/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Cosmotech.Client.OpenAPIDateConverter;

namespace Com.Cosmotech.Model
{
    /// <summary>
    /// the Workspace Simulator configuration
    /// </summary>
    [DataContract(Name = "WorkspaceSimulator")]
    public partial class WorkspaceSimulator : IEquatable<WorkspaceSimulator>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceSimulator" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkspaceSimulator() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceSimulator" /> class.
        /// </summary>
        /// <param name="simulatorId">the Simulator Id attached to this workspace (required).</param>
        /// <param name="simulatorAnalysisFilter">the list of Simulator Analysis Id to filter.</param>
        /// <param name="defaultAnalysisDataset">a map of AnalysisId/DatasetId to set a default dataset for an analysis.</param>
        public WorkspaceSimulator(string simulatorId = default(string), List<string> simulatorAnalysisFilter = default(List<string>), Dictionary<string, Object> defaultAnalysisDataset = default(Dictionary<string, Object>))
        {
            // to ensure "simulatorId" is required (not null)
            this.SimulatorId = simulatorId ?? throw new ArgumentNullException("simulatorId is a required property for WorkspaceSimulator and cannot be null");
            this.SimulatorAnalysisFilter = simulatorAnalysisFilter;
            this.DefaultAnalysisDataset = defaultAnalysisDataset;
        }

        /// <summary>
        /// the Simulator Id attached to this workspace
        /// </summary>
        /// <value>the Simulator Id attached to this workspace</value>
        [DataMember(Name = "simulatorId", IsRequired = true, EmitDefaultValue = false)]
        public string SimulatorId { get; set; }

        /// <summary>
        /// the list of Simulator Analysis Id to filter
        /// </summary>
        /// <value>the list of Simulator Analysis Id to filter</value>
        [DataMember(Name = "simulatorAnalysisFilter", EmitDefaultValue = false)]
        public List<string> SimulatorAnalysisFilter { get; set; }

        /// <summary>
        /// a map of AnalysisId/DatasetId to set a default dataset for an analysis
        /// </summary>
        /// <value>a map of AnalysisId/DatasetId to set a default dataset for an analysis</value>
        [DataMember(Name = "defaultAnalysisDataset", EmitDefaultValue = false)]
        public Dictionary<string, Object> DefaultAnalysisDataset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkspaceSimulator {\n");
            sb.Append("  SimulatorId: ").Append(SimulatorId).Append("\n");
            sb.Append("  SimulatorAnalysisFilter: ").Append(SimulatorAnalysisFilter).Append("\n");
            sb.Append("  DefaultAnalysisDataset: ").Append(DefaultAnalysisDataset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkspaceSimulator);
        }

        /// <summary>
        /// Returns true if WorkspaceSimulator instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkspaceSimulator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkspaceSimulator input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SimulatorId == input.SimulatorId ||
                    (this.SimulatorId != null &&
                    this.SimulatorId.Equals(input.SimulatorId))
                ) && 
                (
                    this.SimulatorAnalysisFilter == input.SimulatorAnalysisFilter ||
                    this.SimulatorAnalysisFilter != null &&
                    input.SimulatorAnalysisFilter != null &&
                    this.SimulatorAnalysisFilter.SequenceEqual(input.SimulatorAnalysisFilter)
                ) && 
                (
                    this.DefaultAnalysisDataset == input.DefaultAnalysisDataset ||
                    this.DefaultAnalysisDataset != null &&
                    input.DefaultAnalysisDataset != null &&
                    this.DefaultAnalysisDataset.SequenceEqual(input.DefaultAnalysisDataset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SimulatorId != null)
                    hashCode = hashCode * 59 + this.SimulatorId.GetHashCode();
                if (this.SimulatorAnalysisFilter != null)
                    hashCode = hashCode * 59 + this.SimulatorAnalysisFilter.GetHashCode();
                if (this.DefaultAnalysisDataset != null)
                    hashCode = hashCode * 59 + this.DefaultAnalysisDataset.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
