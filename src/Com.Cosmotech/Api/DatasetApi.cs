/*
 * Cosmo Tech Platform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 4.0.2-onprem
 * Contact: platform@cosmotech.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Cosmotech.Client;
using Com.Cosmotech.Client.Auth;
using Com.Cosmotech.Model;

namespace Com.Cosmotech.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a control access to the Dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetAccessControl">the new Dataset security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetAccessControl</returns>
        DatasetAccessControl AddDatasetAccessControl(string organizationId, string datasetId, DatasetAccessControl datasetAccessControl, int operationIndex = 0);

        /// <summary>
        /// Add a control access to the Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetAccessControl">the new Dataset security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetAccessControl</returns>
        ApiResponse<DatasetAccessControl> AddDatasetAccessControlWithHttpInfo(string organizationId, string datasetId, DatasetAccessControl datasetAccessControl, int operationIndex = 0);
        /// <summary>
        /// Add Dataset Compatibility elements.
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DatasetCompatibility&gt;</returns>
        List<DatasetCompatibility> AddOrReplaceDatasetCompatibilityElements(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, int operationIndex = 0);

        /// <summary>
        /// Add Dataset Compatibility elements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DatasetCompatibility&gt;</returns>
        ApiResponse<List<DatasetCompatibility>> AddOrReplaceDatasetCompatibilityElementsWithHttpInfo(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, int operationIndex = 0);
        /// <summary>
        /// Copy a Dataset to another Dataset.
        /// </summary>
        /// <remarks>
        /// Not implemented!
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetCopyParameters</returns>
        DatasetCopyParameters CopyDataset(string organizationId, DatasetCopyParameters datasetCopyParameters, int operationIndex = 0);

        /// <summary>
        /// Copy a Dataset to another Dataset.
        /// </summary>
        /// <remarks>
        /// Not implemented!
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetCopyParameters</returns>
        ApiResponse<DatasetCopyParameters> CopyDatasetWithHttpInfo(string organizationId, DatasetCopyParameters datasetCopyParameters, int operationIndex = 0);
        /// <summary>
        /// Create a new Dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset CreateDataset(string organizationId, Dataset dataset, int operationIndex = 0);

        /// <summary>
        /// Create a new Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> CreateDatasetWithHttpInfo(string organizationId, Dataset dataset, int operationIndex = 0);
        /// <summary>
        /// Create a sub-dataset from the dataset in parameter
        /// </summary>
        /// <remarks>
        /// Create a copy of the dataset using the results of the list of queries given in parameter.
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="subDatasetGraphQuery">the Cypher query to filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset CreateSubDataset(string organizationId, string datasetId, SubDatasetGraphQuery subDatasetGraphQuery, int operationIndex = 0);

        /// <summary>
        /// Create a sub-dataset from the dataset in parameter
        /// </summary>
        /// <remarks>
        /// Create a copy of the dataset using the results of the list of queries given in parameter.
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="subDatasetGraphQuery">the Cypher query to filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> CreateSubDatasetWithHttpInfo(string organizationId, string datasetId, SubDatasetGraphQuery subDatasetGraphQuery, int operationIndex = 0);
        /// <summary>
        /// Create new entities in a graph instance
        /// </summary>
        /// <remarks>
        /// create new entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string CreateTwingraphEntities(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0);

        /// <summary>
        /// Create new entities in a graph instance
        /// </summary>
        /// <remarks>
        /// create new entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateTwingraphEntitiesWithHttpInfo(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0);
        /// <summary>
        /// Delete a dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDataset(string organizationId, string datasetId, int operationIndex = 0);

        /// <summary>
        /// Delete a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDatasetWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0);
        /// <summary>
        /// Delete entities in a graph instance
        /// </summary>
        /// <remarks>
        /// delete entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTwingraphEntities(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0);

        /// <summary>
        /// Delete entities in a graph instance
        /// </summary>
        /// <remarks>
        /// delete entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTwingraphEntitiesWithHttpInfo(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0);
        /// <summary>
        /// Download a graph as a zip file
        /// </summary>
        /// <remarks>
        /// Download the compressed graph reference by the hash in a zip file
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="hash">the Graph download identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadTwingraph(string organizationId, string hash, int operationIndex = 0);

        /// <summary>
        /// Download a graph as a zip file
        /// </summary>
        /// <remarks>
        /// Download the compressed graph reference by the hash in a zip file
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="hash">the Graph download identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadTwingraphWithHttpInfo(string organizationId, string hash, int operationIndex = 0);
        /// <summary>
        /// List all Datasets
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        List<Dataset> FindAllDatasets(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all Datasets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        ApiResponse<List<Dataset>> FindAllDatasetsWithHttpInfo(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get the details of a Dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset FindDatasetById(string organizationId, string datasetId, int operationIndex = 0);

        /// <summary>
        /// Get the details of a Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> FindDatasetByIdWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0);
        /// <summary>
        /// Get a control access for the Dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetAccessControl</returns>
        DatasetAccessControl GetDatasetAccessControl(string organizationId, string datasetId, string identityId, int operationIndex = 0);

        /// <summary>
        /// Get a control access for the Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetAccessControl</returns>
        ApiResponse<DatasetAccessControl> GetDatasetAccessControlWithHttpInfo(string organizationId, string datasetId, string identityId, int operationIndex = 0);
        /// <summary>
        /// Get the Dataset security information
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetSecurity</returns>
        DatasetSecurity GetDatasetSecurity(string organizationId, string datasetId, int operationIndex = 0);

        /// <summary>
        /// Get the Dataset security information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetSecurity</returns>
        ApiResponse<DatasetSecurity> GetDatasetSecurityWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0);
        /// <summary>
        /// Get the Dataset security users list
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetDatasetSecurityUsers(string organizationId, string datasetId, int operationIndex = 0);

        /// <summary>
        /// Get the Dataset security users list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetDatasetSecurityUsersWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0);
        /// <summary>
        /// Get the dataset&#39;s refresh job status
        /// </summary>
        /// <remarks>
        /// Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetDatasetTwingraphStatus(string organizationId, string datasetId, int operationIndex = 0);

        /// <summary>
        /// Get the dataset&#39;s refresh job status
        /// </summary>
        /// <remarks>
        /// Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetDatasetTwingraphStatusWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0);
        /// <summary>
        /// Get entities in a graph instance
        /// </summary>
        /// <remarks>
        /// get entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetTwingraphEntities(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0);

        /// <summary>
        /// Get entities in a graph instance
        /// </summary>
        /// <remarks>
        /// get entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetTwingraphEntitiesWithHttpInfo(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset LinkWorkspace(string organizationId, string datasetId, string workspaceId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> LinkWorkspaceWithHttpInfo(string organizationId, string datasetId, string workspaceId, int operationIndex = 0);
        /// <summary>
        /// Refresh data on dataset from dataset&#39;s source
        /// </summary>
        /// <remarks>
        /// Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetTwinGraphInfo</returns>
        DatasetTwinGraphInfo RefreshDataset(string organizationId, string datasetId, int operationIndex = 0);

        /// <summary>
        /// Refresh data on dataset from dataset&#39;s source
        /// </summary>
        /// <remarks>
        /// Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetTwinGraphInfo</returns>
        ApiResponse<DatasetTwinGraphInfo> RefreshDatasetWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0);
        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveAllDatasetCompatibilityElements(string organizationId, string datasetId, int operationIndex = 0);

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAllDatasetCompatibilityElementsWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0);
        /// <summary>
        /// Remove the specified access from the given Dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveDatasetAccessControl(string organizationId, string datasetId, string identityId, int operationIndex = 0);

        /// <summary>
        /// Remove the specified access from the given Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveDatasetAccessControlWithHttpInfo(string organizationId, string datasetId, string identityId, int operationIndex = 0);
        /// <summary>
        /// Rollback the dataset after a failed refresh
        /// </summary>
        /// <remarks>
        /// Rollback the twingraph on a dataset after a failed refresh
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string RollbackRefresh(string organizationId, string datasetId, int operationIndex = 0);

        /// <summary>
        /// Rollback the dataset after a failed refresh
        /// </summary>
        /// <remarks>
        /// Rollback the twingraph on a dataset after a failed refresh
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RollbackRefreshWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0);
        /// <summary>
        /// Search Datasets by tags
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        List<Dataset> SearchDatasets(string organizationId, DatasetSearch datasetSearch, int? page = default(int?), int? size = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Datasets by tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        ApiResponse<List<Dataset>> SearchDatasetsWithHttpInfo(string organizationId, DatasetSearch datasetSearch, int? page = default(int?), int? size = default(int?), int operationIndex = 0);
        /// <summary>
        /// Set the Dataset default security
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetRole">This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetSecurity</returns>
        DatasetSecurity SetDatasetDefaultSecurity(string organizationId, string datasetId, DatasetRole datasetRole, int operationIndex = 0);

        /// <summary>
        /// Set the Dataset default security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetRole">This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetSecurity</returns>
        ApiResponse<DatasetSecurity> SetDatasetDefaultSecurityWithHttpInfo(string organizationId, string datasetId, DatasetRole datasetRole, int operationIndex = 0);
        /// <summary>
        /// Run a query on a graph instance and return the result as a zip file in async mode
        /// </summary>
        /// <remarks>
        /// Run a query on a graph instance and return the result as a zip file in async mode
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Graph Identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetTwinGraphHash</returns>
        DatasetTwinGraphHash TwingraphBatchQuery(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0);

        /// <summary>
        /// Run a query on a graph instance and return the result as a zip file in async mode
        /// </summary>
        /// <remarks>
        /// Run a query on a graph instance and return the result as a zip file in async mode
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Graph Identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetTwinGraphHash</returns>
        ApiResponse<DatasetTwinGraphHash> TwingraphBatchQueryWithHttpInfo(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0);
        /// <summary>
        /// Async batch update by loading a CSV file on a graph instance 
        /// </summary>
        /// <remarks>
        /// Async batch update by loading a CSV file on a graph instance 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="twinGraphQuery"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TwinGraphBatchResult</returns>
        TwinGraphBatchResult TwingraphBatchUpdate(string organizationId, string datasetId, DatasetTwinGraphQuery twinGraphQuery, System.IO.Stream body, int operationIndex = 0);

        /// <summary>
        /// Async batch update by loading a CSV file on a graph instance 
        /// </summary>
        /// <remarks>
        /// Async batch update by loading a CSV file on a graph instance 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="twinGraphQuery"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TwinGraphBatchResult</returns>
        ApiResponse<TwinGraphBatchResult> TwingraphBatchUpdateWithHttpInfo(string organizationId, string datasetId, DatasetTwinGraphQuery twinGraphQuery, System.IO.Stream body, int operationIndex = 0);
        /// <summary>
        /// Return the result of a query made on the graph instance as a json
        /// </summary>
        /// <remarks>
        /// Run a query on a graph instance and return the result as a json
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> TwingraphQuery(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0);

        /// <summary>
        /// Return the result of a query made on the graph instance as a json
        /// </summary>
        /// <remarks>
        /// Run a query on a graph instance and return the result as a json
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> TwingraphQueryWithHttpInfo(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset UnlinkWorkspace(string organizationId, string datasetId, string workspaceId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> UnlinkWorkspaceWithHttpInfo(string organizationId, string datasetId, string workspaceId, int operationIndex = 0);
        /// <summary>
        /// Update a dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset UpdateDataset(string organizationId, string datasetId, Dataset dataset, int operationIndex = 0);

        /// <summary>
        /// Update a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> UpdateDatasetWithHttpInfo(string organizationId, string datasetId, Dataset dataset, int operationIndex = 0);
        /// <summary>
        /// Update the specified access to User for a Dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="datasetRole">The new Dataset Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetAccessControl</returns>
        DatasetAccessControl UpdateDatasetAccessControl(string organizationId, string datasetId, string identityId, DatasetRole datasetRole, int operationIndex = 0);

        /// <summary>
        /// Update the specified access to User for a Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="datasetRole">The new Dataset Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetAccessControl</returns>
        ApiResponse<DatasetAccessControl> UpdateDatasetAccessControlWithHttpInfo(string organizationId, string datasetId, string identityId, DatasetRole datasetRole, int operationIndex = 0);
        /// <summary>
        /// Update entities in a graph instance
        /// </summary>
        /// <remarks>
        /// update entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string UpdateTwingraphEntities(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0);

        /// <summary>
        /// Update entities in a graph instance
        /// </summary>
        /// <remarks>
        /// update entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UpdateTwingraphEntitiesWithHttpInfo(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0);
        /// <summary>
        /// Upload data from zip file to dataset&#39;s twingraph
        /// </summary>
        /// <remarks>
        /// To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileUploadValidation</returns>
        FileUploadValidation UploadTwingraph(string organizationId, string datasetId, System.IO.Stream body, int operationIndex = 0);

        /// <summary>
        /// Upload data from zip file to dataset&#39;s twingraph
        /// </summary>
        /// <remarks>
        /// To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileUploadValidation</returns>
        ApiResponse<FileUploadValidation> UploadTwingraphWithHttpInfo(string organizationId, string datasetId, System.IO.Stream body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a control access to the Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetAccessControl">the new Dataset security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetAccessControl</returns>
        System.Threading.Tasks.Task<DatasetAccessControl> AddDatasetAccessControlAsync(string organizationId, string datasetId, DatasetAccessControl datasetAccessControl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a control access to the Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetAccessControl">the new Dataset security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetAccessControl)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasetAccessControl>> AddDatasetAccessControlWithHttpInfoAsync(string organizationId, string datasetId, DatasetAccessControl datasetAccessControl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Dataset Compatibility elements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatasetCompatibility&gt;</returns>
        System.Threading.Tasks.Task<List<DatasetCompatibility>> AddOrReplaceDatasetCompatibilityElementsAsync(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Dataset Compatibility elements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatasetCompatibility&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatasetCompatibility>>> AddOrReplaceDatasetCompatibilityElementsWithHttpInfoAsync(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy a Dataset to another Dataset.
        /// </summary>
        /// <remarks>
        /// Not implemented!
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetCopyParameters</returns>
        System.Threading.Tasks.Task<DatasetCopyParameters> CopyDatasetAsync(string organizationId, DatasetCopyParameters datasetCopyParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy a Dataset to another Dataset.
        /// </summary>
        /// <remarks>
        /// Not implemented!
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetCopyParameters)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasetCopyParameters>> CopyDatasetWithHttpInfoAsync(string organizationId, DatasetCopyParameters datasetCopyParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> CreateDatasetAsync(string organizationId, Dataset dataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> CreateDatasetWithHttpInfoAsync(string organizationId, Dataset dataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a sub-dataset from the dataset in parameter
        /// </summary>
        /// <remarks>
        /// Create a copy of the dataset using the results of the list of queries given in parameter.
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="subDatasetGraphQuery">the Cypher query to filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> CreateSubDatasetAsync(string organizationId, string datasetId, SubDatasetGraphQuery subDatasetGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a sub-dataset from the dataset in parameter
        /// </summary>
        /// <remarks>
        /// Create a copy of the dataset using the results of the list of queries given in parameter.
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="subDatasetGraphQuery">the Cypher query to filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> CreateSubDatasetWithHttpInfoAsync(string organizationId, string datasetId, SubDatasetGraphQuery subDatasetGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new entities in a graph instance
        /// </summary>
        /// <remarks>
        /// create new entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateTwingraphEntitiesAsync(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new entities in a graph instance
        /// </summary>
        /// <remarks>
        /// create new entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateTwingraphEntitiesWithHttpInfoAsync(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDatasetAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDatasetWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete entities in a graph instance
        /// </summary>
        /// <remarks>
        /// delete entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTwingraphEntitiesAsync(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete entities in a graph instance
        /// </summary>
        /// <remarks>
        /// delete entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTwingraphEntitiesWithHttpInfoAsync(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download a graph as a zip file
        /// </summary>
        /// <remarks>
        /// Download the compressed graph reference by the hash in a zip file
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="hash">the Graph download identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadTwingraphAsync(string organizationId, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download a graph as a zip file
        /// </summary>
        /// <remarks>
        /// Download the compressed graph reference by the hash in a zip file
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="hash">the Graph download identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadTwingraphWithHttpInfoAsync(string organizationId, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Datasets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        System.Threading.Tasks.Task<List<Dataset>> FindAllDatasetsAsync(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all Datasets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> FindAllDatasetsWithHttpInfoAsync(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the details of a Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> FindDatasetByIdAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details of a Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> FindDatasetByIdWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a control access for the Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetAccessControl</returns>
        System.Threading.Tasks.Task<DatasetAccessControl> GetDatasetAccessControlAsync(string organizationId, string datasetId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a control access for the Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetAccessControl)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasetAccessControl>> GetDatasetAccessControlWithHttpInfoAsync(string organizationId, string datasetId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Dataset security information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetSecurity</returns>
        System.Threading.Tasks.Task<DatasetSecurity> GetDatasetSecurityAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Dataset security information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetSecurity)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasetSecurity>> GetDatasetSecurityWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Dataset security users list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetDatasetSecurityUsersAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Dataset security users list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDatasetSecurityUsersWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the dataset&#39;s refresh job status
        /// </summary>
        /// <remarks>
        /// Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetDatasetTwingraphStatusAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the dataset&#39;s refresh job status
        /// </summary>
        /// <remarks>
        /// Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetDatasetTwingraphStatusWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get entities in a graph instance
        /// </summary>
        /// <remarks>
        /// get entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetTwingraphEntitiesAsync(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get entities in a graph instance
        /// </summary>
        /// <remarks>
        /// get entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetTwingraphEntitiesWithHttpInfoAsync(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> LinkWorkspaceAsync(string organizationId, string datasetId, string workspaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> LinkWorkspaceWithHttpInfoAsync(string organizationId, string datasetId, string workspaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh data on dataset from dataset&#39;s source
        /// </summary>
        /// <remarks>
        /// Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetTwinGraphInfo</returns>
        System.Threading.Tasks.Task<DatasetTwinGraphInfo> RefreshDatasetAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh data on dataset from dataset&#39;s source
        /// </summary>
        /// <remarks>
        /// Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetTwinGraphInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasetTwinGraphInfo>> RefreshDatasetWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAllDatasetCompatibilityElementsAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAllDatasetCompatibilityElementsWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove the specified access from the given Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveDatasetAccessControlAsync(string organizationId, string datasetId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove the specified access from the given Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDatasetAccessControlWithHttpInfoAsync(string organizationId, string datasetId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rollback the dataset after a failed refresh
        /// </summary>
        /// <remarks>
        /// Rollback the twingraph on a dataset after a failed refresh
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RollbackRefreshAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rollback the dataset after a failed refresh
        /// </summary>
        /// <remarks>
        /// Rollback the twingraph on a dataset after a failed refresh
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RollbackRefreshWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Datasets by tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        System.Threading.Tasks.Task<List<Dataset>> SearchDatasetsAsync(string organizationId, DatasetSearch datasetSearch, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Datasets by tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> SearchDatasetsWithHttpInfoAsync(string organizationId, DatasetSearch datasetSearch, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the Dataset default security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetRole">This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetSecurity</returns>
        System.Threading.Tasks.Task<DatasetSecurity> SetDatasetDefaultSecurityAsync(string organizationId, string datasetId, DatasetRole datasetRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the Dataset default security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetRole">This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetSecurity)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasetSecurity>> SetDatasetDefaultSecurityWithHttpInfoAsync(string organizationId, string datasetId, DatasetRole datasetRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Run a query on a graph instance and return the result as a zip file in async mode
        /// </summary>
        /// <remarks>
        /// Run a query on a graph instance and return the result as a zip file in async mode
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Graph Identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetTwinGraphHash</returns>
        System.Threading.Tasks.Task<DatasetTwinGraphHash> TwingraphBatchQueryAsync(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run a query on a graph instance and return the result as a zip file in async mode
        /// </summary>
        /// <remarks>
        /// Run a query on a graph instance and return the result as a zip file in async mode
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Graph Identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetTwinGraphHash)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasetTwinGraphHash>> TwingraphBatchQueryWithHttpInfoAsync(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Async batch update by loading a CSV file on a graph instance 
        /// </summary>
        /// <remarks>
        /// Async batch update by loading a CSV file on a graph instance 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="twinGraphQuery"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TwinGraphBatchResult</returns>
        System.Threading.Tasks.Task<TwinGraphBatchResult> TwingraphBatchUpdateAsync(string organizationId, string datasetId, DatasetTwinGraphQuery twinGraphQuery, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Async batch update by loading a CSV file on a graph instance 
        /// </summary>
        /// <remarks>
        /// Async batch update by loading a CSV file on a graph instance 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="twinGraphQuery"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TwinGraphBatchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TwinGraphBatchResult>> TwingraphBatchUpdateWithHttpInfoAsync(string organizationId, string datasetId, DatasetTwinGraphQuery twinGraphQuery, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the result of a query made on the graph instance as a json
        /// </summary>
        /// <remarks>
        /// Run a query on a graph instance and return the result as a json
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> TwingraphQueryAsync(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the result of a query made on the graph instance as a json
        /// </summary>
        /// <remarks>
        /// Run a query on a graph instance and return the result as a json
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> TwingraphQueryWithHttpInfoAsync(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> UnlinkWorkspaceAsync(string organizationId, string datasetId, string workspaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> UnlinkWorkspaceWithHttpInfoAsync(string organizationId, string datasetId, string workspaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> UpdateDatasetAsync(string organizationId, string datasetId, Dataset dataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> UpdateDatasetWithHttpInfoAsync(string organizationId, string datasetId, Dataset dataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the specified access to User for a Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="datasetRole">The new Dataset Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetAccessControl</returns>
        System.Threading.Tasks.Task<DatasetAccessControl> UpdateDatasetAccessControlAsync(string organizationId, string datasetId, string identityId, DatasetRole datasetRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the specified access to User for a Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="datasetRole">The new Dataset Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetAccessControl)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasetAccessControl>> UpdateDatasetAccessControlWithHttpInfoAsync(string organizationId, string datasetId, string identityId, DatasetRole datasetRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update entities in a graph instance
        /// </summary>
        /// <remarks>
        /// update entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UpdateTwingraphEntitiesAsync(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update entities in a graph instance
        /// </summary>
        /// <remarks>
        /// update entities in a graph instance
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UpdateTwingraphEntitiesWithHttpInfoAsync(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload data from zip file to dataset&#39;s twingraph
        /// </summary>
        /// <remarks>
        /// To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUploadValidation</returns>
        System.Threading.Tasks.Task<FileUploadValidation> UploadTwingraphAsync(string organizationId, string datasetId, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload data from zip file to dataset&#39;s twingraph
        /// </summary>
        /// <remarks>
        /// To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUploadValidation)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileUploadValidation>> UploadTwingraphWithHttpInfoAsync(string organizationId, string datasetId, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetApi : IDatasetApiSync, IDatasetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatasetApi : IDatasetApi
    {
        private Com.Cosmotech.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetApi(string basePath)
        {
            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                new Com.Cosmotech.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatasetApi(Com.Cosmotech.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DatasetApi(Com.Cosmotech.Client.ISynchronousClient client, Com.Cosmotech.Client.IAsynchronousClient asyncClient, Com.Cosmotech.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Cosmotech.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Cosmotech.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Cosmotech.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Cosmotech.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a control access to the Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetAccessControl">the new Dataset security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetAccessControl</returns>
        public DatasetAccessControl AddDatasetAccessControl(string organizationId, string datasetId, DatasetAccessControl datasetAccessControl, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<DatasetAccessControl> localVarResponse = AddDatasetAccessControlWithHttpInfo(organizationId, datasetId, datasetAccessControl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a control access to the Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetAccessControl">the new Dataset security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetAccessControl</returns>
        public Com.Cosmotech.Client.ApiResponse<DatasetAccessControl> AddDatasetAccessControlWithHttpInfo(string organizationId, string datasetId, DatasetAccessControl datasetAccessControl, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->AddDatasetAccessControl");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->AddDatasetAccessControl");
            }

            // verify the required parameter 'datasetAccessControl' is set
            if (datasetAccessControl == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetAccessControl' when calling DatasetApi->AddDatasetAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetAccessControl;

            localVarRequestOptions.Operation = "DatasetApi.AddDatasetAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DatasetAccessControl>("/organizations/{organization_id}/datasets/{dataset_id}/security/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddDatasetAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a control access to the Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetAccessControl">the new Dataset security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetAccessControl</returns>
        public async System.Threading.Tasks.Task<DatasetAccessControl> AddDatasetAccessControlAsync(string organizationId, string datasetId, DatasetAccessControl datasetAccessControl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<DatasetAccessControl> localVarResponse = await AddDatasetAccessControlWithHttpInfoAsync(organizationId, datasetId, datasetAccessControl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a control access to the Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetAccessControl">the new Dataset security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetAccessControl)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<DatasetAccessControl>> AddDatasetAccessControlWithHttpInfoAsync(string organizationId, string datasetId, DatasetAccessControl datasetAccessControl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->AddDatasetAccessControl");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->AddDatasetAccessControl");
            }

            // verify the required parameter 'datasetAccessControl' is set
            if (datasetAccessControl == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetAccessControl' when calling DatasetApi->AddDatasetAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetAccessControl;

            localVarRequestOptions.Operation = "DatasetApi.AddDatasetAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DatasetAccessControl>("/organizations/{organization_id}/datasets/{dataset_id}/security/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddDatasetAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Dataset Compatibility elements. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DatasetCompatibility&gt;</returns>
        public List<DatasetCompatibility> AddOrReplaceDatasetCompatibilityElements(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<DatasetCompatibility>> localVarResponse = AddOrReplaceDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId, datasetCompatibility);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Dataset Compatibility elements. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DatasetCompatibility&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<DatasetCompatibility>> AddOrReplaceDatasetCompatibilityElementsWithHttpInfo(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetCompatibility' is set
            if (datasetCompatibility == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetCompatibility' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetCompatibility;

            localVarRequestOptions.Operation = "DatasetApi.AddOrReplaceDatasetCompatibilityElements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DatasetCompatibility>>("/organizations/{organization_id}/datasets/{dataset_id}/compatibility", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceDatasetCompatibilityElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Dataset Compatibility elements. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatasetCompatibility&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatasetCompatibility>> AddOrReplaceDatasetCompatibilityElementsAsync(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<DatasetCompatibility>> localVarResponse = await AddOrReplaceDatasetCompatibilityElementsWithHttpInfoAsync(organizationId, datasetId, datasetCompatibility, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Dataset Compatibility elements. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatasetCompatibility&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<DatasetCompatibility>>> AddOrReplaceDatasetCompatibilityElementsWithHttpInfoAsync(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetCompatibility' is set
            if (datasetCompatibility == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetCompatibility' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetCompatibility;

            localVarRequestOptions.Operation = "DatasetApi.AddOrReplaceDatasetCompatibilityElements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DatasetCompatibility>>("/organizations/{organization_id}/datasets/{dataset_id}/compatibility", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceDatasetCompatibilityElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a Dataset to another Dataset. Not implemented!
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetCopyParameters</returns>
        public DatasetCopyParameters CopyDataset(string organizationId, DatasetCopyParameters datasetCopyParameters, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<DatasetCopyParameters> localVarResponse = CopyDatasetWithHttpInfo(organizationId, datasetCopyParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a Dataset to another Dataset. Not implemented!
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetCopyParameters</returns>
        public Com.Cosmotech.Client.ApiResponse<DatasetCopyParameters> CopyDatasetWithHttpInfo(string organizationId, DatasetCopyParameters datasetCopyParameters, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CopyDataset");
            }

            // verify the required parameter 'datasetCopyParameters' is set
            if (datasetCopyParameters == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetCopyParameters' when calling DatasetApi->CopyDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = datasetCopyParameters;

            localVarRequestOptions.Operation = "DatasetApi.CopyDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DatasetCopyParameters>("/organizations/{organization_id}/datasets/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a Dataset to another Dataset. Not implemented!
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetCopyParameters</returns>
        public async System.Threading.Tasks.Task<DatasetCopyParameters> CopyDatasetAsync(string organizationId, DatasetCopyParameters datasetCopyParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<DatasetCopyParameters> localVarResponse = await CopyDatasetWithHttpInfoAsync(organizationId, datasetCopyParameters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a Dataset to another Dataset. Not implemented!
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetCopyParameters)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<DatasetCopyParameters>> CopyDatasetWithHttpInfoAsync(string organizationId, DatasetCopyParameters datasetCopyParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CopyDataset");
            }

            // verify the required parameter 'datasetCopyParameters' is set
            if (datasetCopyParameters == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetCopyParameters' when calling DatasetApi->CopyDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = datasetCopyParameters;

            localVarRequestOptions.Operation = "DatasetApi.CopyDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DatasetCopyParameters>("/organizations/{organization_id}/datasets/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset CreateDataset(string organizationId, Dataset dataset, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = CreateDatasetWithHttpInfo(organizationId, dataset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public Com.Cosmotech.Client.ApiResponse<Dataset> CreateDatasetWithHttpInfo(string organizationId, Dataset dataset, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CreateDataset");
            }

            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'dataset' when calling DatasetApi->CreateDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = dataset;

            localVarRequestOptions.Operation = "DatasetApi.CreateDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dataset>("/organizations/{organization_id}/datasets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> CreateDatasetAsync(string organizationId, Dataset dataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = await CreateDatasetWithHttpInfoAsync(organizationId, dataset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Dataset>> CreateDatasetWithHttpInfoAsync(string organizationId, Dataset dataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CreateDataset");
            }

            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'dataset' when calling DatasetApi->CreateDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = dataset;

            localVarRequestOptions.Operation = "DatasetApi.CreateDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dataset>("/organizations/{organization_id}/datasets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a sub-dataset from the dataset in parameter Create a copy of the dataset using the results of the list of queries given in parameter.
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="subDatasetGraphQuery">the Cypher query to filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset CreateSubDataset(string organizationId, string datasetId, SubDatasetGraphQuery subDatasetGraphQuery, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = CreateSubDatasetWithHttpInfo(organizationId, datasetId, subDatasetGraphQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a sub-dataset from the dataset in parameter Create a copy of the dataset using the results of the list of queries given in parameter.
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="subDatasetGraphQuery">the Cypher query to filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public Com.Cosmotech.Client.ApiResponse<Dataset> CreateSubDatasetWithHttpInfo(string organizationId, string datasetId, SubDatasetGraphQuery subDatasetGraphQuery, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CreateSubDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->CreateSubDataset");
            }

            // verify the required parameter 'subDatasetGraphQuery' is set
            if (subDatasetGraphQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'subDatasetGraphQuery' when calling DatasetApi->CreateSubDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = subDatasetGraphQuery;

            localVarRequestOptions.Operation = "DatasetApi.CreateSubDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}/subdataset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a sub-dataset from the dataset in parameter Create a copy of the dataset using the results of the list of queries given in parameter.
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="subDatasetGraphQuery">the Cypher query to filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> CreateSubDatasetAsync(string organizationId, string datasetId, SubDatasetGraphQuery subDatasetGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = await CreateSubDatasetWithHttpInfoAsync(organizationId, datasetId, subDatasetGraphQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a sub-dataset from the dataset in parameter Create a copy of the dataset using the results of the list of queries given in parameter.
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="subDatasetGraphQuery">the Cypher query to filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Dataset>> CreateSubDatasetWithHttpInfoAsync(string organizationId, string datasetId, SubDatasetGraphQuery subDatasetGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CreateSubDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->CreateSubDataset");
            }

            // verify the required parameter 'subDatasetGraphQuery' is set
            if (subDatasetGraphQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'subDatasetGraphQuery' when calling DatasetApi->CreateSubDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = subDatasetGraphQuery;

            localVarRequestOptions.Operation = "DatasetApi.CreateSubDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}/subdataset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new entities in a graph instance create new entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string CreateTwingraphEntities(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = CreateTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, graphProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new entities in a graph instance create new entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Com.Cosmotech.Client.ApiResponse<string> CreateTwingraphEntitiesWithHttpInfo(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CreateTwingraphEntities");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->CreateTwingraphEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'type' when calling DatasetApi->CreateTwingraphEntities");
            }

            // verify the required parameter 'graphProperties' is set
            if (graphProperties == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'graphProperties' when calling DatasetApi->CreateTwingraphEntities");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Com.Cosmotech.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.Data = graphProperties;

            localVarRequestOptions.Operation = "DatasetApi.CreateTwingraphEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTwingraphEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new entities in a graph instance create new entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateTwingraphEntitiesAsync(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = await CreateTwingraphEntitiesWithHttpInfoAsync(organizationId, datasetId, type, graphProperties, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new entities in a graph instance create new entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<string>> CreateTwingraphEntitiesWithHttpInfoAsync(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CreateTwingraphEntities");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->CreateTwingraphEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'type' when calling DatasetApi->CreateTwingraphEntities");
            }

            // verify the required parameter 'graphProperties' is set
            if (graphProperties == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'graphProperties' when calling DatasetApi->CreateTwingraphEntities");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Com.Cosmotech.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.Data = graphProperties;

            localVarRequestOptions.Operation = "DatasetApi.CreateTwingraphEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTwingraphEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDataset(string organizationId, string datasetId, int operationIndex = 0)
        {
            DeleteDatasetWithHttpInfo(organizationId, datasetId);
        }

        /// <summary>
        /// Delete a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> DeleteDatasetWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->DeleteDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->DeleteDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.DeleteDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDatasetAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDatasetWithHttpInfoAsync(organizationId, datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> DeleteDatasetWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->DeleteDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->DeleteDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.DeleteDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete entities in a graph instance delete entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTwingraphEntities(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0)
        {
            DeleteTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, ids);
        }

        /// <summary>
        /// Delete entities in a graph instance delete entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> DeleteTwingraphEntitiesWithHttpInfo(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->DeleteTwingraphEntities");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->DeleteTwingraphEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'type' when calling DatasetApi->DeleteTwingraphEntities");
            }

            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'ids' when calling DatasetApi->DeleteTwingraphEntities");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Com.Cosmotech.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));

            localVarRequestOptions.Operation = "DatasetApi.DeleteTwingraphEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTwingraphEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete entities in a graph instance delete entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTwingraphEntitiesAsync(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTwingraphEntitiesWithHttpInfoAsync(organizationId, datasetId, type, ids, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete entities in a graph instance delete entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> DeleteTwingraphEntitiesWithHttpInfoAsync(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->DeleteTwingraphEntities");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->DeleteTwingraphEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'type' when calling DatasetApi->DeleteTwingraphEntities");
            }

            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'ids' when calling DatasetApi->DeleteTwingraphEntities");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Com.Cosmotech.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));

            localVarRequestOptions.Operation = "DatasetApi.DeleteTwingraphEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTwingraphEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a graph as a zip file Download the compressed graph reference by the hash in a zip file
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="hash">the Graph download identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadTwingraph(string organizationId, string hash, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadTwingraphWithHttpInfo(organizationId, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a graph as a zip file Download the compressed graph reference by the hash in a zip file
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="hash">the Graph download identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Com.Cosmotech.Client.ApiResponse<System.IO.Stream> DownloadTwingraphWithHttpInfo(string organizationId, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->DownloadTwingraph");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'hash' when calling DatasetApi->DownloadTwingraph");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("hash", Com.Cosmotech.Client.ClientUtils.ParameterToString(hash)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.DownloadTwingraph";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/organizations/{organization_id}/datasets/twingraph/download/{hash}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTwingraph", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a graph as a zip file Download the compressed graph reference by the hash in a zip file
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="hash">the Graph download identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadTwingraphAsync(string organizationId, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadTwingraphWithHttpInfoAsync(organizationId, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a graph as a zip file Download the compressed graph reference by the hash in a zip file
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="hash">the Graph download identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<System.IO.Stream>> DownloadTwingraphWithHttpInfoAsync(string organizationId, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->DownloadTwingraph");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'hash' when calling DatasetApi->DownloadTwingraph");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("hash", Com.Cosmotech.Client.ClientUtils.ParameterToString(hash)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.DownloadTwingraph";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/organizations/{organization_id}/datasets/twingraph/download/{hash}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTwingraph", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        public List<Dataset> FindAllDatasets(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<Dataset>> localVarResponse = FindAllDatasetsWithHttpInfo(organizationId, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<Dataset>> FindAllDatasetsWithHttpInfo(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->FindAllDatasets");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "DatasetApi.FindAllDatasets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dataset>>("/organizations/{organization_id}/datasets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllDatasets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dataset>> FindAllDatasetsAsync(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<Dataset>> localVarResponse = await FindAllDatasetsWithHttpInfoAsync(organizationId, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<Dataset>>> FindAllDatasetsWithHttpInfoAsync(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->FindAllDatasets");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "DatasetApi.FindAllDatasets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dataset>>("/organizations/{organization_id}/datasets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllDatasets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset FindDatasetById(string organizationId, string datasetId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = FindDatasetByIdWithHttpInfo(organizationId, datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public Com.Cosmotech.Client.ApiResponse<Dataset> FindDatasetByIdWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->FindDatasetById");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->FindDatasetById");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.FindDatasetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindDatasetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> FindDatasetByIdAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = await FindDatasetByIdWithHttpInfoAsync(organizationId, datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Dataset>> FindDatasetByIdWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->FindDatasetById");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->FindDatasetById");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.FindDatasetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindDatasetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a control access for the Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetAccessControl</returns>
        public DatasetAccessControl GetDatasetAccessControl(string organizationId, string datasetId, string identityId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<DatasetAccessControl> localVarResponse = GetDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a control access for the Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetAccessControl</returns>
        public Com.Cosmotech.Client.ApiResponse<DatasetAccessControl> GetDatasetAccessControlWithHttpInfo(string organizationId, string datasetId, string identityId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetDatasetAccessControl");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetDatasetAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling DatasetApi->GetDatasetAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DatasetAccessControl>("/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a control access for the Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetAccessControl</returns>
        public async System.Threading.Tasks.Task<DatasetAccessControl> GetDatasetAccessControlAsync(string organizationId, string datasetId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<DatasetAccessControl> localVarResponse = await GetDatasetAccessControlWithHttpInfoAsync(organizationId, datasetId, identityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a control access for the Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetAccessControl)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<DatasetAccessControl>> GetDatasetAccessControlWithHttpInfoAsync(string organizationId, string datasetId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetDatasetAccessControl");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetDatasetAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling DatasetApi->GetDatasetAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DatasetAccessControl>("/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Dataset security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetSecurity</returns>
        public DatasetSecurity GetDatasetSecurity(string organizationId, string datasetId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<DatasetSecurity> localVarResponse = GetDatasetSecurityWithHttpInfo(organizationId, datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Dataset security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetSecurity</returns>
        public Com.Cosmotech.Client.ApiResponse<DatasetSecurity> GetDatasetSecurityWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetDatasetSecurity");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetDatasetSecurity");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DatasetSecurity>("/organizations/{organization_id}/datasets/{dataset_id}/security", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Dataset security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetSecurity</returns>
        public async System.Threading.Tasks.Task<DatasetSecurity> GetDatasetSecurityAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<DatasetSecurity> localVarResponse = await GetDatasetSecurityWithHttpInfoAsync(organizationId, datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Dataset security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetSecurity)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<DatasetSecurity>> GetDatasetSecurityWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetDatasetSecurity");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetDatasetSecurity");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DatasetSecurity>("/organizations/{organization_id}/datasets/{dataset_id}/security", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Dataset security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetDatasetSecurityUsers(string organizationId, string datasetId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<string>> localVarResponse = GetDatasetSecurityUsersWithHttpInfo(organizationId, datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Dataset security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<string>> GetDatasetSecurityUsersWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetDatasetSecurityUsers");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetDatasetSecurityUsers");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetSecurityUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/organizations/{organization_id}/datasets/{dataset_id}/security/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetSecurityUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Dataset security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetDatasetSecurityUsersAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<string>> localVarResponse = await GetDatasetSecurityUsersWithHttpInfoAsync(organizationId, datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Dataset security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<string>>> GetDatasetSecurityUsersWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetDatasetSecurityUsers");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetDatasetSecurityUsers");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetSecurityUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/organizations/{organization_id}/datasets/{dataset_id}/security/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetSecurityUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the dataset&#39;s refresh job status Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetDatasetTwingraphStatus(string organizationId, string datasetId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = GetDatasetTwingraphStatusWithHttpInfo(organizationId, datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the dataset&#39;s refresh job status Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Com.Cosmotech.Client.ApiResponse<string> GetDatasetTwingraphStatusWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetDatasetTwingraphStatus");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetDatasetTwingraphStatus");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/yaml",
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetTwingraphStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/organizations/{organization_id}/datasets/{dataset_id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetTwingraphStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the dataset&#39;s refresh job status Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetDatasetTwingraphStatusAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = await GetDatasetTwingraphStatusWithHttpInfoAsync(organizationId, datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the dataset&#39;s refresh job status Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<string>> GetDatasetTwingraphStatusWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetDatasetTwingraphStatus");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetDatasetTwingraphStatus");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/yaml",
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetTwingraphStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/organizations/{organization_id}/datasets/{dataset_id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetTwingraphStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get entities in a graph instance get entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetTwingraphEntities(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = GetTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, ids);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get entities in a graph instance get entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Com.Cosmotech.Client.ApiResponse<string> GetTwingraphEntitiesWithHttpInfo(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetTwingraphEntities");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetTwingraphEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'type' when calling DatasetApi->GetTwingraphEntities");
            }

            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'ids' when calling DatasetApi->GetTwingraphEntities");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Com.Cosmotech.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));

            localVarRequestOptions.Operation = "DatasetApi.GetTwingraphEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTwingraphEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get entities in a graph instance get entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetTwingraphEntitiesAsync(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = await GetTwingraphEntitiesWithHttpInfoAsync(organizationId, datasetId, type, ids, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get entities in a graph instance get entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="ids">the entities to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<string>> GetTwingraphEntitiesWithHttpInfoAsync(string organizationId, string datasetId, string type, List<string> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->GetTwingraphEntities");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->GetTwingraphEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'type' when calling DatasetApi->GetTwingraphEntities");
            }

            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'ids' when calling DatasetApi->GetTwingraphEntities");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Com.Cosmotech.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));

            localVarRequestOptions.Operation = "DatasetApi.GetTwingraphEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTwingraphEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset LinkWorkspace(string organizationId, string datasetId, string workspaceId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = LinkWorkspaceWithHttpInfo(organizationId, datasetId, workspaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public Com.Cosmotech.Client.ApiResponse<Dataset> LinkWorkspaceWithHttpInfo(string organizationId, string datasetId, string workspaceId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->LinkWorkspace");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->LinkWorkspace");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling DatasetApi->LinkWorkspace");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "workspaceId", workspaceId));

            localVarRequestOptions.Operation = "DatasetApi.LinkWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}/link", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> LinkWorkspaceAsync(string organizationId, string datasetId, string workspaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = await LinkWorkspaceWithHttpInfoAsync(organizationId, datasetId, workspaceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Dataset>> LinkWorkspaceWithHttpInfoAsync(string organizationId, string datasetId, string workspaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->LinkWorkspace");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->LinkWorkspace");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling DatasetApi->LinkWorkspace");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "workspaceId", workspaceId));

            localVarRequestOptions.Operation = "DatasetApi.LinkWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}/link", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh data on dataset from dataset&#39;s source Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetTwinGraphInfo</returns>
        public DatasetTwinGraphInfo RefreshDataset(string organizationId, string datasetId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<DatasetTwinGraphInfo> localVarResponse = RefreshDatasetWithHttpInfo(organizationId, datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh data on dataset from dataset&#39;s source Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetTwinGraphInfo</returns>
        public Com.Cosmotech.Client.ApiResponse<DatasetTwinGraphInfo> RefreshDatasetWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RefreshDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RefreshDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.RefreshDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DatasetTwinGraphInfo>("/organizations/{organization_id}/datasets/{dataset_id}/refresh", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh data on dataset from dataset&#39;s source Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetTwinGraphInfo</returns>
        public async System.Threading.Tasks.Task<DatasetTwinGraphInfo> RefreshDatasetAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<DatasetTwinGraphInfo> localVarResponse = await RefreshDatasetWithHttpInfoAsync(organizationId, datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh data on dataset from dataset&#39;s source Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetTwinGraphInfo)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<DatasetTwinGraphInfo>> RefreshDatasetWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RefreshDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RefreshDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.RefreshDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DatasetTwinGraphInfo>("/organizations/{organization_id}/datasets/{dataset_id}/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveAllDatasetCompatibilityElements(string organizationId, string datasetId, int operationIndex = 0)
        {
            RemoveAllDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId);
        }

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> RemoveAllDatasetCompatibilityElementsWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RemoveAllDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RemoveAllDatasetCompatibilityElements");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.RemoveAllDatasetCompatibilityElements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/datasets/{dataset_id}/compatibility", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllDatasetCompatibilityElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAllDatasetCompatibilityElementsAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveAllDatasetCompatibilityElementsWithHttpInfoAsync(organizationId, datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> RemoveAllDatasetCompatibilityElementsWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RemoveAllDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RemoveAllDatasetCompatibilityElements");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.RemoveAllDatasetCompatibilityElements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/datasets/{dataset_id}/compatibility", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllDatasetCompatibilityElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified access from the given Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveDatasetAccessControl(string organizationId, string datasetId, string identityId, int operationIndex = 0)
        {
            RemoveDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId);
        }

        /// <summary>
        /// Remove the specified access from the given Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> RemoveDatasetAccessControlWithHttpInfo(string organizationId, string datasetId, string identityId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RemoveDatasetAccessControl");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RemoveDatasetAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling DatasetApi->RemoveDatasetAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.RemoveDatasetAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveDatasetAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified access from the given Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveDatasetAccessControlAsync(string organizationId, string datasetId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveDatasetAccessControlWithHttpInfoAsync(organizationId, datasetId, identityId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove the specified access from the given Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> RemoveDatasetAccessControlWithHttpInfoAsync(string organizationId, string datasetId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RemoveDatasetAccessControl");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RemoveDatasetAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling DatasetApi->RemoveDatasetAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.RemoveDatasetAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveDatasetAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback the dataset after a failed refresh Rollback the twingraph on a dataset after a failed refresh
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string RollbackRefresh(string organizationId, string datasetId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = RollbackRefreshWithHttpInfo(organizationId, datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback the dataset after a failed refresh Rollback the twingraph on a dataset after a failed refresh
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Com.Cosmotech.Client.ApiResponse<string> RollbackRefreshWithHttpInfo(string organizationId, string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RollbackRefresh");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RollbackRefresh");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.RollbackRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/organizations/{organization_id}/datasets/{dataset_id}/refresh/rollback", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback the dataset after a failed refresh Rollback the twingraph on a dataset after a failed refresh
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RollbackRefreshAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = await RollbackRefreshWithHttpInfoAsync(organizationId, datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback the dataset after a failed refresh Rollback the twingraph on a dataset after a failed refresh
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<string>> RollbackRefreshWithHttpInfoAsync(string organizationId, string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RollbackRefresh");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RollbackRefresh");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetApi.RollbackRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/organizations/{organization_id}/datasets/{dataset_id}/refresh/rollback", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Datasets by tags 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        public List<Dataset> SearchDatasets(string organizationId, DatasetSearch datasetSearch, int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<Dataset>> localVarResponse = SearchDatasetsWithHttpInfo(organizationId, datasetSearch, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Datasets by tags 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<Dataset>> SearchDatasetsWithHttpInfo(string organizationId, DatasetSearch datasetSearch, int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->SearchDatasets");
            }

            // verify the required parameter 'datasetSearch' is set
            if (datasetSearch == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetSearch' when calling DatasetApi->SearchDatasets");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            localVarRequestOptions.Data = datasetSearch;

            localVarRequestOptions.Operation = "DatasetApi.SearchDatasets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Dataset>>("/organizations/{organization_id}/datasets/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDatasets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Datasets by tags 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dataset>> SearchDatasetsAsync(string organizationId, DatasetSearch datasetSearch, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<Dataset>> localVarResponse = await SearchDatasetsWithHttpInfoAsync(organizationId, datasetSearch, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Datasets by tags 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<Dataset>>> SearchDatasetsWithHttpInfoAsync(string organizationId, DatasetSearch datasetSearch, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->SearchDatasets");
            }

            // verify the required parameter 'datasetSearch' is set
            if (datasetSearch == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetSearch' when calling DatasetApi->SearchDatasets");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            localVarRequestOptions.Data = datasetSearch;

            localVarRequestOptions.Operation = "DatasetApi.SearchDatasets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Dataset>>("/organizations/{organization_id}/datasets/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDatasets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the Dataset default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetRole">This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetSecurity</returns>
        public DatasetSecurity SetDatasetDefaultSecurity(string organizationId, string datasetId, DatasetRole datasetRole, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<DatasetSecurity> localVarResponse = SetDatasetDefaultSecurityWithHttpInfo(organizationId, datasetId, datasetRole);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the Dataset default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetRole">This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetSecurity</returns>
        public Com.Cosmotech.Client.ApiResponse<DatasetSecurity> SetDatasetDefaultSecurityWithHttpInfo(string organizationId, string datasetId, DatasetRole datasetRole, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->SetDatasetDefaultSecurity");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->SetDatasetDefaultSecurity");
            }

            // verify the required parameter 'datasetRole' is set
            if (datasetRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetRole' when calling DatasetApi->SetDatasetDefaultSecurity");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetRole;

            localVarRequestOptions.Operation = "DatasetApi.SetDatasetDefaultSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DatasetSecurity>("/organizations/{organization_id}/datasets/{dataset_id}/security/default", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetDatasetDefaultSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the Dataset default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetRole">This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetSecurity</returns>
        public async System.Threading.Tasks.Task<DatasetSecurity> SetDatasetDefaultSecurityAsync(string organizationId, string datasetId, DatasetRole datasetRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<DatasetSecurity> localVarResponse = await SetDatasetDefaultSecurityWithHttpInfoAsync(organizationId, datasetId, datasetRole, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the Dataset default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetRole">This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetSecurity)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<DatasetSecurity>> SetDatasetDefaultSecurityWithHttpInfoAsync(string organizationId, string datasetId, DatasetRole datasetRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->SetDatasetDefaultSecurity");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->SetDatasetDefaultSecurity");
            }

            // verify the required parameter 'datasetRole' is set
            if (datasetRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetRole' when calling DatasetApi->SetDatasetDefaultSecurity");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetRole;

            localVarRequestOptions.Operation = "DatasetApi.SetDatasetDefaultSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DatasetSecurity>("/organizations/{organization_id}/datasets/{dataset_id}/security/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetDatasetDefaultSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a query on a graph instance and return the result as a zip file in async mode Run a query on a graph instance and return the result as a zip file in async mode
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Graph Identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetTwinGraphHash</returns>
        public DatasetTwinGraphHash TwingraphBatchQuery(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<DatasetTwinGraphHash> localVarResponse = TwingraphBatchQueryWithHttpInfo(organizationId, datasetId, datasetTwinGraphQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a query on a graph instance and return the result as a zip file in async mode Run a query on a graph instance and return the result as a zip file in async mode
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Graph Identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetTwinGraphHash</returns>
        public Com.Cosmotech.Client.ApiResponse<DatasetTwinGraphHash> TwingraphBatchQueryWithHttpInfo(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->TwingraphBatchQuery");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->TwingraphBatchQuery");
            }

            // verify the required parameter 'datasetTwinGraphQuery' is set
            if (datasetTwinGraphQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetTwinGraphQuery' when calling DatasetApi->TwingraphBatchQuery");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetTwinGraphQuery;

            localVarRequestOptions.Operation = "DatasetApi.TwingraphBatchQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DatasetTwinGraphHash>("/organizations/{organization_id}/datasets/{dataset_id}/batch-query", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TwingraphBatchQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a query on a graph instance and return the result as a zip file in async mode Run a query on a graph instance and return the result as a zip file in async mode
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Graph Identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetTwinGraphHash</returns>
        public async System.Threading.Tasks.Task<DatasetTwinGraphHash> TwingraphBatchQueryAsync(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<DatasetTwinGraphHash> localVarResponse = await TwingraphBatchQueryWithHttpInfoAsync(organizationId, datasetId, datasetTwinGraphQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a query on a graph instance and return the result as a zip file in async mode Run a query on a graph instance and return the result as a zip file in async mode
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Graph Identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetTwinGraphHash)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<DatasetTwinGraphHash>> TwingraphBatchQueryWithHttpInfoAsync(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->TwingraphBatchQuery");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->TwingraphBatchQuery");
            }

            // verify the required parameter 'datasetTwinGraphQuery' is set
            if (datasetTwinGraphQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetTwinGraphQuery' when calling DatasetApi->TwingraphBatchQuery");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetTwinGraphQuery;

            localVarRequestOptions.Operation = "DatasetApi.TwingraphBatchQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DatasetTwinGraphHash>("/organizations/{organization_id}/datasets/{dataset_id}/batch-query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TwingraphBatchQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Async batch update by loading a CSV file on a graph instance  Async batch update by loading a CSV file on a graph instance 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="twinGraphQuery"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TwinGraphBatchResult</returns>
        public TwinGraphBatchResult TwingraphBatchUpdate(string organizationId, string datasetId, DatasetTwinGraphQuery twinGraphQuery, System.IO.Stream body, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<TwinGraphBatchResult> localVarResponse = TwingraphBatchUpdateWithHttpInfo(organizationId, datasetId, twinGraphQuery, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Async batch update by loading a CSV file on a graph instance  Async batch update by loading a CSV file on a graph instance 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="twinGraphQuery"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TwinGraphBatchResult</returns>
        public Com.Cosmotech.Client.ApiResponse<TwinGraphBatchResult> TwingraphBatchUpdateWithHttpInfo(string organizationId, string datasetId, DatasetTwinGraphQuery twinGraphQuery, System.IO.Stream body, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->TwingraphBatchUpdate");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->TwingraphBatchUpdate");
            }

            // verify the required parameter 'twinGraphQuery' is set
            if (twinGraphQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'twinGraphQuery' when calling DatasetApi->TwingraphBatchUpdate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'body' when calling DatasetApi->TwingraphBatchUpdate");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/csv",
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "twinGraphQuery", twinGraphQuery));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatasetApi.TwingraphBatchUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TwinGraphBatchResult>("/organizations/{organization_id}/datasets/{dataset_id}/batch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TwingraphBatchUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Async batch update by loading a CSV file on a graph instance  Async batch update by loading a CSV file on a graph instance 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="twinGraphQuery"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TwinGraphBatchResult</returns>
        public async System.Threading.Tasks.Task<TwinGraphBatchResult> TwingraphBatchUpdateAsync(string organizationId, string datasetId, DatasetTwinGraphQuery twinGraphQuery, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<TwinGraphBatchResult> localVarResponse = await TwingraphBatchUpdateWithHttpInfoAsync(organizationId, datasetId, twinGraphQuery, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Async batch update by loading a CSV file on a graph instance  Async batch update by loading a CSV file on a graph instance 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="twinGraphQuery"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TwinGraphBatchResult)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<TwinGraphBatchResult>> TwingraphBatchUpdateWithHttpInfoAsync(string organizationId, string datasetId, DatasetTwinGraphQuery twinGraphQuery, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->TwingraphBatchUpdate");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->TwingraphBatchUpdate");
            }

            // verify the required parameter 'twinGraphQuery' is set
            if (twinGraphQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'twinGraphQuery' when calling DatasetApi->TwingraphBatchUpdate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'body' when calling DatasetApi->TwingraphBatchUpdate");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/csv", 
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "twinGraphQuery", twinGraphQuery));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatasetApi.TwingraphBatchUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TwinGraphBatchResult>("/organizations/{organization_id}/datasets/{dataset_id}/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TwingraphBatchUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the result of a query made on the graph instance as a json Run a query on a graph instance and return the result as a json
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> TwingraphQuery(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<Object>> localVarResponse = TwingraphQueryWithHttpInfo(organizationId, datasetId, datasetTwinGraphQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the result of a query made on the graph instance as a json Run a query on a graph instance and return the result as a json
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<Object>> TwingraphQueryWithHttpInfo(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->TwingraphQuery");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->TwingraphQuery");
            }

            // verify the required parameter 'datasetTwinGraphQuery' is set
            if (datasetTwinGraphQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetTwinGraphQuery' when calling DatasetApi->TwingraphQuery");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetTwinGraphQuery;

            localVarRequestOptions.Operation = "DatasetApi.TwingraphQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Object>>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TwingraphQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the result of a query made on the graph instance as a json Run a query on a graph instance and return the result as a json
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> TwingraphQueryAsync(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<Object>> localVarResponse = await TwingraphQueryWithHttpInfoAsync(organizationId, datasetId, datasetTwinGraphQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the result of a query made on the graph instance as a json Run a query on a graph instance and return the result as a json
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetTwinGraphQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<Object>>> TwingraphQueryWithHttpInfoAsync(string organizationId, string datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->TwingraphQuery");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->TwingraphQuery");
            }

            // verify the required parameter 'datasetTwinGraphQuery' is set
            if (datasetTwinGraphQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetTwinGraphQuery' when calling DatasetApi->TwingraphQuery");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetTwinGraphQuery;

            localVarRequestOptions.Operation = "DatasetApi.TwingraphQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Object>>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TwingraphQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset UnlinkWorkspace(string organizationId, string datasetId, string workspaceId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = UnlinkWorkspaceWithHttpInfo(organizationId, datasetId, workspaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public Com.Cosmotech.Client.ApiResponse<Dataset> UnlinkWorkspaceWithHttpInfo(string organizationId, string datasetId, string workspaceId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UnlinkWorkspace");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UnlinkWorkspace");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling DatasetApi->UnlinkWorkspace");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "workspaceId", workspaceId));

            localVarRequestOptions.Operation = "DatasetApi.UnlinkWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}/unlink", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> UnlinkWorkspaceAsync(string organizationId, string datasetId, string workspaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = await UnlinkWorkspaceWithHttpInfoAsync(organizationId, datasetId, workspaceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="workspaceId">workspace id to be linked to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Dataset>> UnlinkWorkspaceWithHttpInfoAsync(string organizationId, string datasetId, string workspaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UnlinkWorkspace");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UnlinkWorkspace");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling DatasetApi->UnlinkWorkspace");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "workspaceId", workspaceId));

            localVarRequestOptions.Operation = "DatasetApi.UnlinkWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}/unlink", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset UpdateDataset(string organizationId, string datasetId, Dataset dataset, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = UpdateDatasetWithHttpInfo(organizationId, datasetId, dataset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public Com.Cosmotech.Client.ApiResponse<Dataset> UpdateDatasetWithHttpInfo(string organizationId, string datasetId, Dataset dataset, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'dataset' when calling DatasetApi->UpdateDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = dataset;

            localVarRequestOptions.Operation = "DatasetApi.UpdateDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> UpdateDatasetAsync(string organizationId, string datasetId, Dataset dataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = await UpdateDatasetWithHttpInfoAsync(organizationId, datasetId, dataset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Dataset>> UpdateDatasetWithHttpInfoAsync(string organizationId, string datasetId, Dataset dataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'dataset' when calling DatasetApi->UpdateDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = dataset;

            localVarRequestOptions.Operation = "DatasetApi.UpdateDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified access to User for a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="datasetRole">The new Dataset Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasetAccessControl</returns>
        public DatasetAccessControl UpdateDatasetAccessControl(string organizationId, string datasetId, string identityId, DatasetRole datasetRole, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<DatasetAccessControl> localVarResponse = UpdateDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId, datasetRole);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified access to User for a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="datasetRole">The new Dataset Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasetAccessControl</returns>
        public Com.Cosmotech.Client.ApiResponse<DatasetAccessControl> UpdateDatasetAccessControlWithHttpInfo(string organizationId, string datasetId, string identityId, DatasetRole datasetRole, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UpdateDatasetAccessControl");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UpdateDatasetAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling DatasetApi->UpdateDatasetAccessControl");
            }

            // verify the required parameter 'datasetRole' is set
            if (datasetRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetRole' when calling DatasetApi->UpdateDatasetAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter
            localVarRequestOptions.Data = datasetRole;

            localVarRequestOptions.Operation = "DatasetApi.UpdateDatasetAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<DatasetAccessControl>("/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDatasetAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified access to User for a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="datasetRole">The new Dataset Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetAccessControl</returns>
        public async System.Threading.Tasks.Task<DatasetAccessControl> UpdateDatasetAccessControlAsync(string organizationId, string datasetId, string identityId, DatasetRole datasetRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<DatasetAccessControl> localVarResponse = await UpdateDatasetAccessControlWithHttpInfoAsync(organizationId, datasetId, identityId, datasetRole, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified access to User for a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="datasetRole">The new Dataset Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetAccessControl)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<DatasetAccessControl>> UpdateDatasetAccessControlWithHttpInfoAsync(string organizationId, string datasetId, string identityId, DatasetRole datasetRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UpdateDatasetAccessControl");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UpdateDatasetAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling DatasetApi->UpdateDatasetAccessControl");
            }

            // verify the required parameter 'datasetRole' is set
            if (datasetRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetRole' when calling DatasetApi->UpdateDatasetAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter
            localVarRequestOptions.Data = datasetRole;

            localVarRequestOptions.Operation = "DatasetApi.UpdateDatasetAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<DatasetAccessControl>("/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDatasetAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update entities in a graph instance update entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string UpdateTwingraphEntities(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = UpdateTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, graphProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update entities in a graph instance update entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Com.Cosmotech.Client.ApiResponse<string> UpdateTwingraphEntitiesWithHttpInfo(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UpdateTwingraphEntities");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UpdateTwingraphEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'type' when calling DatasetApi->UpdateTwingraphEntities");
            }

            // verify the required parameter 'graphProperties' is set
            if (graphProperties == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'graphProperties' when calling DatasetApi->UpdateTwingraphEntities");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Com.Cosmotech.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.Data = graphProperties;

            localVarRequestOptions.Operation = "DatasetApi.UpdateTwingraphEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<string>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTwingraphEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update entities in a graph instance update entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UpdateTwingraphEntitiesAsync(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<string> localVarResponse = await UpdateTwingraphEntitiesWithHttpInfoAsync(organizationId, datasetId, type, graphProperties, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update entities in a graph instance update entities in a graph instance
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset Identifier</param>
        /// <param name="type">the entity model type</param>
        /// <param name="graphProperties">the entities to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<string>> UpdateTwingraphEntitiesWithHttpInfoAsync(string organizationId, string datasetId, string type, List<GraphProperties> graphProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UpdateTwingraphEntities");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UpdateTwingraphEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'type' when calling DatasetApi->UpdateTwingraphEntities");
            }

            // verify the required parameter 'graphProperties' is set
            if (graphProperties == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'graphProperties' when calling DatasetApi->UpdateTwingraphEntities");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Com.Cosmotech.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.Data = graphProperties;

            localVarRequestOptions.Operation = "DatasetApi.UpdateTwingraphEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<string>("/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTwingraphEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload data from zip file to dataset&#39;s twingraph To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileUploadValidation</returns>
        public FileUploadValidation UploadTwingraph(string organizationId, string datasetId, System.IO.Stream body, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<FileUploadValidation> localVarResponse = UploadTwingraphWithHttpInfo(organizationId, datasetId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload data from zip file to dataset&#39;s twingraph To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileUploadValidation</returns>
        public Com.Cosmotech.Client.ApiResponse<FileUploadValidation> UploadTwingraphWithHttpInfo(string organizationId, string datasetId, System.IO.Stream body, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UploadTwingraph");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UploadTwingraph");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'body' when calling DatasetApi->UploadTwingraph");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatasetApi.UploadTwingraph";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileUploadValidation>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadTwingraph", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload data from zip file to dataset&#39;s twingraph To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUploadValidation</returns>
        public async System.Threading.Tasks.Task<FileUploadValidation> UploadTwingraphAsync(string organizationId, string datasetId, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<FileUploadValidation> localVarResponse = await UploadTwingraphWithHttpInfoAsync(organizationId, datasetId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload data from zip file to dataset&#39;s twingraph To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUploadValidation)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<FileUploadValidation>> UploadTwingraphWithHttpInfoAsync(string organizationId, string datasetId, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UploadTwingraph");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UploadTwingraph");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'body' when calling DatasetApi->UploadTwingraph");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatasetApi.UploadTwingraph";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FileUploadValidation>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadTwingraph", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
