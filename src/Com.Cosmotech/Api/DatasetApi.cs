/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 2.0.5-dev
 * Contact: platform@cosmotech.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Cosmotech.Client;
using Com.Cosmotech.Model;

namespace Com.Cosmotech.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Dataset Compatibility elements.
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <returns>List&lt;DatasetCompatibility&gt;</returns>
        List<DatasetCompatibility> AddOrReplaceDatasetCompatibilityElements(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility);

        /// <summary>
        /// Add Dataset Compatibility elements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <returns>ApiResponse of List&lt;DatasetCompatibility&gt;</returns>
        ApiResponse<List<DatasetCompatibility>> AddOrReplaceDatasetCompatibilityElementsWithHttpInfo(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility);
        /// <summary>
        /// Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector.
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <returns>DatasetCopyParameters</returns>
        DatasetCopyParameters CopyDataset(string organizationId, DatasetCopyParameters datasetCopyParameters);

        /// <summary>
        /// Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <returns>ApiResponse of DatasetCopyParameters</returns>
        ApiResponse<DatasetCopyParameters> CopyDatasetWithHttpInfo(string organizationId, DatasetCopyParameters datasetCopyParameters);
        /// <summary>
        /// Create a new Dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <returns>Dataset</returns>
        Dataset CreateDataset(string organizationId, Dataset dataset);

        /// <summary>
        /// Create a new Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> CreateDatasetWithHttpInfo(string organizationId, Dataset dataset);
        /// <summary>
        /// Delete a dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns></returns>
        void DeleteDataset(string organizationId, string datasetId);

        /// <summary>
        /// Delete a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDatasetWithHttpInfo(string organizationId, string datasetId);
        /// <summary>
        /// List all Datasets
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        List<Dataset> FindAllDatasets(string organizationId);

        /// <summary>
        /// List all Datasets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        ApiResponse<List<Dataset>> FindAllDatasetsWithHttpInfo(string organizationId);
        /// <summary>
        /// Get the details of a Dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns>Dataset</returns>
        Dataset FindDatasetById(string organizationId, string datasetId);

        /// <summary>
        /// Get the details of a Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> FindDatasetByIdWithHttpInfo(string organizationId, string datasetId);
        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns></returns>
        void RemoveAllDatasetCompatibilityElements(string organizationId, string datasetId);

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAllDatasetCompatibilityElementsWithHttpInfo(string organizationId, string datasetId);
        /// <summary>
        /// Search Datasets
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        List<Dataset> SearchDatasets(string organizationId, DatasetSearch datasetSearch);

        /// <summary>
        /// Search Datasets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        ApiResponse<List<Dataset>> SearchDatasetsWithHttpInfo(string organizationId, DatasetSearch datasetSearch);
        /// <summary>
        /// Update a dataset
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details.</param>
        /// <returns>Dataset</returns>
        Dataset UpdateDataset(string organizationId, string datasetId, Dataset dataset);

        /// <summary>
        /// Update a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> UpdateDatasetWithHttpInfo(string organizationId, string datasetId, Dataset dataset);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Dataset Compatibility elements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatasetCompatibility&gt;</returns>
        System.Threading.Tasks.Task<List<DatasetCompatibility>> AddOrReplaceDatasetCompatibilityElementsAsync(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Dataset Compatibility elements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatasetCompatibility&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatasetCompatibility>>> AddOrReplaceDatasetCompatibilityElementsWithHttpInfoAsync(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetCopyParameters</returns>
        System.Threading.Tasks.Task<DatasetCopyParameters> CopyDatasetAsync(string organizationId, DatasetCopyParameters datasetCopyParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetCopyParameters)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasetCopyParameters>> CopyDatasetWithHttpInfoAsync(string organizationId, DatasetCopyParameters datasetCopyParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> CreateDatasetAsync(string organizationId, Dataset dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> CreateDatasetWithHttpInfoAsync(string organizationId, Dataset dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDatasetAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDatasetWithHttpInfoAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Datasets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        System.Threading.Tasks.Task<List<Dataset>> FindAllDatasetsAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all Datasets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> FindAllDatasetsWithHttpInfoAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the details of a Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> FindDatasetByIdAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details of a Dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> FindDatasetByIdWithHttpInfoAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAllDatasetCompatibilityElementsAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAllDatasetCompatibilityElementsWithHttpInfoAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Datasets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        System.Threading.Tasks.Task<List<Dataset>> SearchDatasetsAsync(string organizationId, DatasetSearch datasetSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Datasets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> SearchDatasetsWithHttpInfoAsync(string organizationId, DatasetSearch datasetSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> UpdateDatasetAsync(string organizationId, string datasetId, Dataset dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a dataset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> UpdateDatasetWithHttpInfoAsync(string organizationId, string datasetId, Dataset dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetApi : IDatasetApiSync, IDatasetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatasetApi : IDatasetApi
    {
        private Com.Cosmotech.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetApi(string basePath)
        {
            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                new Com.Cosmotech.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatasetApi(Com.Cosmotech.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DatasetApi(Com.Cosmotech.Client.ISynchronousClient client, Com.Cosmotech.Client.IAsynchronousClient asyncClient, Com.Cosmotech.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Cosmotech.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Cosmotech.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Cosmotech.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Cosmotech.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Dataset Compatibility elements. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <returns>List&lt;DatasetCompatibility&gt;</returns>
        public List<DatasetCompatibility> AddOrReplaceDatasetCompatibilityElements(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility)
        {
            Com.Cosmotech.Client.ApiResponse<List<DatasetCompatibility>> localVarResponse = AddOrReplaceDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId, datasetCompatibility);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Dataset Compatibility elements. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <returns>ApiResponse of List&lt;DatasetCompatibility&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<DatasetCompatibility>> AddOrReplaceDatasetCompatibilityElementsWithHttpInfo(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetCompatibility' is set
            if (datasetCompatibility == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetCompatibility' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetCompatibility;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DatasetCompatibility>>("/organizations/{organization_id}/datasets/{dataset_id}/compatibility", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceDatasetCompatibilityElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Dataset Compatibility elements. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatasetCompatibility&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatasetCompatibility>> AddOrReplaceDatasetCompatibilityElementsAsync(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<DatasetCompatibility>> localVarResponse = await AddOrReplaceDatasetCompatibilityElementsWithHttpInfoAsync(organizationId, datasetId, datasetCompatibility, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Dataset Compatibility elements. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="datasetCompatibility">the Dataset Compatibility elements</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatasetCompatibility&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<DatasetCompatibility>>> AddOrReplaceDatasetCompatibilityElementsWithHttpInfoAsync(string organizationId, string datasetId, List<DatasetCompatibility> datasetCompatibility, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetCompatibility' is set
            if (datasetCompatibility == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetCompatibility' when calling DatasetApi->AddOrReplaceDatasetCompatibilityElements");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = datasetCompatibility;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DatasetCompatibility>>("/organizations/{organization_id}/datasets/{dataset_id}/compatibility", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceDatasetCompatibilityElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <returns>DatasetCopyParameters</returns>
        public DatasetCopyParameters CopyDataset(string organizationId, DatasetCopyParameters datasetCopyParameters)
        {
            Com.Cosmotech.Client.ApiResponse<DatasetCopyParameters> localVarResponse = CopyDatasetWithHttpInfo(organizationId, datasetCopyParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <returns>ApiResponse of DatasetCopyParameters</returns>
        public Com.Cosmotech.Client.ApiResponse<DatasetCopyParameters> CopyDatasetWithHttpInfo(string organizationId, DatasetCopyParameters datasetCopyParameters)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CopyDataset");
            }

            // verify the required parameter 'datasetCopyParameters' is set
            if (datasetCopyParameters == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetCopyParameters' when calling DatasetApi->CopyDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = datasetCopyParameters;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DatasetCopyParameters>("/organizations/{organization_id}/datasets/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasetCopyParameters</returns>
        public async System.Threading.Tasks.Task<DatasetCopyParameters> CopyDatasetAsync(string organizationId, DatasetCopyParameters datasetCopyParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<DatasetCopyParameters> localVarResponse = await CopyDatasetWithHttpInfoAsync(organizationId, datasetCopyParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector. 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetCopyParameters">the Dataset copy parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasetCopyParameters)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<DatasetCopyParameters>> CopyDatasetWithHttpInfoAsync(string organizationId, DatasetCopyParameters datasetCopyParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CopyDataset");
            }

            // verify the required parameter 'datasetCopyParameters' is set
            if (datasetCopyParameters == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetCopyParameters' when calling DatasetApi->CopyDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = datasetCopyParameters;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DatasetCopyParameters>("/organizations/{organization_id}/datasets/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <returns>Dataset</returns>
        public Dataset CreateDataset(string organizationId, Dataset dataset)
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = CreateDatasetWithHttpInfo(organizationId, dataset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <returns>ApiResponse of Dataset</returns>
        public Com.Cosmotech.Client.ApiResponse<Dataset> CreateDatasetWithHttpInfo(string organizationId, Dataset dataset)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CreateDataset");
            }

            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'dataset' when calling DatasetApi->CreateDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = dataset;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dataset>("/organizations/{organization_id}/datasets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> CreateDatasetAsync(string organizationId, Dataset dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = await CreateDatasetWithHttpInfoAsync(organizationId, dataset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="dataset">the Dataset to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Dataset>> CreateDatasetWithHttpInfoAsync(string organizationId, Dataset dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->CreateDataset");
            }

            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'dataset' when calling DatasetApi->CreateDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = dataset;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dataset>("/organizations/{organization_id}/datasets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns></returns>
        public void DeleteDataset(string organizationId, string datasetId)
        {
            DeleteDatasetWithHttpInfo(organizationId, datasetId);
        }

        /// <summary>
        /// Delete a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> DeleteDatasetWithHttpInfo(string organizationId, string datasetId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->DeleteDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->DeleteDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDatasetAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDatasetWithHttpInfoAsync(organizationId, datasetId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> DeleteDatasetWithHttpInfoAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->DeleteDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->DeleteDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        public List<Dataset> FindAllDatasets(string organizationId)
        {
            Com.Cosmotech.Client.ApiResponse<List<Dataset>> localVarResponse = FindAllDatasetsWithHttpInfo(organizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<Dataset>> FindAllDatasetsWithHttpInfo(string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->FindAllDatasets");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dataset>>("/organizations/{organization_id}/datasets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllDatasets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dataset>> FindAllDatasetsAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<Dataset>> localVarResponse = await FindAllDatasetsWithHttpInfoAsync(organizationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<Dataset>>> FindAllDatasetsWithHttpInfoAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->FindAllDatasets");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dataset>>("/organizations/{organization_id}/datasets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllDatasets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns>Dataset</returns>
        public Dataset FindDatasetById(string organizationId, string datasetId)
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = FindDatasetByIdWithHttpInfo(organizationId, datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns>ApiResponse of Dataset</returns>
        public Com.Cosmotech.Client.ApiResponse<Dataset> FindDatasetByIdWithHttpInfo(string organizationId, string datasetId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->FindDatasetById");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->FindDatasetById");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindDatasetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> FindDatasetByIdAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = await FindDatasetByIdWithHttpInfoAsync(organizationId, datasetId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a Dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Dataset>> FindDatasetByIdWithHttpInfoAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->FindDatasetById");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->FindDatasetById");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindDatasetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns></returns>
        public void RemoveAllDatasetCompatibilityElements(string organizationId, string datasetId)
        {
            RemoveAllDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId);
        }

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> RemoveAllDatasetCompatibilityElementsWithHttpInfo(string organizationId, string datasetId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RemoveAllDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RemoveAllDatasetCompatibilityElements");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/datasets/{dataset_id}/compatibility", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllDatasetCompatibilityElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAllDatasetCompatibilityElementsAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveAllDatasetCompatibilityElementsWithHttpInfoAsync(organizationId, datasetId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove all Dataset Compatibility elements from the Dataset specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> RemoveAllDatasetCompatibilityElementsWithHttpInfoAsync(string organizationId, string datasetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->RemoveAllDatasetCompatibilityElements");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->RemoveAllDatasetCompatibilityElements");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/datasets/{dataset_id}/compatibility", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllDatasetCompatibilityElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        public List<Dataset> SearchDatasets(string organizationId, DatasetSearch datasetSearch)
        {
            Com.Cosmotech.Client.ApiResponse<List<Dataset>> localVarResponse = SearchDatasetsWithHttpInfo(organizationId, datasetSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<Dataset>> SearchDatasetsWithHttpInfo(string organizationId, DatasetSearch datasetSearch)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->SearchDatasets");
            }

            // verify the required parameter 'datasetSearch' is set
            if (datasetSearch == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetSearch' when calling DatasetApi->SearchDatasets");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = datasetSearch;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Dataset>>("/organizations/{organization_id}/datasets/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDatasets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dataset>> SearchDatasetsAsync(string organizationId, DatasetSearch datasetSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<Dataset>> localVarResponse = await SearchDatasetsWithHttpInfoAsync(organizationId, datasetSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Datasets 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetSearch">the Dataset search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<Dataset>>> SearchDatasetsWithHttpInfoAsync(string organizationId, DatasetSearch datasetSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->SearchDatasets");
            }

            // verify the required parameter 'datasetSearch' is set
            if (datasetSearch == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetSearch' when calling DatasetApi->SearchDatasets");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = datasetSearch;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Dataset>>("/organizations/{organization_id}/datasets/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDatasets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details.</param>
        /// <returns>Dataset</returns>
        public Dataset UpdateDataset(string organizationId, string datasetId, Dataset dataset)
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = UpdateDatasetWithHttpInfo(organizationId, datasetId, dataset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public Com.Cosmotech.Client.ApiResponse<Dataset> UpdateDatasetWithHttpInfo(string organizationId, string datasetId, Dataset dataset)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'dataset' when calling DatasetApi->UpdateDataset");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = dataset;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> UpdateDatasetAsync(string organizationId, string datasetId, Dataset dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Dataset> localVarResponse = await UpdateDatasetWithHttpInfoAsync(organizationId, datasetId, dataset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a dataset 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="datasetId">the Dataset identifier</param>
        /// <param name="dataset">the new Dataset details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Dataset>> UpdateDatasetWithHttpInfoAsync(string organizationId, string datasetId, Dataset dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'dataset' when calling DatasetApi->UpdateDataset");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataset_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = dataset;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Dataset>("/organizations/{organization_id}/datasets/{dataset_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
