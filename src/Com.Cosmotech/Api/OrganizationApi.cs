/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Cosmotech.Client;
using Com.Cosmotech.Model;

namespace Com.Cosmotech.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all Organizations
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Organization&gt;</returns>
        List<Organization> FindAllOrganizations();

        /// <summary>
        /// List all Organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        ApiResponse<List<Organization>> FindAllOrganizationsWithHttpInfo();
        /// <summary>
        /// Get the details of an organization
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>Organization</returns>
        Organization FindOrganizationById(string organizationId);

        /// <summary>
        /// Get the details of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> FindOrganizationByIdWithHttpInfo(string organizationId);
        /// <summary>
        /// Get the current User information for the Organization
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>OrganizationUser</returns>
        OrganizationUser GetCurrentOrganizationUser(string organizationId);

        /// <summary>
        /// Get the current User information for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>ApiResponse of OrganizationUser</returns>
        ApiResponse<OrganizationUser> GetCurrentOrganizationUserWithHttpInfo(string organizationId);
        /// <summary>
        /// Register a new organization
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">the Organization to register</param>
        /// <returns>Organization</returns>
        Organization RegisterOrganization(Organization organization);

        /// <summary>
        /// Register a new organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">the Organization to register</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> RegisterOrganizationWithHttpInfo(Organization organization);
        /// <summary>
        /// Unregister an organization
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>Organization</returns>
        Organization UnregisterOrganization(string organizationId);

        /// <summary>
        /// Unregister an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> UnregisterOrganizationWithHttpInfo(string organizationId);
        /// <summary>
        /// Update an organization
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="organization">the new Organization details</param>
        /// <returns>Organization</returns>
        Organization UpdateOrganization(string organizationId, Organization organization);

        /// <summary>
        /// Update an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="organization">the new Organization details</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> UpdateOrganizationWithHttpInfo(string organizationId, Organization organization);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all Organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        System.Threading.Tasks.Task<List<Organization>> FindAllOrganizationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all Organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organization>>> FindAllOrganizationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the details of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> FindOrganizationByIdAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> FindOrganizationByIdWithHttpInfoAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the current User information for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationUser</returns>
        System.Threading.Tasks.Task<OrganizationUser> GetCurrentOrganizationUserAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the current User information for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationUser>> GetCurrentOrganizationUserWithHttpInfoAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register a new organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">the Organization to register</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> RegisterOrganizationAsync(Organization organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register a new organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">the Organization to register</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> RegisterOrganizationWithHttpInfoAsync(Organization organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unregister an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> UnregisterOrganizationAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unregister an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> UnregisterOrganizationWithHttpInfoAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="organization">the new Organization details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> UpdateOrganizationAsync(string organizationId, Organization organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="organization">the new Organization details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> UpdateOrganizationWithHttpInfoAsync(string organizationId, Organization organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApi : IOrganizationApiSync, IOrganizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationApi : IOrganizationApi
    {
        private Com.Cosmotech.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationApi(String basePath)
        {
            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                new Com.Cosmotech.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationApi(Com.Cosmotech.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrganizationApi(Com.Cosmotech.Client.ISynchronousClient client, Com.Cosmotech.Client.IAsynchronousClient asyncClient, Com.Cosmotech.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Cosmotech.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Cosmotech.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Cosmotech.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Cosmotech.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all Organizations 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Organization&gt;</returns>
        public List<Organization> FindAllOrganizations()
        {
            Com.Cosmotech.Client.ApiResponse<List<Organization>> localVarResponse = FindAllOrganizationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Organizations 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<Organization>> FindAllOrganizationsWithHttpInfo()
        {
            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Organization>>("/organizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllOrganizations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Organizations 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organization>> FindAllOrganizationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<Organization>> localVarResponse = await FindAllOrganizationsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Organizations 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<Organization>>> FindAllOrganizationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Organization>>("/organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllOrganizations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>Organization</returns>
        public Organization FindOrganizationById(string organizationId)
        {
            Com.Cosmotech.Client.ApiResponse<Organization> localVarResponse = FindOrganizationByIdWithHttpInfo(organizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>ApiResponse of Organization</returns>
        public Com.Cosmotech.Client.ApiResponse<Organization> FindOrganizationByIdWithHttpInfo(string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->FindOrganizationById");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Organization>("/organizations/{organization_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOrganizationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> FindOrganizationByIdAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Organization> localVarResponse = await FindOrganizationByIdWithHttpInfoAsync(organizationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Organization>> FindOrganizationByIdWithHttpInfoAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->FindOrganizationById");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Organization>("/organizations/{organization_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOrganizationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current User information for the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>OrganizationUser</returns>
        public OrganizationUser GetCurrentOrganizationUser(string organizationId)
        {
            Com.Cosmotech.Client.ApiResponse<OrganizationUser> localVarResponse = GetCurrentOrganizationUserWithHttpInfo(organizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current User information for the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>ApiResponse of OrganizationUser</returns>
        public Com.Cosmotech.Client.ApiResponse<OrganizationUser> GetCurrentOrganizationUserWithHttpInfo(string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->GetCurrentOrganizationUser");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganizationUser>("/organizations/{organization_id}/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentOrganizationUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current User information for the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationUser</returns>
        public async System.Threading.Tasks.Task<OrganizationUser> GetCurrentOrganizationUserAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<OrganizationUser> localVarResponse = await GetCurrentOrganizationUserWithHttpInfoAsync(organizationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current User information for the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationUser)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<OrganizationUser>> GetCurrentOrganizationUserWithHttpInfoAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->GetCurrentOrganizationUser");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganizationUser>("/organizations/{organization_id}/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentOrganizationUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">the Organization to register</param>
        /// <returns>Organization</returns>
        public Organization RegisterOrganization(Organization organization)
        {
            Com.Cosmotech.Client.ApiResponse<Organization> localVarResponse = RegisterOrganizationWithHttpInfo(organization);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">the Organization to register</param>
        /// <returns>ApiResponse of Organization</returns>
        public Com.Cosmotech.Client.ApiResponse<Organization> RegisterOrganizationWithHttpInfo(Organization organization)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organization' when calling OrganizationApi->RegisterOrganization");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = organization;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Organization>("/organizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">the Organization to register</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> RegisterOrganizationAsync(Organization organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Organization> localVarResponse = await RegisterOrganizationWithHttpInfoAsync(organization, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">the Organization to register</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Organization>> RegisterOrganizationWithHttpInfoAsync(Organization organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organization' when calling OrganizationApi->RegisterOrganization");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = organization;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Organization>("/organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unregister an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>Organization</returns>
        public Organization UnregisterOrganization(string organizationId)
        {
            Com.Cosmotech.Client.ApiResponse<Organization> localVarResponse = UnregisterOrganizationWithHttpInfo(organizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unregister an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <returns>ApiResponse of Organization</returns>
        public Com.Cosmotech.Client.ApiResponse<Organization> UnregisterOrganizationWithHttpInfo(string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->UnregisterOrganization");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Organization>("/organizations/{organization_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unregister an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> UnregisterOrganizationAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Organization> localVarResponse = await UnregisterOrganizationWithHttpInfoAsync(organizationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unregister an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Organization>> UnregisterOrganizationWithHttpInfoAsync(string organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->UnregisterOrganization");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Organization>("/organizations/{organization_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="organization">the new Organization details</param>
        /// <returns>Organization</returns>
        public Organization UpdateOrganization(string organizationId, Organization organization)
        {
            Com.Cosmotech.Client.ApiResponse<Organization> localVarResponse = UpdateOrganizationWithHttpInfo(organizationId, organization);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="organization">the new Organization details</param>
        /// <returns>ApiResponse of Organization</returns>
        public Com.Cosmotech.Client.ApiResponse<Organization> UpdateOrganizationWithHttpInfo(string organizationId, Organization organization)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->UpdateOrganization");

            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organization' when calling OrganizationApi->UpdateOrganization");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = organization;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Organization>("/organizations/{organization_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="organization">the new Organization details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> UpdateOrganizationAsync(string organizationId, Organization organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Organization> localVarResponse = await UpdateOrganizationWithHttpInfoAsync(organizationId, organization, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="organization">the new Organization details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Organization>> UpdateOrganizationWithHttpInfoAsync(string organizationId, Organization organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->UpdateOrganization");

            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organization' when calling OrganizationApi->UpdateOrganization");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = organization;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Organization>("/organizations/{organization_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
