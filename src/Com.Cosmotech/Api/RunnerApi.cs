/*
 * Cosmo Tech Platform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.1.2-dev
 * Contact: platform@cosmotech.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Cosmotech.Client;
using Com.Cosmotech.Model;

namespace Com.Cosmotech.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRunnerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a control access to the Runner
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerAccessControl">the new Runner security access to add.</param>
        /// <returns>RunnerAccessControl</returns>
        RunnerAccessControl AddRunnerAccessControl(string organizationId, string workspaceId, string runnerId, RunnerAccessControl runnerAccessControl);

        /// <summary>
        /// Add a control access to the Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerAccessControl">the new Runner security access to add.</param>
        /// <returns>ApiResponse of RunnerAccessControl</returns>
        ApiResponse<RunnerAccessControl> AddRunnerAccessControlWithHttpInfo(string organizationId, string workspaceId, string runnerId, RunnerAccessControl runnerAccessControl);
        /// <summary>
        /// Create a new Runner
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runner">the Runner to create</param>
        /// <returns>Runner</returns>
        Runner CreateRunner(string organizationId, string workspaceId, Runner runner);

        /// <summary>
        /// Create a new Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runner">the Runner to create</param>
        /// <returns>ApiResponse of Runner</returns>
        ApiResponse<Runner> CreateRunnerWithHttpInfo(string organizationId, string workspaceId, Runner runner);
        /// <summary>
        /// Delete a runner
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns></returns>
        void DeleteRunner(string organizationId, string workspaceId, string runnerId);

        /// <summary>
        /// Delete a runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRunnerWithHttpInfo(string organizationId, string workspaceId, string runnerId);
        /// <summary>
        /// Get the details of an runner
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>Runner</returns>
        Runner GetRunner(string organizationId, string workspaceId, string runnerId);

        /// <summary>
        /// Get the details of an runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of Runner</returns>
        ApiResponse<Runner> GetRunnerWithHttpInfo(string organizationId, string workspaceId, string runnerId);
        /// <summary>
        /// Get a control access for the Runner
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <returns>RunnerAccessControl</returns>
        RunnerAccessControl GetRunnerAccessControl(string organizationId, string workspaceId, string runnerId, string identityId);

        /// <summary>
        /// Get a control access for the Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <returns>ApiResponse of RunnerAccessControl</returns>
        ApiResponse<RunnerAccessControl> GetRunnerAccessControlWithHttpInfo(string organizationId, string workspaceId, string runnerId, string identityId);
        /// <summary>
        /// Get the Runner permission by given role
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="role">the Role</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetRunnerPermissions(string organizationId, string workspaceId, string runnerId, string role);

        /// <summary>
        /// Get the Runner permission by given role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="role">the Role</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetRunnerPermissionsWithHttpInfo(string organizationId, string workspaceId, string runnerId, string role);
        /// <summary>
        /// Get the Runner security information
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>RunnerSecurity</returns>
        RunnerSecurity GetRunnerSecurity(string organizationId, string workspaceId, string runnerId);

        /// <summary>
        /// Get the Runner security information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of RunnerSecurity</returns>
        ApiResponse<RunnerSecurity> GetRunnerSecurityWithHttpInfo(string organizationId, string workspaceId, string runnerId);
        /// <summary>
        /// Get the Runner security users list
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetRunnerSecurityUsers(string organizationId, string workspaceId, string runnerId);

        /// <summary>
        /// Get the Runner security users list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetRunnerSecurityUsersWithHttpInfo(string organizationId, string workspaceId, string runnerId);
        /// <summary>
        /// List all Runners
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <returns>List&lt;Runner&gt;</returns>
        List<Runner> ListRunners(string organizationId, string workspaceId, int? page = default(int?), int? size = default(int?));

        /// <summary>
        /// List all Runners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <returns>ApiResponse of List&lt;Runner&gt;</returns>
        ApiResponse<List<Runner>> ListRunnersWithHttpInfo(string organizationId, string workspaceId, int? page = default(int?), int? size = default(int?));
        /// <summary>
        /// Remove the specified access from the given Organization Runner
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <returns></returns>
        void RemoveRunnerAccessControl(string organizationId, string workspaceId, string runnerId, string identityId);

        /// <summary>
        /// Remove the specified access from the given Organization Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveRunnerAccessControlWithHttpInfo(string organizationId, string workspaceId, string runnerId, string identityId);
        /// <summary>
        /// Set the Runner default security
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerRole">This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.</param>
        /// <returns>RunnerSecurity</returns>
        RunnerSecurity SetRunnerDefaultSecurity(string organizationId, string workspaceId, string runnerId, RunnerRole runnerRole);

        /// <summary>
        /// Set the Runner default security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerRole">This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.</param>
        /// <returns>ApiResponse of RunnerSecurity</returns>
        ApiResponse<RunnerSecurity> SetRunnerDefaultSecurityWithHttpInfo(string organizationId, string workspaceId, string runnerId, RunnerRole runnerRole);
        /// <summary>
        /// Start a run with runner parameters
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>RunnerLastRun</returns>
        RunnerLastRun StartRun(string organizationId, string workspaceId, string runnerId);

        /// <summary>
        /// Start a run with runner parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of RunnerLastRun</returns>
        ApiResponse<RunnerLastRun> StartRunWithHttpInfo(string organizationId, string workspaceId, string runnerId);
        /// <summary>
        /// Stop the last run
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns></returns>
        void StopRun(string organizationId, string workspaceId, string runnerId);

        /// <summary>
        /// Stop the last run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StopRunWithHttpInfo(string organizationId, string workspaceId, string runnerId);
        /// <summary>
        /// Update a runner
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runner">the new Runner details. This endpoint can&#39;t be used to update security</param>
        /// <returns>Runner</returns>
        Runner UpdateRunner(string organizationId, string workspaceId, string runnerId, Runner runner);

        /// <summary>
        /// Update a runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runner">the new Runner details. This endpoint can&#39;t be used to update security</param>
        /// <returns>ApiResponse of Runner</returns>
        ApiResponse<Runner> UpdateRunnerWithHttpInfo(string organizationId, string workspaceId, string runnerId, Runner runner);
        /// <summary>
        /// Update the specified access to User for a Runner
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="runnerRole">The new Runner Access Control</param>
        /// <returns>RunnerAccessControl</returns>
        RunnerAccessControl UpdateRunnerAccessControl(string organizationId, string workspaceId, string runnerId, string identityId, RunnerRole runnerRole);

        /// <summary>
        /// Update the specified access to User for a Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="runnerRole">The new Runner Access Control</param>
        /// <returns>ApiResponse of RunnerAccessControl</returns>
        ApiResponse<RunnerAccessControl> UpdateRunnerAccessControlWithHttpInfo(string organizationId, string workspaceId, string runnerId, string identityId, RunnerRole runnerRole);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRunnerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a control access to the Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerAccessControl">the new Runner security access to add.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerAccessControl</returns>
        System.Threading.Tasks.Task<RunnerAccessControl> AddRunnerAccessControlAsync(string organizationId, string workspaceId, string runnerId, RunnerAccessControl runnerAccessControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a control access to the Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerAccessControl">the new Runner security access to add.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerAccessControl)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunnerAccessControl>> AddRunnerAccessControlWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, RunnerAccessControl runnerAccessControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runner">the Runner to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Runner</returns>
        System.Threading.Tasks.Task<Runner> CreateRunnerAsync(string organizationId, string workspaceId, Runner runner, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runner">the Runner to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Runner)</returns>
        System.Threading.Tasks.Task<ApiResponse<Runner>> CreateRunnerWithHttpInfoAsync(string organizationId, string workspaceId, Runner runner, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRunnerAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRunnerWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the details of an runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Runner</returns>
        System.Threading.Tasks.Task<Runner> GetRunnerAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details of an runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Runner)</returns>
        System.Threading.Tasks.Task<ApiResponse<Runner>> GetRunnerWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a control access for the Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerAccessControl</returns>
        System.Threading.Tasks.Task<RunnerAccessControl> GetRunnerAccessControlAsync(string organizationId, string workspaceId, string runnerId, string identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a control access for the Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerAccessControl)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunnerAccessControl>> GetRunnerAccessControlWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Runner permission by given role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="role">the Role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetRunnerPermissionsAsync(string organizationId, string workspaceId, string runnerId, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Runner permission by given role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="role">the Role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetRunnerPermissionsWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Runner security information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerSecurity</returns>
        System.Threading.Tasks.Task<RunnerSecurity> GetRunnerSecurityAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Runner security information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerSecurity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunnerSecurity>> GetRunnerSecurityWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Runner security users list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetRunnerSecurityUsersAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Runner security users list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetRunnerSecurityUsersWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Runners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Runner&gt;</returns>
        System.Threading.Tasks.Task<List<Runner>> ListRunnersAsync(string organizationId, string workspaceId, int? page = default(int?), int? size = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all Runners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Runner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Runner>>> ListRunnersWithHttpInfoAsync(string organizationId, string workspaceId, int? page = default(int?), int? size = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove the specified access from the given Organization Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveRunnerAccessControlAsync(string organizationId, string workspaceId, string runnerId, string identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove the specified access from the given Organization Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRunnerAccessControlWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the Runner default security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerRole">This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerSecurity</returns>
        System.Threading.Tasks.Task<RunnerSecurity> SetRunnerDefaultSecurityAsync(string organizationId, string workspaceId, string runnerId, RunnerRole runnerRole, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the Runner default security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerRole">This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerSecurity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunnerSecurity>> SetRunnerDefaultSecurityWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, RunnerRole runnerRole, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a run with runner parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerLastRun</returns>
        System.Threading.Tasks.Task<RunnerLastRun> StartRunAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a run with runner parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerLastRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunnerLastRun>> StartRunWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop the last run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StopRunAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop the last run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StopRunWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runner">the new Runner details. This endpoint can&#39;t be used to update security</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Runner</returns>
        System.Threading.Tasks.Task<Runner> UpdateRunnerAsync(string organizationId, string workspaceId, string runnerId, Runner runner, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runner">the new Runner details. This endpoint can&#39;t be used to update security</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Runner)</returns>
        System.Threading.Tasks.Task<ApiResponse<Runner>> UpdateRunnerWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, Runner runner, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the specified access to User for a Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="runnerRole">The new Runner Access Control</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerAccessControl</returns>
        System.Threading.Tasks.Task<RunnerAccessControl> UpdateRunnerAccessControlAsync(string organizationId, string workspaceId, string runnerId, string identityId, RunnerRole runnerRole, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the specified access to User for a Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="runnerRole">The new Runner Access Control</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerAccessControl)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunnerAccessControl>> UpdateRunnerAccessControlWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string identityId, RunnerRole runnerRole, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRunnerApi : IRunnerApiSync, IRunnerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RunnerApi : IRunnerApi
    {
        private Com.Cosmotech.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RunnerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RunnerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunnerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RunnerApi(string basePath)
        {
            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                new Com.Cosmotech.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunnerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RunnerApi(Com.Cosmotech.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunnerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RunnerApi(Com.Cosmotech.Client.ISynchronousClient client, Com.Cosmotech.Client.IAsynchronousClient asyncClient, Com.Cosmotech.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Cosmotech.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Cosmotech.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Cosmotech.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Cosmotech.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a control access to the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerAccessControl">the new Runner security access to add.</param>
        /// <returns>RunnerAccessControl</returns>
        public RunnerAccessControl AddRunnerAccessControl(string organizationId, string workspaceId, string runnerId, RunnerAccessControl runnerAccessControl)
        {
            Com.Cosmotech.Client.ApiResponse<RunnerAccessControl> localVarResponse = AddRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, runnerAccessControl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a control access to the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerAccessControl">the new Runner security access to add.</param>
        /// <returns>ApiResponse of RunnerAccessControl</returns>
        public Com.Cosmotech.Client.ApiResponse<RunnerAccessControl> AddRunnerAccessControlWithHttpInfo(string organizationId, string workspaceId, string runnerId, RunnerAccessControl runnerAccessControl)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->AddRunnerAccessControl");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->AddRunnerAccessControl");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->AddRunnerAccessControl");
            }

            // verify the required parameter 'runnerAccessControl' is set
            if (runnerAccessControl == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerAccessControl' when calling RunnerApi->AddRunnerAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.Data = runnerAccessControl;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RunnerAccessControl>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRunnerAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a control access to the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerAccessControl">the new Runner security access to add.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerAccessControl</returns>
        public async System.Threading.Tasks.Task<RunnerAccessControl> AddRunnerAccessControlAsync(string organizationId, string workspaceId, string runnerId, RunnerAccessControl runnerAccessControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<RunnerAccessControl> localVarResponse = await AddRunnerAccessControlWithHttpInfoAsync(organizationId, workspaceId, runnerId, runnerAccessControl, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a control access to the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerAccessControl">the new Runner security access to add.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerAccessControl)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<RunnerAccessControl>> AddRunnerAccessControlWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, RunnerAccessControl runnerAccessControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->AddRunnerAccessControl");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->AddRunnerAccessControl");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->AddRunnerAccessControl");
            }

            // verify the required parameter 'runnerAccessControl' is set
            if (runnerAccessControl == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerAccessControl' when calling RunnerApi->AddRunnerAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.Data = runnerAccessControl;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RunnerAccessControl>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRunnerAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runner">the Runner to create</param>
        /// <returns>Runner</returns>
        public Runner CreateRunner(string organizationId, string workspaceId, Runner runner)
        {
            Com.Cosmotech.Client.ApiResponse<Runner> localVarResponse = CreateRunnerWithHttpInfo(organizationId, workspaceId, runner);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runner">the Runner to create</param>
        /// <returns>ApiResponse of Runner</returns>
        public Com.Cosmotech.Client.ApiResponse<Runner> CreateRunnerWithHttpInfo(string organizationId, string workspaceId, Runner runner)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->CreateRunner");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->CreateRunner");
            }

            // verify the required parameter 'runner' is set
            if (runner == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runner' when calling RunnerApi->CreateRunner");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.Data = runner;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Runner>("/organizations/{organization_id}/workspaces/{workspace_id}/runners", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRunner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runner">the Runner to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Runner</returns>
        public async System.Threading.Tasks.Task<Runner> CreateRunnerAsync(string organizationId, string workspaceId, Runner runner, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Runner> localVarResponse = await CreateRunnerWithHttpInfoAsync(organizationId, workspaceId, runner, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runner">the Runner to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Runner)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Runner>> CreateRunnerWithHttpInfoAsync(string organizationId, string workspaceId, Runner runner, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->CreateRunner");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->CreateRunner");
            }

            // verify the required parameter 'runner' is set
            if (runner == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runner' when calling RunnerApi->CreateRunner");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.Data = runner;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Runner>("/organizations/{organization_id}/workspaces/{workspace_id}/runners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRunner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns></returns>
        public void DeleteRunner(string organizationId, string workspaceId, string runnerId)
        {
            DeleteRunnerWithHttpInfo(organizationId, workspaceId, runnerId);
        }

        /// <summary>
        /// Delete a runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> DeleteRunnerWithHttpInfo(string organizationId, string workspaceId, string runnerId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->DeleteRunner");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->DeleteRunner");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->DeleteRunner");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRunner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRunnerAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRunnerWithHttpInfoAsync(organizationId, workspaceId, runnerId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> DeleteRunnerWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->DeleteRunner");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->DeleteRunner");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->DeleteRunner");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRunner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of an runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>Runner</returns>
        public Runner GetRunner(string organizationId, string workspaceId, string runnerId)
        {
            Com.Cosmotech.Client.ApiResponse<Runner> localVarResponse = GetRunnerWithHttpInfo(organizationId, workspaceId, runnerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of an runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of Runner</returns>
        public Com.Cosmotech.Client.ApiResponse<Runner> GetRunnerWithHttpInfo(string organizationId, string workspaceId, string runnerId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunner");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunner");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunner");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Runner>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of an runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Runner</returns>
        public async System.Threading.Tasks.Task<Runner> GetRunnerAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Runner> localVarResponse = await GetRunnerWithHttpInfoAsync(organizationId, workspaceId, runnerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of an runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Runner)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Runner>> GetRunnerWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunner");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunner");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunner");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Runner>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a control access for the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <returns>RunnerAccessControl</returns>
        public RunnerAccessControl GetRunnerAccessControl(string organizationId, string workspaceId, string runnerId, string identityId)
        {
            Com.Cosmotech.Client.ApiResponse<RunnerAccessControl> localVarResponse = GetRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, identityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a control access for the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <returns>ApiResponse of RunnerAccessControl</returns>
        public Com.Cosmotech.Client.ApiResponse<RunnerAccessControl> GetRunnerAccessControlWithHttpInfo(string organizationId, string workspaceId, string runnerId, string identityId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunnerAccessControl");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunnerAccessControl");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunnerAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling RunnerApi->GetRunnerAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RunnerAccessControl>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunnerAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a control access for the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerAccessControl</returns>
        public async System.Threading.Tasks.Task<RunnerAccessControl> GetRunnerAccessControlAsync(string organizationId, string workspaceId, string runnerId, string identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<RunnerAccessControl> localVarResponse = await GetRunnerAccessControlWithHttpInfoAsync(organizationId, workspaceId, runnerId, identityId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a control access for the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerAccessControl)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<RunnerAccessControl>> GetRunnerAccessControlWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunnerAccessControl");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunnerAccessControl");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunnerAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling RunnerApi->GetRunnerAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RunnerAccessControl>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunnerAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Runner permission by given role 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="role">the Role</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetRunnerPermissions(string organizationId, string workspaceId, string runnerId, string role)
        {
            Com.Cosmotech.Client.ApiResponse<List<string>> localVarResponse = GetRunnerPermissionsWithHttpInfo(organizationId, workspaceId, runnerId, role);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Runner permission by given role 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="role">the Role</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<string>> GetRunnerPermissionsWithHttpInfo(string organizationId, string workspaceId, string runnerId, string role)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunnerPermissions");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunnerPermissions");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunnerPermissions");
            }

            // verify the required parameter 'role' is set
            if (role == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'role' when calling RunnerApi->GetRunnerPermissions");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("role", Com.Cosmotech.Client.ClientUtils.ParameterToString(role)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/permissions/{role}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunnerPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Runner permission by given role 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="role">the Role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetRunnerPermissionsAsync(string organizationId, string workspaceId, string runnerId, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<string>> localVarResponse = await GetRunnerPermissionsWithHttpInfoAsync(organizationId, workspaceId, runnerId, role, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Runner permission by given role 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="role">the Role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<string>>> GetRunnerPermissionsWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunnerPermissions");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunnerPermissions");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunnerPermissions");
            }

            // verify the required parameter 'role' is set
            if (role == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'role' when calling RunnerApi->GetRunnerPermissions");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("role", Com.Cosmotech.Client.ClientUtils.ParameterToString(role)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/permissions/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunnerPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Runner security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>RunnerSecurity</returns>
        public RunnerSecurity GetRunnerSecurity(string organizationId, string workspaceId, string runnerId)
        {
            Com.Cosmotech.Client.ApiResponse<RunnerSecurity> localVarResponse = GetRunnerSecurityWithHttpInfo(organizationId, workspaceId, runnerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Runner security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of RunnerSecurity</returns>
        public Com.Cosmotech.Client.ApiResponse<RunnerSecurity> GetRunnerSecurityWithHttpInfo(string organizationId, string workspaceId, string runnerId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunnerSecurity");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunnerSecurity");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunnerSecurity");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RunnerSecurity>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunnerSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Runner security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerSecurity</returns>
        public async System.Threading.Tasks.Task<RunnerSecurity> GetRunnerSecurityAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<RunnerSecurity> localVarResponse = await GetRunnerSecurityWithHttpInfoAsync(organizationId, workspaceId, runnerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Runner security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerSecurity)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<RunnerSecurity>> GetRunnerSecurityWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunnerSecurity");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunnerSecurity");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunnerSecurity");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RunnerSecurity>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunnerSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Runner security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetRunnerSecurityUsers(string organizationId, string workspaceId, string runnerId)
        {
            Com.Cosmotech.Client.ApiResponse<List<string>> localVarResponse = GetRunnerSecurityUsersWithHttpInfo(organizationId, workspaceId, runnerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Runner security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<string>> GetRunnerSecurityUsersWithHttpInfo(string organizationId, string workspaceId, string runnerId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunnerSecurityUsers");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunnerSecurityUsers");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunnerSecurityUsers");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunnerSecurityUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Runner security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetRunnerSecurityUsersAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<string>> localVarResponse = await GetRunnerSecurityUsersWithHttpInfoAsync(organizationId, workspaceId, runnerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Runner security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<string>>> GetRunnerSecurityUsersWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->GetRunnerSecurityUsers");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->GetRunnerSecurityUsers");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->GetRunnerSecurityUsers");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunnerSecurityUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Runners 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <returns>List&lt;Runner&gt;</returns>
        public List<Runner> ListRunners(string organizationId, string workspaceId, int? page = default(int?), int? size = default(int?))
        {
            Com.Cosmotech.Client.ApiResponse<List<Runner>> localVarResponse = ListRunnersWithHttpInfo(organizationId, workspaceId, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Runners 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <returns>ApiResponse of List&lt;Runner&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<Runner>> ListRunnersWithHttpInfo(string organizationId, string workspaceId, int? page = default(int?), int? size = default(int?))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->ListRunners");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->ListRunners");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Runner>>("/organizations/{organization_id}/workspaces/{workspace_id}/runners", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRunners", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Runners 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Runner&gt;</returns>
        public async System.Threading.Tasks.Task<List<Runner>> ListRunnersAsync(string organizationId, string workspaceId, int? page = default(int?), int? size = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<Runner>> localVarResponse = await ListRunnersWithHttpInfoAsync(organizationId, workspaceId, page, size, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Runners 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Runner&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<Runner>>> ListRunnersWithHttpInfoAsync(string organizationId, string workspaceId, int? page = default(int?), int? size = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->ListRunners");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->ListRunners");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Runner>>("/organizations/{organization_id}/workspaces/{workspace_id}/runners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRunners", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified access from the given Organization Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <returns></returns>
        public void RemoveRunnerAccessControl(string organizationId, string workspaceId, string runnerId, string identityId)
        {
            RemoveRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, identityId);
        }

        /// <summary>
        /// Remove the specified access from the given Organization Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> RemoveRunnerAccessControlWithHttpInfo(string organizationId, string workspaceId, string runnerId, string identityId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->RemoveRunnerAccessControl");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->RemoveRunnerAccessControl");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->RemoveRunnerAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling RunnerApi->RemoveRunnerAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRunnerAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified access from the given Organization Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveRunnerAccessControlAsync(string organizationId, string workspaceId, string runnerId, string identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveRunnerAccessControlWithHttpInfoAsync(organizationId, workspaceId, runnerId, identityId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove the specified access from the given Organization Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> RemoveRunnerAccessControlWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->RemoveRunnerAccessControl");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->RemoveRunnerAccessControl");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->RemoveRunnerAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling RunnerApi->RemoveRunnerAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRunnerAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the Runner default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerRole">This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.</param>
        /// <returns>RunnerSecurity</returns>
        public RunnerSecurity SetRunnerDefaultSecurity(string organizationId, string workspaceId, string runnerId, RunnerRole runnerRole)
        {
            Com.Cosmotech.Client.ApiResponse<RunnerSecurity> localVarResponse = SetRunnerDefaultSecurityWithHttpInfo(organizationId, workspaceId, runnerId, runnerRole);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the Runner default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerRole">This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.</param>
        /// <returns>ApiResponse of RunnerSecurity</returns>
        public Com.Cosmotech.Client.ApiResponse<RunnerSecurity> SetRunnerDefaultSecurityWithHttpInfo(string organizationId, string workspaceId, string runnerId, RunnerRole runnerRole)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->SetRunnerDefaultSecurity");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->SetRunnerDefaultSecurity");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->SetRunnerDefaultSecurity");
            }

            // verify the required parameter 'runnerRole' is set
            if (runnerRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerRole' when calling RunnerApi->SetRunnerDefaultSecurity");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.Data = runnerRole;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RunnerSecurity>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/default", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRunnerDefaultSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the Runner default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerRole">This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerSecurity</returns>
        public async System.Threading.Tasks.Task<RunnerSecurity> SetRunnerDefaultSecurityAsync(string organizationId, string workspaceId, string runnerId, RunnerRole runnerRole, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<RunnerSecurity> localVarResponse = await SetRunnerDefaultSecurityWithHttpInfoAsync(organizationId, workspaceId, runnerId, runnerRole, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the Runner default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runnerRole">This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerSecurity)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<RunnerSecurity>> SetRunnerDefaultSecurityWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, RunnerRole runnerRole, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->SetRunnerDefaultSecurity");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->SetRunnerDefaultSecurity");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->SetRunnerDefaultSecurity");
            }

            // verify the required parameter 'runnerRole' is set
            if (runnerRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerRole' when calling RunnerApi->SetRunnerDefaultSecurity");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.Data = runnerRole;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RunnerSecurity>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRunnerDefaultSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a run with runner parameters 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>RunnerLastRun</returns>
        public RunnerLastRun StartRun(string organizationId, string workspaceId, string runnerId)
        {
            Com.Cosmotech.Client.ApiResponse<RunnerLastRun> localVarResponse = StartRunWithHttpInfo(organizationId, workspaceId, runnerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a run with runner parameters 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of RunnerLastRun</returns>
        public Com.Cosmotech.Client.ApiResponse<RunnerLastRun> StartRunWithHttpInfo(string organizationId, string workspaceId, string runnerId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->StartRun");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->StartRun");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->StartRun");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RunnerLastRun>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a run with runner parameters 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerLastRun</returns>
        public async System.Threading.Tasks.Task<RunnerLastRun> StartRunAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<RunnerLastRun> localVarResponse = await StartRunWithHttpInfoAsync(organizationId, workspaceId, runnerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a run with runner parameters 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerLastRun)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<RunnerLastRun>> StartRunWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->StartRun");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->StartRun");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->StartRun");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RunnerLastRun>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop the last run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns></returns>
        public void StopRun(string organizationId, string workspaceId, string runnerId)
        {
            StopRunWithHttpInfo(organizationId, workspaceId, runnerId);
        }

        /// <summary>
        /// Stop the last run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> StopRunWithHttpInfo(string organizationId, string workspaceId, string runnerId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->StopRun");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->StopRun");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->StopRun");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/stop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop the last run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StopRunAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StopRunWithHttpInfoAsync(organizationId, workspaceId, runnerId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Stop the last run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> StopRunWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->StopRun");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->StopRun");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->StopRun");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runner">the new Runner details. This endpoint can&#39;t be used to update security</param>
        /// <returns>Runner</returns>
        public Runner UpdateRunner(string organizationId, string workspaceId, string runnerId, Runner runner)
        {
            Com.Cosmotech.Client.ApiResponse<Runner> localVarResponse = UpdateRunnerWithHttpInfo(organizationId, workspaceId, runnerId, runner);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runner">the new Runner details. This endpoint can&#39;t be used to update security</param>
        /// <returns>ApiResponse of Runner</returns>
        public Com.Cosmotech.Client.ApiResponse<Runner> UpdateRunnerWithHttpInfo(string organizationId, string workspaceId, string runnerId, Runner runner)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->UpdateRunner");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->UpdateRunner");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->UpdateRunner");
            }

            // verify the required parameter 'runner' is set
            if (runner == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runner' when calling RunnerApi->UpdateRunner");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.Data = runner;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Runner>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRunner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runner">the new Runner details. This endpoint can&#39;t be used to update security</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Runner</returns>
        public async System.Threading.Tasks.Task<Runner> UpdateRunnerAsync(string organizationId, string workspaceId, string runnerId, Runner runner, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Runner> localVarResponse = await UpdateRunnerWithHttpInfoAsync(organizationId, workspaceId, runnerId, runner, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runner">the new Runner details. This endpoint can&#39;t be used to update security</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Runner)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Runner>> UpdateRunnerWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, Runner runner, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->UpdateRunner");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->UpdateRunner");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->UpdateRunner");
            }

            // verify the required parameter 'runner' is set
            if (runner == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runner' when calling RunnerApi->UpdateRunner");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.Data = runner;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Runner>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRunner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified access to User for a Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="runnerRole">The new Runner Access Control</param>
        /// <returns>RunnerAccessControl</returns>
        public RunnerAccessControl UpdateRunnerAccessControl(string organizationId, string workspaceId, string runnerId, string identityId, RunnerRole runnerRole)
        {
            Com.Cosmotech.Client.ApiResponse<RunnerAccessControl> localVarResponse = UpdateRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, identityId, runnerRole);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified access to User for a Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="runnerRole">The new Runner Access Control</param>
        /// <returns>ApiResponse of RunnerAccessControl</returns>
        public Com.Cosmotech.Client.ApiResponse<RunnerAccessControl> UpdateRunnerAccessControlWithHttpInfo(string organizationId, string workspaceId, string runnerId, string identityId, RunnerRole runnerRole)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->UpdateRunnerAccessControl");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->UpdateRunnerAccessControl");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->UpdateRunnerAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling RunnerApi->UpdateRunnerAccessControl");
            }

            // verify the required parameter 'runnerRole' is set
            if (runnerRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerRole' when calling RunnerApi->UpdateRunnerAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter
            localVarRequestOptions.Data = runnerRole;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<RunnerAccessControl>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRunnerAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified access to User for a Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="runnerRole">The new Runner Access Control</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunnerAccessControl</returns>
        public async System.Threading.Tasks.Task<RunnerAccessControl> UpdateRunnerAccessControlAsync(string organizationId, string workspaceId, string runnerId, string identityId, RunnerRole runnerRole, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<RunnerAccessControl> localVarResponse = await UpdateRunnerAccessControlWithHttpInfoAsync(organizationId, workspaceId, runnerId, identityId, runnerRole, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified access to User for a Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="runnerRole">The new Runner Access Control</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunnerAccessControl)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<RunnerAccessControl>> UpdateRunnerAccessControlWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string identityId, RunnerRole runnerRole, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunnerApi->UpdateRunnerAccessControl");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunnerApi->UpdateRunnerAccessControl");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunnerApi->UpdateRunnerAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling RunnerApi->UpdateRunnerAccessControl");
            }

            // verify the required parameter 'runnerRole' is set
            if (runnerRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerRole' when calling RunnerApi->UpdateRunnerAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter
            localVarRequestOptions.Data = runnerRole;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RunnerAccessControl>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRunnerAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
