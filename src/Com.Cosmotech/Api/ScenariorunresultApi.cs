/*
 * Cosmo Tech Platform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.0.7-dev
 * Contact: platform@cosmotech.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Cosmotech.Client;
using Com.Cosmotech.Model;

namespace Com.Cosmotech.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScenariorunresultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a ScenarioRunResult in the Organization
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <returns>ScenarioRunResult</returns>
        ScenarioRunResult GetScenarioRunResult(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId);

        /// <summary>
        /// Get a ScenarioRunResult in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <returns>ApiResponse of ScenarioRunResult</returns>
        ApiResponse<ScenarioRunResult> GetScenarioRunResultWithHttpInfo(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId);
        /// <summary>
        /// Create a new ScenarioRunResult in the Organization
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="requestBody">the ScenarioRunResult to register</param>
        /// <returns>ScenarioRunResult</returns>
        ScenarioRunResult SendScenarioRunResult(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, Dictionary<string, string> requestBody);

        /// <summary>
        /// Create a new ScenarioRunResult in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="requestBody">the ScenarioRunResult to register</param>
        /// <returns>ApiResponse of ScenarioRunResult</returns>
        ApiResponse<ScenarioRunResult> SendScenarioRunResultWithHttpInfo(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, Dictionary<string, string> requestBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScenariorunresultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a ScenarioRunResult in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioRunResult</returns>
        System.Threading.Tasks.Task<ScenarioRunResult> GetScenarioRunResultAsync(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a ScenarioRunResult in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioRunResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioRunResult>> GetScenarioRunResultWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new ScenarioRunResult in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="requestBody">the ScenarioRunResult to register</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioRunResult</returns>
        System.Threading.Tasks.Task<ScenarioRunResult> SendScenarioRunResultAsync(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, Dictionary<string, string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new ScenarioRunResult in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="requestBody">the ScenarioRunResult to register</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioRunResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioRunResult>> SendScenarioRunResultWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, Dictionary<string, string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScenariorunresultApi : IScenariorunresultApiSync, IScenariorunresultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScenariorunresultApi : IScenariorunresultApi
    {
        private Com.Cosmotech.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenariorunresultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScenariorunresultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenariorunresultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScenariorunresultApi(string basePath)
        {
            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                new Com.Cosmotech.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenariorunresultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScenariorunresultApi(Com.Cosmotech.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenariorunresultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScenariorunresultApi(Com.Cosmotech.Client.ISynchronousClient client, Com.Cosmotech.Client.IAsynchronousClient asyncClient, Com.Cosmotech.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Cosmotech.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Cosmotech.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Cosmotech.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Cosmotech.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a ScenarioRunResult in the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <returns>ScenarioRunResult</returns>
        public ScenarioRunResult GetScenarioRunResult(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId)
        {
            Com.Cosmotech.Client.ApiResponse<ScenarioRunResult> localVarResponse = GetScenarioRunResultWithHttpInfo(organizationId, workspaceId, scenarioId, scenariorunId, probeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a ScenarioRunResult in the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <returns>ApiResponse of ScenarioRunResult</returns>
        public Com.Cosmotech.Client.ApiResponse<ScenarioRunResult> GetScenarioRunResultWithHttpInfo(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }

            // verify the required parameter 'scenariorunId' is set
            if (scenariorunId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenariorunId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }

            // verify the required parameter 'probeId' is set
            if (probeId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'probeId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenariorun_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenariorunId)); // path parameter
            localVarRequestOptions.PathParameters.Add("probe_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(probeId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScenarioRunResult>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns/{scenariorun_id}/probes/{probe_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScenarioRunResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a ScenarioRunResult in the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioRunResult</returns>
        public async System.Threading.Tasks.Task<ScenarioRunResult> GetScenarioRunResultAsync(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<ScenarioRunResult> localVarResponse = await GetScenarioRunResultWithHttpInfoAsync(organizationId, workspaceId, scenarioId, scenariorunId, probeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a ScenarioRunResult in the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioRunResult)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<ScenarioRunResult>> GetScenarioRunResultWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }

            // verify the required parameter 'scenariorunId' is set
            if (scenariorunId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenariorunId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }

            // verify the required parameter 'probeId' is set
            if (probeId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'probeId' when calling ScenariorunresultApi->GetScenarioRunResult");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenariorun_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenariorunId)); // path parameter
            localVarRequestOptions.PathParameters.Add("probe_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(probeId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScenarioRunResult>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns/{scenariorun_id}/probes/{probe_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScenarioRunResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new ScenarioRunResult in the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="requestBody">the ScenarioRunResult to register</param>
        /// <returns>ScenarioRunResult</returns>
        public ScenarioRunResult SendScenarioRunResult(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, Dictionary<string, string> requestBody)
        {
            Com.Cosmotech.Client.ApiResponse<ScenarioRunResult> localVarResponse = SendScenarioRunResultWithHttpInfo(organizationId, workspaceId, scenarioId, scenariorunId, probeId, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new ScenarioRunResult in the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="requestBody">the ScenarioRunResult to register</param>
        /// <returns>ApiResponse of ScenarioRunResult</returns>
        public Com.Cosmotech.Client.ApiResponse<ScenarioRunResult> SendScenarioRunResultWithHttpInfo(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, Dictionary<string, string> requestBody)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'scenariorunId' is set
            if (scenariorunId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenariorunId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'probeId' is set
            if (probeId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'probeId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenariorun_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenariorunId)); // path parameter
            localVarRequestOptions.PathParameters.Add("probe_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(probeId)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScenarioRunResult>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns/{scenariorun_id}/probes/{probe_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendScenarioRunResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new ScenarioRunResult in the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="requestBody">the ScenarioRunResult to register</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioRunResult</returns>
        public async System.Threading.Tasks.Task<ScenarioRunResult> SendScenarioRunResultAsync(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, Dictionary<string, string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<ScenarioRunResult> localVarResponse = await SendScenarioRunResultWithHttpInfoAsync(organizationId, workspaceId, scenarioId, scenariorunId, probeId, requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new ScenarioRunResult in the Organization 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="scenariorunId">the ScenarioRun identifier</param>
        /// <param name="probeId">the Probe identifier</param>
        /// <param name="requestBody">the ScenarioRunResult to register</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioRunResult)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<ScenarioRunResult>> SendScenarioRunResultWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, string scenariorunId, string probeId, Dictionary<string, string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'scenariorunId' is set
            if (scenariorunId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenariorunId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'probeId' is set
            if (probeId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'probeId' when calling ScenariorunresultApi->SendScenarioRunResult");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ScenariorunresultApi->SendScenarioRunResult");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenariorun_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenariorunId)); // path parameter
            localVarRequestOptions.PathParameters.Add("probe_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(probeId)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ScenarioRunResult>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns/{scenariorun_id}/probes/{probe_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendScenarioRunResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
