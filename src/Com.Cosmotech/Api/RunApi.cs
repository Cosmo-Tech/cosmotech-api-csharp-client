/*
 * Cosmo Tech Platform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.2.3
 * Contact: platform@cosmotech.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Cosmotech.Client;
using Com.Cosmotech.Client.Auth;
using Com.Cosmotech.Model;

namespace Com.Cosmotech.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRunApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a run
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteRun(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0);

        /// <summary>
        /// Delete a run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRunWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0);
        /// <summary>
        /// Get the details of a run
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Run</returns>
        Run GetRun(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0);

        /// <summary>
        /// Get the details of a run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Run</returns>
        ApiResponse<Run> GetRunWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0);
        /// <summary>
        /// get the logs for the Run
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunLogs</returns>
        RunLogs GetRunLogs(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0);

        /// <summary>
        /// get the logs for the Run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunLogs</returns>
        ApiResponse<RunLogs> GetRunLogsWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0);
        /// <summary>
        /// get the status for the Run
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunStatus</returns>
        RunStatus GetRunStatus(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0);

        /// <summary>
        /// get the status for the Run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunStatus</returns>
        ApiResponse<RunStatus> GetRunStatusWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0);
        /// <summary>
        /// get the list of Runs for the Runner
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Run&gt;</returns>
        List<Run> ListRuns(string organizationId, string workspaceId, string runnerId, int? page = default(int?), int? size = default(int?), int operationIndex = 0);

        /// <summary>
        /// get the list of Runs for the Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Run&gt;</returns>
        ApiResponse<List<Run>> ListRunsWithHttpInfo(string organizationId, string workspaceId, string runnerId, int? page = default(int?), int? size = default(int?), int operationIndex = 0);
        /// <summary>
        /// query the run data
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="runDataQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryResult</returns>
        QueryResult QueryRunData(string organizationId, string workspaceId, string runnerId, string runId, RunDataQuery runDataQuery, int operationIndex = 0);

        /// <summary>
        /// query the run data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="runDataQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryResult</returns>
        ApiResponse<QueryResult> QueryRunDataWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, RunDataQuery runDataQuery, int operationIndex = 0);
        /// <summary>
        /// Send data associated to a run
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="sendRunDataRequest">Custom data to register</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunData</returns>
        RunData SendRunData(string organizationId, string workspaceId, string runnerId, string runId, SendRunDataRequest sendRunDataRequest, int operationIndex = 0);

        /// <summary>
        /// Send data associated to a run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="sendRunDataRequest">Custom data to register</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunData</returns>
        ApiResponse<RunData> SendRunDataWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, SendRunDataRequest sendRunDataRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRunApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRunAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRunWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the details of a run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Run</returns>
        System.Threading.Tasks.Task<Run> GetRunAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details of a run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Run)</returns>
        System.Threading.Tasks.Task<ApiResponse<Run>> GetRunWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the logs for the Run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunLogs</returns>
        System.Threading.Tasks.Task<RunLogs> GetRunLogsAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the logs for the Run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunLogs>> GetRunLogsWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the status for the Run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunStatus</returns>
        System.Threading.Tasks.Task<RunStatus> GetRunStatusAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the status for the Run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunStatus>> GetRunStatusWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the list of Runs for the Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Run&gt;</returns>
        System.Threading.Tasks.Task<List<Run>> ListRunsAsync(string organizationId, string workspaceId, string runnerId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the list of Runs for the Runner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Run&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Run>>> ListRunsWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// query the run data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="runDataQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryResult</returns>
        System.Threading.Tasks.Task<QueryResult> QueryRunDataAsync(string organizationId, string workspaceId, string runnerId, string runId, RunDataQuery runDataQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// query the run data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="runDataQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResult>> QueryRunDataWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, RunDataQuery runDataQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send data associated to a run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="sendRunDataRequest">Custom data to register</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunData</returns>
        System.Threading.Tasks.Task<RunData> SendRunDataAsync(string organizationId, string workspaceId, string runnerId, string runId, SendRunDataRequest sendRunDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send data associated to a run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="sendRunDataRequest">Custom data to register</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunData)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunData>> SendRunDataWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, SendRunDataRequest sendRunDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRunApi : IRunApiSync, IRunApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RunApi : IRunApi
    {
        private Com.Cosmotech.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RunApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RunApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RunApi(string basePath)
        {
            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                new Com.Cosmotech.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RunApi(Com.Cosmotech.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RunApi(Com.Cosmotech.Client.ISynchronousClient client, Com.Cosmotech.Client.IAsynchronousClient asyncClient, Com.Cosmotech.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Cosmotech.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Cosmotech.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Cosmotech.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Cosmotech.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteRun(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0)
        {
            DeleteRunWithHttpInfo(organizationId, workspaceId, runnerId, runId);
        }

        /// <summary>
        /// Delete a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> DeleteRunWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->DeleteRun");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->DeleteRun");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->DeleteRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->DeleteRun");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "RunApi.DeleteRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRunAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRunWithHttpInfoAsync(organizationId, workspaceId, runnerId, runId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> DeleteRunWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->DeleteRun");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->DeleteRun");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->DeleteRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->DeleteRun");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "RunApi.DeleteRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Run</returns>
        public Run GetRun(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Run> localVarResponse = GetRunWithHttpInfo(organizationId, workspaceId, runnerId, runId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Run</returns>
        public Com.Cosmotech.Client.ApiResponse<Run> GetRunWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->GetRun");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->GetRun");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->GetRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->GetRun");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "RunApi.GetRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Run>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Run</returns>
        public async System.Threading.Tasks.Task<Run> GetRunAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Run> localVarResponse = await GetRunWithHttpInfoAsync(organizationId, workspaceId, runnerId, runId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Run)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Run>> GetRunWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->GetRun");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->GetRun");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->GetRun");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->GetRun");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "RunApi.GetRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Run>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the logs for the Run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunLogs</returns>
        public RunLogs GetRunLogs(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<RunLogs> localVarResponse = GetRunLogsWithHttpInfo(organizationId, workspaceId, runnerId, runId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the logs for the Run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunLogs</returns>
        public Com.Cosmotech.Client.ApiResponse<RunLogs> GetRunLogsWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->GetRunLogs");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->GetRunLogs");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->GetRunLogs");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->GetRunLogs");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "RunApi.GetRunLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RunLogs>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the logs for the Run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunLogs</returns>
        public async System.Threading.Tasks.Task<RunLogs> GetRunLogsAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<RunLogs> localVarResponse = await GetRunLogsWithHttpInfoAsync(organizationId, workspaceId, runnerId, runId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the logs for the Run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunLogs)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<RunLogs>> GetRunLogsWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->GetRunLogs");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->GetRunLogs");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->GetRunLogs");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->GetRunLogs");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "RunApi.GetRunLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RunLogs>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the status for the Run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunStatus</returns>
        public RunStatus GetRunStatus(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<RunStatus> localVarResponse = GetRunStatusWithHttpInfo(organizationId, workspaceId, runnerId, runId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the status for the Run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunStatus</returns>
        public Com.Cosmotech.Client.ApiResponse<RunStatus> GetRunStatusWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->GetRunStatus");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->GetRunStatus");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->GetRunStatus");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->GetRunStatus");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "RunApi.GetRunStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RunStatus>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the status for the Run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunStatus</returns>
        public async System.Threading.Tasks.Task<RunStatus> GetRunStatusAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<RunStatus> localVarResponse = await GetRunStatusWithHttpInfoAsync(organizationId, workspaceId, runnerId, runId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the status for the Run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunStatus)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<RunStatus>> GetRunStatusWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->GetRunStatus");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->GetRunStatus");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->GetRunStatus");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->GetRunStatus");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter

            localVarRequestOptions.Operation = "RunApi.GetRunStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RunStatus>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the list of Runs for the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Run&gt;</returns>
        public List<Run> ListRuns(string organizationId, string workspaceId, string runnerId, int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<Run>> localVarResponse = ListRunsWithHttpInfo(organizationId, workspaceId, runnerId, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the list of Runs for the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Run&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<Run>> ListRunsWithHttpInfo(string organizationId, string workspaceId, string runnerId, int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->ListRuns");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->ListRuns");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->ListRuns");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "RunApi.ListRuns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Run>>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRuns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the list of Runs for the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Run&gt;</returns>
        public async System.Threading.Tasks.Task<List<Run>> ListRunsAsync(string organizationId, string workspaceId, string runnerId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<Run>> localVarResponse = await ListRunsWithHttpInfoAsync(organizationId, workspaceId, runnerId, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the list of Runs for the Runner 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Run&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<Run>>> ListRunsWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->ListRuns");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->ListRuns");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->ListRuns");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "RunApi.ListRuns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Run>>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRuns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// query the run data 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="runDataQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryResult</returns>
        public QueryResult QueryRunData(string organizationId, string workspaceId, string runnerId, string runId, RunDataQuery runDataQuery, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<QueryResult> localVarResponse = QueryRunDataWithHttpInfo(organizationId, workspaceId, runnerId, runId, runDataQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// query the run data 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="runDataQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryResult</returns>
        public Com.Cosmotech.Client.ApiResponse<QueryResult> QueryRunDataWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, RunDataQuery runDataQuery, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->QueryRunData");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->QueryRunData");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->QueryRunData");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->QueryRunData");
            }

            // verify the required parameter 'runDataQuery' is set
            if (runDataQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runDataQuery' when calling RunApi->QueryRunData");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = runDataQuery;

            localVarRequestOptions.Operation = "RunApi.QueryRunData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<QueryResult>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/data/query", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryRunData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// query the run data 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="runDataQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryResult</returns>
        public async System.Threading.Tasks.Task<QueryResult> QueryRunDataAsync(string organizationId, string workspaceId, string runnerId, string runId, RunDataQuery runDataQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<QueryResult> localVarResponse = await QueryRunDataWithHttpInfoAsync(organizationId, workspaceId, runnerId, runId, runDataQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// query the run data 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="runDataQuery">the query to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<QueryResult>> QueryRunDataWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, RunDataQuery runDataQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->QueryRunData");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->QueryRunData");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->QueryRunData");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->QueryRunData");
            }

            // verify the required parameter 'runDataQuery' is set
            if (runDataQuery == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runDataQuery' when calling RunApi->QueryRunData");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = runDataQuery;

            localVarRequestOptions.Operation = "RunApi.QueryRunData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueryResult>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/data/query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryRunData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send data associated to a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="sendRunDataRequest">Custom data to register</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RunData</returns>
        public RunData SendRunData(string organizationId, string workspaceId, string runnerId, string runId, SendRunDataRequest sendRunDataRequest, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<RunData> localVarResponse = SendRunDataWithHttpInfo(organizationId, workspaceId, runnerId, runId, sendRunDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send data associated to a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="sendRunDataRequest">Custom data to register</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RunData</returns>
        public Com.Cosmotech.Client.ApiResponse<RunData> SendRunDataWithHttpInfo(string organizationId, string workspaceId, string runnerId, string runId, SendRunDataRequest sendRunDataRequest, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->SendRunData");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->SendRunData");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->SendRunData");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->SendRunData");
            }

            // verify the required parameter 'sendRunDataRequest' is set
            if (sendRunDataRequest == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'sendRunDataRequest' when calling RunApi->SendRunData");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = sendRunDataRequest;

            localVarRequestOptions.Operation = "RunApi.SendRunData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RunData>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/data/send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendRunData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send data associated to a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="sendRunDataRequest">Custom data to register</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RunData</returns>
        public async System.Threading.Tasks.Task<RunData> SendRunDataAsync(string organizationId, string workspaceId, string runnerId, string runId, SendRunDataRequest sendRunDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<RunData> localVarResponse = await SendRunDataWithHttpInfoAsync(organizationId, workspaceId, runnerId, runId, sendRunDataRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send data associated to a run 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="runnerId">the Runner identifier</param>
        /// <param name="runId">the Run identifier</param>
        /// <param name="sendRunDataRequest">Custom data to register</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RunData)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<RunData>> SendRunDataWithHttpInfoAsync(string organizationId, string workspaceId, string runnerId, string runId, SendRunDataRequest sendRunDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling RunApi->SendRunData");
            }

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling RunApi->SendRunData");
            }

            // verify the required parameter 'runnerId' is set
            if (runnerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runnerId' when calling RunApi->SendRunData");
            }

            // verify the required parameter 'runId' is set
            if (runId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runId' when calling RunApi->SendRunData");
            }

            // verify the required parameter 'sendRunDataRequest' is set
            if (sendRunDataRequest == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'sendRunDataRequest' when calling RunApi->SendRunData");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runner_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runnerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = sendRunDataRequest;

            localVarRequestOptions.Operation = "RunApi.SendRunData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RunData>("/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/data/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendRunData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
