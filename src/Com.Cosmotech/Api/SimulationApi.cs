/*
 * Cosmo Tech Plaform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Cosmotech.Client;
using Com.Cosmotech.Model;

namespace Com.Cosmotech.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a simulation
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>Simulation</returns>
        Simulation DeleteSimulation(string organizationId, string simulationId);

        /// <summary>
        /// Delete a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>ApiResponse of Simulation</returns>
        ApiResponse<Simulation> DeleteSimulationWithHttpInfo(string organizationId, string simulationId);
        /// <summary>
        /// Get the details of a simulation
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>Simulation</returns>
        Simulation FindSimulationById(string organizationId, string simulationId);

        /// <summary>
        /// Get the details of a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>ApiResponse of Simulation</returns>
        ApiResponse<Simulation> FindSimulationByIdWithHttpInfo(string organizationId, string simulationId);
        /// <summary>
        /// get the Simulation for the Scenario
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>Simulation</returns>
        Simulation GetScenarioSimulation(string organizationId, string workspaceId, string scenarioId, string simulationId);

        /// <summary>
        /// get the Simulation for the Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>ApiResponse of Simulation</returns>
        ApiResponse<Simulation> GetScenarioSimulationWithHttpInfo(string organizationId, string workspaceId, string scenarioId, string simulationId);
        /// <summary>
        /// get the logs for the Simulation
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>SimulationLogs</returns>
        SimulationLogs GetScenarioSimulationLogs(string organizationId, string workspaceId, string scenarioId, string simulationId);

        /// <summary>
        /// get the logs for the Simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>ApiResponse of SimulationLogs</returns>
        ApiResponse<SimulationLogs> GetScenarioSimulationLogsWithHttpInfo(string organizationId, string workspaceId, string scenarioId, string simulationId);
        /// <summary>
        /// get the list of Simulations for the Scenario
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <returns>List&lt;SimulationBase&gt;</returns>
        List<SimulationBase> GetScenarioSimulations(string organizationId, string workspaceId, string scenarioId);

        /// <summary>
        /// get the list of Simulations for the Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <returns>ApiResponse of List&lt;SimulationBase&gt;</returns>
        ApiResponse<List<SimulationBase>> GetScenarioSimulationsWithHttpInfo(string organizationId, string workspaceId, string scenarioId);
        /// <summary>
        /// get the list of Simulations for the Workspace
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <returns>List&lt;SimulationBase&gt;</returns>
        List<SimulationBase> GetWorkspaceSimulations(string organizationId, string workspaceId);

        /// <summary>
        /// get the list of Simulations for the Workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <returns>ApiResponse of List&lt;SimulationBase&gt;</returns>
        ApiResponse<List<SimulationBase>> GetWorkspaceSimulationsWithHttpInfo(string organizationId, string workspaceId);
        /// <summary>
        /// run a Simulation for the Scenario
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <returns>SimulationBase</returns>
        SimulationBase RunScenario(string organizationId, string workspaceId, string scenarioId);

        /// <summary>
        /// run a Simulation for the Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <returns>ApiResponse of SimulationBase</returns>
        ApiResponse<SimulationBase> RunScenarioWithHttpInfo(string organizationId, string workspaceId, string scenarioId);
        /// <summary>
        /// Search the logs of a simulation
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="simulationLogsOptions">the options to search logs</param>
        /// <returns>SimulationLogs</returns>
        SimulationLogs SearchSimulationLogs(string organizationId, string simulationId, SimulationLogsOptions simulationLogsOptions);

        /// <summary>
        /// Search the logs of a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="simulationLogsOptions">the options to search logs</param>
        /// <returns>ApiResponse of SimulationLogs</returns>
        ApiResponse<SimulationLogs> SearchSimulationLogsWithHttpInfo(string organizationId, string simulationId, SimulationLogsOptions simulationLogsOptions);
        /// <summary>
        /// Search Simulations
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationSearch">the Simulation search parameters</param>
        /// <returns>List&lt;SimulationBase&gt;</returns>
        List<SimulationBase> SearchSimulations(string organizationId, SimulationSearch simulationSearch);

        /// <summary>
        /// Search Simulations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationSearch">the Simulation search parameters</param>
        /// <returns>ApiResponse of List&lt;SimulationBase&gt;</returns>
        ApiResponse<List<SimulationBase>> SearchSimulationsWithHttpInfo(string organizationId, SimulationSearch simulationSearch);
        /// <summary>
        /// Start a new simulation with raw containers definition
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartContainers">the raw containers definition</param>
        /// <returns>Simulation</returns>
        Simulation StartSimulationContainers(string organizationId, SimulationStartContainers simulationStartContainers);

        /// <summary>
        /// Start a new simulation with raw containers definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartContainers">the raw containers definition</param>
        /// <returns>ApiResponse of Simulation</returns>
        ApiResponse<Simulation> StartSimulationContainersWithHttpInfo(string organizationId, SimulationStartContainers simulationStartContainers);
        /// <summary>
        /// Start a new simulation for a Scenario
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartScenario">the Scenario information to start</param>
        /// <returns>Simulation</returns>
        Simulation StartSimulationScenario(string organizationId, SimulationStartScenario simulationStartScenario);

        /// <summary>
        /// Start a new simulation for a Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartScenario">the Scenario information to start</param>
        /// <returns>ApiResponse of Simulation</returns>
        ApiResponse<Simulation> StartSimulationScenarioWithHttpInfo(string organizationId, SimulationStartScenario simulationStartScenario);
        /// <summary>
        /// Start a new simulation for a Solution Run Template
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartSolution">the Solution Run Template information to start</param>
        /// <returns>Simulation</returns>
        Simulation StartSimulationSolution(string organizationId, SimulationStartSolution simulationStartSolution);

        /// <summary>
        /// Start a new simulation for a Solution Run Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartSolution">the Solution Run Template information to start</param>
        /// <returns>ApiResponse of Simulation</returns>
        ApiResponse<Simulation> StartSimulationSolutionWithHttpInfo(string organizationId, SimulationStartSolution simulationStartSolution);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        System.Threading.Tasks.Task<Simulation> DeleteSimulationAsync(string organizationId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Simulation>> DeleteSimulationWithHttpInfoAsync(string organizationId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the details of a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        System.Threading.Tasks.Task<Simulation> FindSimulationByIdAsync(string organizationId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details of a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Simulation>> FindSimulationByIdWithHttpInfoAsync(string organizationId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the Simulation for the Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        System.Threading.Tasks.Task<Simulation> GetScenarioSimulationAsync(string organizationId, string workspaceId, string scenarioId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the Simulation for the Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Simulation>> GetScenarioSimulationWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the logs for the Simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulationLogs</returns>
        System.Threading.Tasks.Task<SimulationLogs> GetScenarioSimulationLogsAsync(string organizationId, string workspaceId, string scenarioId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the logs for the Simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulationLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationLogs>> GetScenarioSimulationLogsWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the list of Simulations for the Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimulationBase&gt;</returns>
        System.Threading.Tasks.Task<List<SimulationBase>> GetScenarioSimulationsAsync(string organizationId, string workspaceId, string scenarioId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the list of Simulations for the Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimulationBase&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimulationBase>>> GetScenarioSimulationsWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the list of Simulations for the Workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimulationBase&gt;</returns>
        System.Threading.Tasks.Task<List<SimulationBase>> GetWorkspaceSimulationsAsync(string organizationId, string workspaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the list of Simulations for the Workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimulationBase&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimulationBase>>> GetWorkspaceSimulationsWithHttpInfoAsync(string organizationId, string workspaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// run a Simulation for the Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulationBase</returns>
        System.Threading.Tasks.Task<SimulationBase> RunScenarioAsync(string organizationId, string workspaceId, string scenarioId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// run a Simulation for the Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulationBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationBase>> RunScenarioWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search the logs of a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="simulationLogsOptions">the options to search logs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulationLogs</returns>
        System.Threading.Tasks.Task<SimulationLogs> SearchSimulationLogsAsync(string organizationId, string simulationId, SimulationLogsOptions simulationLogsOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search the logs of a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="simulationLogsOptions">the options to search logs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulationLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationLogs>> SearchSimulationLogsWithHttpInfoAsync(string organizationId, string simulationId, SimulationLogsOptions simulationLogsOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Simulations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationSearch">the Simulation search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimulationBase&gt;</returns>
        System.Threading.Tasks.Task<List<SimulationBase>> SearchSimulationsAsync(string organizationId, SimulationSearch simulationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Simulations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationSearch">the Simulation search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimulationBase&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimulationBase>>> SearchSimulationsWithHttpInfoAsync(string organizationId, SimulationSearch simulationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a new simulation with raw containers definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartContainers">the raw containers definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        System.Threading.Tasks.Task<Simulation> StartSimulationContainersAsync(string organizationId, SimulationStartContainers simulationStartContainers, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a new simulation with raw containers definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartContainers">the raw containers definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Simulation>> StartSimulationContainersWithHttpInfoAsync(string organizationId, SimulationStartContainers simulationStartContainers, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a new simulation for a Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartScenario">the Scenario information to start</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        System.Threading.Tasks.Task<Simulation> StartSimulationScenarioAsync(string organizationId, SimulationStartScenario simulationStartScenario, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a new simulation for a Scenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartScenario">the Scenario information to start</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Simulation>> StartSimulationScenarioWithHttpInfoAsync(string organizationId, SimulationStartScenario simulationStartScenario, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a new simulation for a Solution Run Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartSolution">the Solution Run Template information to start</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        System.Threading.Tasks.Task<Simulation> StartSimulationSolutionAsync(string organizationId, SimulationStartSolution simulationStartSolution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a new simulation for a Solution Run Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartSolution">the Solution Run Template information to start</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Simulation>> StartSimulationSolutionWithHttpInfoAsync(string organizationId, SimulationStartSolution simulationStartSolution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationApi : ISimulationApiSync, ISimulationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SimulationApi : ISimulationApi
    {
        private Com.Cosmotech.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationApi(String basePath)
        {
            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                new Com.Cosmotech.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SimulationApi(Com.Cosmotech.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SimulationApi(Com.Cosmotech.Client.ISynchronousClient client, Com.Cosmotech.Client.IAsynchronousClient asyncClient, Com.Cosmotech.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Cosmotech.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Cosmotech.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Cosmotech.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Cosmotech.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>Simulation</returns>
        public Simulation DeleteSimulation(string organizationId, string simulationId)
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = DeleteSimulationWithHttpInfo(organizationId, simulationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>ApiResponse of Simulation</returns>
        public Com.Cosmotech.Client.ApiResponse<Simulation> DeleteSimulationWithHttpInfo(string organizationId, string simulationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->DeleteSimulation");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->DeleteSimulation");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Simulation>("/organizations/{organization_id}/simulations/{simulation_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        public async System.Threading.Tasks.Task<Simulation> DeleteSimulationAsync(string organizationId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = await DeleteSimulationWithHttpInfoAsync(organizationId, simulationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Simulation>> DeleteSimulationWithHttpInfoAsync(string organizationId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->DeleteSimulation");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->DeleteSimulation");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Simulation>("/organizations/{organization_id}/simulations/{simulation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>Simulation</returns>
        public Simulation FindSimulationById(string organizationId, string simulationId)
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = FindSimulationByIdWithHttpInfo(organizationId, simulationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>ApiResponse of Simulation</returns>
        public Com.Cosmotech.Client.ApiResponse<Simulation> FindSimulationByIdWithHttpInfo(string organizationId, string simulationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->FindSimulationById");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->FindSimulationById");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Simulation>("/organizations/{organization_id}/simulations/{simulation_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSimulationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        public async System.Threading.Tasks.Task<Simulation> FindSimulationByIdAsync(string organizationId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = await FindSimulationByIdWithHttpInfoAsync(organizationId, simulationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Simulation>> FindSimulationByIdWithHttpInfoAsync(string organizationId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->FindSimulationById");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->FindSimulationById");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Simulation>("/organizations/{organization_id}/simulations/{simulation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSimulationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the Simulation for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>Simulation</returns>
        public Simulation GetScenarioSimulation(string organizationId, string workspaceId, string scenarioId, string simulationId)
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = GetScenarioSimulationWithHttpInfo(organizationId, workspaceId, scenarioId, simulationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the Simulation for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>ApiResponse of Simulation</returns>
        public Com.Cosmotech.Client.ApiResponse<Simulation> GetScenarioSimulationWithHttpInfo(string organizationId, string workspaceId, string scenarioId, string simulationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->GetScenarioSimulation");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->GetScenarioSimulation");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling SimulationApi->GetScenarioSimulation");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->GetScenarioSimulation");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Simulation>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations/{simulation_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScenarioSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the Simulation for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        public async System.Threading.Tasks.Task<Simulation> GetScenarioSimulationAsync(string organizationId, string workspaceId, string scenarioId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = await GetScenarioSimulationWithHttpInfoAsync(organizationId, workspaceId, scenarioId, simulationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the Simulation for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Simulation>> GetScenarioSimulationWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->GetScenarioSimulation");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->GetScenarioSimulation");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling SimulationApi->GetScenarioSimulation");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->GetScenarioSimulation");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Simulation>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations/{simulation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScenarioSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the logs for the Simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>SimulationLogs</returns>
        public SimulationLogs GetScenarioSimulationLogs(string organizationId, string workspaceId, string scenarioId, string simulationId)
        {
            Com.Cosmotech.Client.ApiResponse<SimulationLogs> localVarResponse = GetScenarioSimulationLogsWithHttpInfo(organizationId, workspaceId, scenarioId, simulationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the logs for the Simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <returns>ApiResponse of SimulationLogs</returns>
        public Com.Cosmotech.Client.ApiResponse<SimulationLogs> GetScenarioSimulationLogsWithHttpInfo(string organizationId, string workspaceId, string scenarioId, string simulationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->GetScenarioSimulationLogs");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->GetScenarioSimulationLogs");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling SimulationApi->GetScenarioSimulationLogs");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->GetScenarioSimulationLogs");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SimulationLogs>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations/{simulation_id}/logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScenarioSimulationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the logs for the Simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulationLogs</returns>
        public async System.Threading.Tasks.Task<SimulationLogs> GetScenarioSimulationLogsAsync(string organizationId, string workspaceId, string scenarioId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<SimulationLogs> localVarResponse = await GetScenarioSimulationLogsWithHttpInfoAsync(organizationId, workspaceId, scenarioId, simulationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the logs for the Simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulationLogs)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<SimulationLogs>> GetScenarioSimulationLogsWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, string simulationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->GetScenarioSimulationLogs");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->GetScenarioSimulationLogs");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling SimulationApi->GetScenarioSimulationLogs");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->GetScenarioSimulationLogs");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SimulationLogs>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations/{simulation_id}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScenarioSimulationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the list of Simulations for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <returns>List&lt;SimulationBase&gt;</returns>
        public List<SimulationBase> GetScenarioSimulations(string organizationId, string workspaceId, string scenarioId)
        {
            Com.Cosmotech.Client.ApiResponse<List<SimulationBase>> localVarResponse = GetScenarioSimulationsWithHttpInfo(organizationId, workspaceId, scenarioId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the list of Simulations for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <returns>ApiResponse of List&lt;SimulationBase&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<SimulationBase>> GetScenarioSimulationsWithHttpInfo(string organizationId, string workspaceId, string scenarioId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->GetScenarioSimulations");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->GetScenarioSimulations");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling SimulationApi->GetScenarioSimulations");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SimulationBase>>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScenarioSimulations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the list of Simulations for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimulationBase&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimulationBase>> GetScenarioSimulationsAsync(string organizationId, string workspaceId, string scenarioId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<SimulationBase>> localVarResponse = await GetScenarioSimulationsWithHttpInfoAsync(organizationId, workspaceId, scenarioId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the list of Simulations for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimulationBase&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<SimulationBase>>> GetScenarioSimulationsWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->GetScenarioSimulations");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->GetScenarioSimulations");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling SimulationApi->GetScenarioSimulations");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SimulationBase>>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScenarioSimulations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the list of Simulations for the Workspace 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <returns>List&lt;SimulationBase&gt;</returns>
        public List<SimulationBase> GetWorkspaceSimulations(string organizationId, string workspaceId)
        {
            Com.Cosmotech.Client.ApiResponse<List<SimulationBase>> localVarResponse = GetWorkspaceSimulationsWithHttpInfo(organizationId, workspaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the list of Simulations for the Workspace 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <returns>ApiResponse of List&lt;SimulationBase&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<SimulationBase>> GetWorkspaceSimulationsWithHttpInfo(string organizationId, string workspaceId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->GetWorkspaceSimulations");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->GetWorkspaceSimulations");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SimulationBase>>("/organizations/{organization_id}/workspaces/{workspace_id}/simulations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkspaceSimulations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the list of Simulations for the Workspace 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimulationBase&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimulationBase>> GetWorkspaceSimulationsAsync(string organizationId, string workspaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<SimulationBase>> localVarResponse = await GetWorkspaceSimulationsWithHttpInfoAsync(organizationId, workspaceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the list of Simulations for the Workspace 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimulationBase&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<SimulationBase>>> GetWorkspaceSimulationsWithHttpInfoAsync(string organizationId, string workspaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->GetWorkspaceSimulations");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->GetWorkspaceSimulations");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SimulationBase>>("/organizations/{organization_id}/workspaces/{workspace_id}/simulations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkspaceSimulations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// run a Simulation for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <returns>SimulationBase</returns>
        public SimulationBase RunScenario(string organizationId, string workspaceId, string scenarioId)
        {
            Com.Cosmotech.Client.ApiResponse<SimulationBase> localVarResponse = RunScenarioWithHttpInfo(organizationId, workspaceId, scenarioId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// run a Simulation for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <returns>ApiResponse of SimulationBase</returns>
        public Com.Cosmotech.Client.ApiResponse<SimulationBase> RunScenarioWithHttpInfo(string organizationId, string workspaceId, string scenarioId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->RunScenario");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->RunScenario");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling SimulationApi->RunScenario");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SimulationBase>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/run", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunScenario", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// run a Simulation for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulationBase</returns>
        public async System.Threading.Tasks.Task<SimulationBase> RunScenarioAsync(string organizationId, string workspaceId, string scenarioId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<SimulationBase> localVarResponse = await RunScenarioWithHttpInfoAsync(organizationId, workspaceId, scenarioId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// run a Simulation for the Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="workspaceId">the Workspace identifier</param>
        /// <param name="scenarioId">the Scenario identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulationBase)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<SimulationBase>> RunScenarioWithHttpInfoAsync(string organizationId, string workspaceId, string scenarioId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->RunScenario");

            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'workspaceId' when calling SimulationApi->RunScenario");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling SimulationApi->RunScenario");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workspace_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(workspaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scenario_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SimulationBase>("/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/run", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunScenario", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search the logs of a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="simulationLogsOptions">the options to search logs</param>
        /// <returns>SimulationLogs</returns>
        public SimulationLogs SearchSimulationLogs(string organizationId, string simulationId, SimulationLogsOptions simulationLogsOptions)
        {
            Com.Cosmotech.Client.ApiResponse<SimulationLogs> localVarResponse = SearchSimulationLogsWithHttpInfo(organizationId, simulationId, simulationLogsOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search the logs of a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="simulationLogsOptions">the options to search logs</param>
        /// <returns>ApiResponse of SimulationLogs</returns>
        public Com.Cosmotech.Client.ApiResponse<SimulationLogs> SearchSimulationLogsWithHttpInfo(string organizationId, string simulationId, SimulationLogsOptions simulationLogsOptions)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->SearchSimulationLogs");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->SearchSimulationLogs");

            // verify the required parameter 'simulationLogsOptions' is set
            if (simulationLogsOptions == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationLogsOptions' when calling SimulationApi->SearchSimulationLogs");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.Data = simulationLogsOptions;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SimulationLogs>("/organizations/{organization_id}/simulations/{simulation_id}/logs/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSimulationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search the logs of a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="simulationLogsOptions">the options to search logs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulationLogs</returns>
        public async System.Threading.Tasks.Task<SimulationLogs> SearchSimulationLogsAsync(string organizationId, string simulationId, SimulationLogsOptions simulationLogsOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<SimulationLogs> localVarResponse = await SearchSimulationLogsWithHttpInfoAsync(organizationId, simulationId, simulationLogsOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search the logs of a simulation 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationId">the Simulation identifier</param>
        /// <param name="simulationLogsOptions">the options to search logs</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulationLogs)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<SimulationLogs>> SearchSimulationLogsWithHttpInfoAsync(string organizationId, string simulationId, SimulationLogsOptions simulationLogsOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->SearchSimulationLogs");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->SearchSimulationLogs");

            // verify the required parameter 'simulationLogsOptions' is set
            if (simulationLogsOptions == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationLogsOptions' when calling SimulationApi->SearchSimulationLogs");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulation_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.Data = simulationLogsOptions;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SimulationLogs>("/organizations/{organization_id}/simulations/{simulation_id}/logs/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSimulationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Simulations 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationSearch">the Simulation search parameters</param>
        /// <returns>List&lt;SimulationBase&gt;</returns>
        public List<SimulationBase> SearchSimulations(string organizationId, SimulationSearch simulationSearch)
        {
            Com.Cosmotech.Client.ApiResponse<List<SimulationBase>> localVarResponse = SearchSimulationsWithHttpInfo(organizationId, simulationSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Simulations 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationSearch">the Simulation search parameters</param>
        /// <returns>ApiResponse of List&lt;SimulationBase&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<SimulationBase>> SearchSimulationsWithHttpInfo(string organizationId, SimulationSearch simulationSearch)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->SearchSimulations");

            // verify the required parameter 'simulationSearch' is set
            if (simulationSearch == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationSearch' when calling SimulationApi->SearchSimulations");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = simulationSearch;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SimulationBase>>("/organizations/{organization_id}/simulations/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSimulations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Simulations 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationSearch">the Simulation search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimulationBase&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimulationBase>> SearchSimulationsAsync(string organizationId, SimulationSearch simulationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<SimulationBase>> localVarResponse = await SearchSimulationsWithHttpInfoAsync(organizationId, simulationSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Simulations 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationSearch">the Simulation search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimulationBase&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<SimulationBase>>> SearchSimulationsWithHttpInfoAsync(string organizationId, SimulationSearch simulationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->SearchSimulations");

            // verify the required parameter 'simulationSearch' is set
            if (simulationSearch == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationSearch' when calling SimulationApi->SearchSimulations");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = simulationSearch;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SimulationBase>>("/organizations/{organization_id}/simulations/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSimulations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new simulation with raw containers definition 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartContainers">the raw containers definition</param>
        /// <returns>Simulation</returns>
        public Simulation StartSimulationContainers(string organizationId, SimulationStartContainers simulationStartContainers)
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = StartSimulationContainersWithHttpInfo(organizationId, simulationStartContainers);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new simulation with raw containers definition 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartContainers">the raw containers definition</param>
        /// <returns>ApiResponse of Simulation</returns>
        public Com.Cosmotech.Client.ApiResponse<Simulation> StartSimulationContainersWithHttpInfo(string organizationId, SimulationStartContainers simulationStartContainers)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->StartSimulationContainers");

            // verify the required parameter 'simulationStartContainers' is set
            if (simulationStartContainers == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationStartContainers' when calling SimulationApi->StartSimulationContainers");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = simulationStartContainers;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Simulation>("/organizations/{organization_id}/simulations/startcontainers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSimulationContainers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new simulation with raw containers definition 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartContainers">the raw containers definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        public async System.Threading.Tasks.Task<Simulation> StartSimulationContainersAsync(string organizationId, SimulationStartContainers simulationStartContainers, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = await StartSimulationContainersWithHttpInfoAsync(organizationId, simulationStartContainers, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new simulation with raw containers definition 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartContainers">the raw containers definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Simulation>> StartSimulationContainersWithHttpInfoAsync(string organizationId, SimulationStartContainers simulationStartContainers, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->StartSimulationContainers");

            // verify the required parameter 'simulationStartContainers' is set
            if (simulationStartContainers == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationStartContainers' when calling SimulationApi->StartSimulationContainers");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = simulationStartContainers;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Simulation>("/organizations/{organization_id}/simulations/startcontainers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSimulationContainers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new simulation for a Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartScenario">the Scenario information to start</param>
        /// <returns>Simulation</returns>
        public Simulation StartSimulationScenario(string organizationId, SimulationStartScenario simulationStartScenario)
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = StartSimulationScenarioWithHttpInfo(organizationId, simulationStartScenario);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new simulation for a Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartScenario">the Scenario information to start</param>
        /// <returns>ApiResponse of Simulation</returns>
        public Com.Cosmotech.Client.ApiResponse<Simulation> StartSimulationScenarioWithHttpInfo(string organizationId, SimulationStartScenario simulationStartScenario)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->StartSimulationScenario");

            // verify the required parameter 'simulationStartScenario' is set
            if (simulationStartScenario == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationStartScenario' when calling SimulationApi->StartSimulationScenario");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = simulationStartScenario;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Simulation>("/organizations/{organization_id}/simulations/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSimulationScenario", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new simulation for a Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartScenario">the Scenario information to start</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        public async System.Threading.Tasks.Task<Simulation> StartSimulationScenarioAsync(string organizationId, SimulationStartScenario simulationStartScenario, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = await StartSimulationScenarioWithHttpInfoAsync(organizationId, simulationStartScenario, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new simulation for a Scenario 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartScenario">the Scenario information to start</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Simulation>> StartSimulationScenarioWithHttpInfoAsync(string organizationId, SimulationStartScenario simulationStartScenario, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->StartSimulationScenario");

            // verify the required parameter 'simulationStartScenario' is set
            if (simulationStartScenario == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationStartScenario' when calling SimulationApi->StartSimulationScenario");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = simulationStartScenario;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Simulation>("/organizations/{organization_id}/simulations/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSimulationScenario", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new simulation for a Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartSolution">the Solution Run Template information to start</param>
        /// <returns>Simulation</returns>
        public Simulation StartSimulationSolution(string organizationId, SimulationStartSolution simulationStartSolution)
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = StartSimulationSolutionWithHttpInfo(organizationId, simulationStartSolution);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new simulation for a Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartSolution">the Solution Run Template information to start</param>
        /// <returns>ApiResponse of Simulation</returns>
        public Com.Cosmotech.Client.ApiResponse<Simulation> StartSimulationSolutionWithHttpInfo(string organizationId, SimulationStartSolution simulationStartSolution)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->StartSimulationSolution");

            // verify the required parameter 'simulationStartSolution' is set
            if (simulationStartSolution == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationStartSolution' when calling SimulationApi->StartSimulationSolution");

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = simulationStartSolution;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Simulation>("/organizations/{organization_id}/simulations/startsolution", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSimulationSolution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new simulation for a Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartSolution">the Solution Run Template information to start</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Simulation</returns>
        public async System.Threading.Tasks.Task<Simulation> StartSimulationSolutionAsync(string organizationId, SimulationStartSolution simulationStartSolution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Simulation> localVarResponse = await StartSimulationSolutionWithHttpInfoAsync(organizationId, simulationStartSolution, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new simulation for a Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="simulationStartSolution">the Solution Run Template information to start</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Simulation>> StartSimulationSolutionWithHttpInfoAsync(string organizationId, SimulationStartSolution simulationStartSolution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SimulationApi->StartSimulationSolution");

            // verify the required parameter 'simulationStartSolution' is set
            if (simulationStartSolution == null)
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'simulationStartSolution' when calling SimulationApi->StartSimulationSolution");


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = simulationStartSolution;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Simulation>("/organizations/{organization_id}/simulations/startsolution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSimulationSolution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
