/*
 * Cosmo Tech Platform API
 *
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.2.8
 * Contact: platform@cosmotech.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Cosmotech.Client;
using Com.Cosmotech.Client.Auth;
using Com.Cosmotech.Model;

namespace Com.Cosmotech.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolutionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Parameter Groups. Any item with the same ID will be overwritten
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameterGroup">the Parameter Groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RunTemplateParameterGroup&gt;</returns>
        List<RunTemplateParameterGroup> AddOrReplaceParameterGroups(string organizationId, string solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, int operationIndex = 0);

        /// <summary>
        /// Add Parameter Groups. Any item with the same ID will be overwritten
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameterGroup">the Parameter Groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RunTemplateParameterGroup&gt;</returns>
        ApiResponse<List<RunTemplateParameterGroup>> AddOrReplaceParameterGroupsWithHttpInfo(string organizationId, string solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, int operationIndex = 0);
        /// <summary>
        /// Add Parameters. Any item with the same ID will be overwritten
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameter">the Parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RunTemplateParameter&gt;</returns>
        List<RunTemplateParameter> AddOrReplaceParameters(string organizationId, string solutionId, List<RunTemplateParameter> runTemplateParameter, int operationIndex = 0);

        /// <summary>
        /// Add Parameters. Any item with the same ID will be overwritten
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameter">the Parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RunTemplateParameter&gt;</returns>
        ApiResponse<List<RunTemplateParameter>> AddOrReplaceParametersWithHttpInfo(string organizationId, string solutionId, List<RunTemplateParameter> runTemplateParameter, int operationIndex = 0);
        /// <summary>
        /// Add Run Templates. Any item with the same ID will be overwritten
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RunTemplate&gt;</returns>
        List<RunTemplate> AddOrReplaceRunTemplates(string organizationId, string solutionId, List<RunTemplate> runTemplate, int operationIndex = 0);

        /// <summary>
        /// Add Run Templates. Any item with the same ID will be overwritten
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RunTemplate&gt;</returns>
        ApiResponse<List<RunTemplate>> AddOrReplaceRunTemplatesWithHttpInfo(string organizationId, string solutionId, List<RunTemplate> runTemplate, int operationIndex = 0);
        /// <summary>
        /// Add a control access to the Solution
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionAccessControl">the new Solution security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionAccessControl</returns>
        SolutionAccessControl AddSolutionAccessControl(string organizationId, string solutionId, SolutionAccessControl solutionAccessControl, int operationIndex = 0);

        /// <summary>
        /// Add a control access to the Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionAccessControl">the new Solution security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionAccessControl</returns>
        ApiResponse<SolutionAccessControl> AddSolutionAccessControlWithHttpInfo(string organizationId, string solutionId, SolutionAccessControl solutionAccessControl, int operationIndex = 0);
        /// <summary>
        /// Register a new solution
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solution">the Solution to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Solution</returns>
        Solution CreateSolution(string organizationId, Solution solution, int operationIndex = 0);

        /// <summary>
        /// Register a new solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solution">the Solution to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Solution</returns>
        ApiResponse<Solution> CreateSolutionWithHttpInfo(string organizationId, Solution solution, int operationIndex = 0);
        /// <summary>
        /// Delete a solution
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSolution(string organizationId, string solutionId, int operationIndex = 0);

        /// <summary>
        /// Delete a solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSolutionWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0);
        /// <summary>
        /// Remove the specified Solution Run Template
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSolutionRunTemplate(string organizationId, string solutionId, string runTemplateId, int operationIndex = 0);

        /// <summary>
        /// Remove the specified Solution Run Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSolutionRunTemplateWithHttpInfo(string organizationId, string solutionId, string runTemplateId, int operationIndex = 0);
        /// <summary>
        /// Download a Run Template step handler zip file
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        byte[] DownloadRunTemplateHandler(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, int operationIndex = 0);

        /// <summary>
        /// Download a Run Template step handler zip file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadRunTemplateHandlerWithHttpInfo(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, int operationIndex = 0);
        /// <summary>
        /// List all Solutions
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Solution&gt;</returns>
        List<Solution> FindAllSolutions(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all Solutions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Solution&gt;</returns>
        ApiResponse<List<Solution>> FindAllSolutionsWithHttpInfo(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get the details of a solution
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Solution</returns>
        Solution FindSolutionById(string organizationId, string solutionId, int operationIndex = 0);

        /// <summary>
        /// Get the details of a solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Solution</returns>
        ApiResponse<Solution> FindSolutionByIdWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0);
        /// <summary>
        /// Get a control access for the Solution
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionAccessControl</returns>
        SolutionAccessControl GetSolutionAccessControl(string organizationId, string solutionId, string identityId, int operationIndex = 0);

        /// <summary>
        /// Get a control access for the Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionAccessControl</returns>
        ApiResponse<SolutionAccessControl> GetSolutionAccessControlWithHttpInfo(string organizationId, string solutionId, string identityId, int operationIndex = 0);
        /// <summary>
        /// Get the Solution security information
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionSecurity</returns>
        SolutionSecurity GetSolutionSecurity(string organizationId, string solutionId, int operationIndex = 0);

        /// <summary>
        /// Get the Solution security information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionSecurity</returns>
        ApiResponse<SolutionSecurity> GetSolutionSecurityWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0);
        /// <summary>
        /// Get the Solution security users list
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetSolutionSecurityUsers(string organizationId, string solutionId, int operationIndex = 0);

        /// <summary>
        /// Get the Solution security users list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetSolutionSecurityUsersWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0);
        /// <summary>
        /// Remove all Run Templates from the Solution specified
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveAllRunTemplates(string organizationId, string solutionId, int operationIndex = 0);

        /// <summary>
        /// Remove all Run Templates from the Solution specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAllRunTemplatesWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0);
        /// <summary>
        /// Remove all Parameter Groups from the Solution specified
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveAllSolutionParameterGroups(string organizationId, string solutionId, int operationIndex = 0);

        /// <summary>
        /// Remove all Parameter Groups from the Solution specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAllSolutionParameterGroupsWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0);
        /// <summary>
        /// Remove all Parameters from the Solution specified
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveAllSolutionParameters(string organizationId, string solutionId, int operationIndex = 0);

        /// <summary>
        /// Remove all Parameters from the Solution specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAllSolutionParametersWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0);
        /// <summary>
        /// Remove the specified access from the given Organization Solution
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveSolutionAccessControl(string organizationId, string solutionId, string identityId, int operationIndex = 0);

        /// <summary>
        /// Remove the specified access from the given Organization Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveSolutionAccessControlWithHttpInfo(string organizationId, string solutionId, string identityId, int operationIndex = 0);
        /// <summary>
        /// Set the Solution default security
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionRole">This change the solution default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the solution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionSecurity</returns>
        SolutionSecurity SetSolutionDefaultSecurity(string organizationId, string solutionId, SolutionRole solutionRole, int operationIndex = 0);

        /// <summary>
        /// Set the Solution default security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionRole">This change the solution default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the solution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionSecurity</returns>
        ApiResponse<SolutionSecurity> SetSolutionDefaultSecurityWithHttpInfo(string organizationId, string solutionId, SolutionRole solutionRole, int operationIndex = 0);
        /// <summary>
        /// Update a solution
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solution">the new Solution details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Solution</returns>
        Solution UpdateSolution(string organizationId, string solutionId, Solution solution, int operationIndex = 0);

        /// <summary>
        /// Update a solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solution">the new Solution details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Solution</returns>
        ApiResponse<Solution> UpdateSolutionWithHttpInfo(string organizationId, string solutionId, Solution solution, int operationIndex = 0);
        /// <summary>
        /// Update the specified access to User for a Solution
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="solutionRole">The new Solution Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionAccessControl</returns>
        SolutionAccessControl UpdateSolutionAccessControl(string organizationId, string solutionId, string identityId, SolutionRole solutionRole, int operationIndex = 0);

        /// <summary>
        /// Update the specified access to User for a Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="solutionRole">The new Solution Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionAccessControl</returns>
        ApiResponse<SolutionAccessControl> UpdateSolutionAccessControlWithHttpInfo(string organizationId, string solutionId, string identityId, SolutionRole solutionRole, int operationIndex = 0);
        /// <summary>
        /// Update the specified Solution Run Template
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RunTemplate&gt;</returns>
        List<RunTemplate> UpdateSolutionRunTemplate(string organizationId, string solutionId, string runTemplateId, RunTemplate runTemplate, int operationIndex = 0);

        /// <summary>
        /// Update the specified Solution Run Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RunTemplate&gt;</returns>
        ApiResponse<List<RunTemplate>> UpdateSolutionRunTemplateWithHttpInfo(string organizationId, string solutionId, string runTemplateId, RunTemplate runTemplate, int operationIndex = 0);
        /// <summary>
        /// Upload a Run Template step handler zip file
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="body"></param>
        /// <param name="overwrite">whether to overwrite any existing handler resource (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UploadRunTemplateHandler(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, System.IO.Stream body, bool? overwrite = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Upload a Run Template step handler zip file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="body"></param>
        /// <param name="overwrite">whether to overwrite any existing handler resource (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadRunTemplateHandlerWithHttpInfo(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, System.IO.Stream body, bool? overwrite = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolutionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Parameter Groups. Any item with the same ID will be overwritten
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameterGroup">the Parameter Groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunTemplateParameterGroup&gt;</returns>
        System.Threading.Tasks.Task<List<RunTemplateParameterGroup>> AddOrReplaceParameterGroupsAsync(string organizationId, string solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Parameter Groups. Any item with the same ID will be overwritten
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameterGroup">the Parameter Groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunTemplateParameterGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RunTemplateParameterGroup>>> AddOrReplaceParameterGroupsWithHttpInfoAsync(string organizationId, string solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Parameters. Any item with the same ID will be overwritten
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameter">the Parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunTemplateParameter&gt;</returns>
        System.Threading.Tasks.Task<List<RunTemplateParameter>> AddOrReplaceParametersAsync(string organizationId, string solutionId, List<RunTemplateParameter> runTemplateParameter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Parameters. Any item with the same ID will be overwritten
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameter">the Parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunTemplateParameter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RunTemplateParameter>>> AddOrReplaceParametersWithHttpInfoAsync(string organizationId, string solutionId, List<RunTemplateParameter> runTemplateParameter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Run Templates. Any item with the same ID will be overwritten
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<RunTemplate>> AddOrReplaceRunTemplatesAsync(string organizationId, string solutionId, List<RunTemplate> runTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Run Templates. Any item with the same ID will be overwritten
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RunTemplate>>> AddOrReplaceRunTemplatesWithHttpInfoAsync(string organizationId, string solutionId, List<RunTemplate> runTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a control access to the Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionAccessControl">the new Solution security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionAccessControl</returns>
        System.Threading.Tasks.Task<SolutionAccessControl> AddSolutionAccessControlAsync(string organizationId, string solutionId, SolutionAccessControl solutionAccessControl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a control access to the Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionAccessControl">the new Solution security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionAccessControl)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolutionAccessControl>> AddSolutionAccessControlWithHttpInfoAsync(string organizationId, string solutionId, SolutionAccessControl solutionAccessControl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register a new solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solution">the Solution to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Solution</returns>
        System.Threading.Tasks.Task<Solution> CreateSolutionAsync(string organizationId, Solution solution, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register a new solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solution">the Solution to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Solution)</returns>
        System.Threading.Tasks.Task<ApiResponse<Solution>> CreateSolutionWithHttpInfoAsync(string organizationId, Solution solution, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSolutionAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSolutionWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove the specified Solution Run Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSolutionRunTemplateAsync(string organizationId, string solutionId, string runTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove the specified Solution Run Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSolutionRunTemplateWithHttpInfoAsync(string organizationId, string solutionId, string runTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download a Run Template step handler zip file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadRunTemplateHandlerAsync(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download a Run Template step handler zip file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadRunTemplateHandlerWithHttpInfoAsync(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Solutions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Solution&gt;</returns>
        System.Threading.Tasks.Task<List<Solution>> FindAllSolutionsAsync(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all Solutions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Solution&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Solution>>> FindAllSolutionsWithHttpInfoAsync(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the details of a solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Solution</returns>
        System.Threading.Tasks.Task<Solution> FindSolutionByIdAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details of a solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Solution)</returns>
        System.Threading.Tasks.Task<ApiResponse<Solution>> FindSolutionByIdWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a control access for the Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionAccessControl</returns>
        System.Threading.Tasks.Task<SolutionAccessControl> GetSolutionAccessControlAsync(string organizationId, string solutionId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a control access for the Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionAccessControl)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolutionAccessControl>> GetSolutionAccessControlWithHttpInfoAsync(string organizationId, string solutionId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Solution security information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionSecurity</returns>
        System.Threading.Tasks.Task<SolutionSecurity> GetSolutionSecurityAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Solution security information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionSecurity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolutionSecurity>> GetSolutionSecurityWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Solution security users list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetSolutionSecurityUsersAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Solution security users list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetSolutionSecurityUsersWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all Run Templates from the Solution specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAllRunTemplatesAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all Run Templates from the Solution specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAllRunTemplatesWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all Parameter Groups from the Solution specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAllSolutionParameterGroupsAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all Parameter Groups from the Solution specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAllSolutionParameterGroupsWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all Parameters from the Solution specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAllSolutionParametersAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all Parameters from the Solution specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAllSolutionParametersWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove the specified access from the given Organization Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveSolutionAccessControlAsync(string organizationId, string solutionId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove the specified access from the given Organization Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveSolutionAccessControlWithHttpInfoAsync(string organizationId, string solutionId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the Solution default security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionRole">This change the solution default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the solution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionSecurity</returns>
        System.Threading.Tasks.Task<SolutionSecurity> SetSolutionDefaultSecurityAsync(string organizationId, string solutionId, SolutionRole solutionRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the Solution default security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionRole">This change the solution default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the solution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionSecurity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolutionSecurity>> SetSolutionDefaultSecurityWithHttpInfoAsync(string organizationId, string solutionId, SolutionRole solutionRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solution">the new Solution details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Solution</returns>
        System.Threading.Tasks.Task<Solution> UpdateSolutionAsync(string organizationId, string solutionId, Solution solution, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solution">the new Solution details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Solution)</returns>
        System.Threading.Tasks.Task<ApiResponse<Solution>> UpdateSolutionWithHttpInfoAsync(string organizationId, string solutionId, Solution solution, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the specified access to User for a Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="solutionRole">The new Solution Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionAccessControl</returns>
        System.Threading.Tasks.Task<SolutionAccessControl> UpdateSolutionAccessControlAsync(string organizationId, string solutionId, string identityId, SolutionRole solutionRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the specified access to User for a Solution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="solutionRole">The new Solution Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionAccessControl)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolutionAccessControl>> UpdateSolutionAccessControlWithHttpInfoAsync(string organizationId, string solutionId, string identityId, SolutionRole solutionRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the specified Solution Run Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<RunTemplate>> UpdateSolutionRunTemplateAsync(string organizationId, string solutionId, string runTemplateId, RunTemplate runTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the specified Solution Run Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RunTemplate>>> UpdateSolutionRunTemplateWithHttpInfoAsync(string organizationId, string solutionId, string runTemplateId, RunTemplate runTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a Run Template step handler zip file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="body"></param>
        /// <param name="overwrite">whether to overwrite any existing handler resource (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadRunTemplateHandlerAsync(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, System.IO.Stream body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a Run Template step handler zip file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="body"></param>
        /// <param name="overwrite">whether to overwrite any existing handler resource (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadRunTemplateHandlerWithHttpInfoAsync(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, System.IO.Stream body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolutionApi : ISolutionApiSync, ISolutionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SolutionApi : ISolutionApi
    {
        private Com.Cosmotech.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SolutionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SolutionApi(string basePath)
        {
            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                new Com.Cosmotech.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SolutionApi(Com.Cosmotech.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Cosmotech.Client.Configuration.MergeConfigurations(
                Com.Cosmotech.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Cosmotech.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SolutionApi(Com.Cosmotech.Client.ISynchronousClient client, Com.Cosmotech.Client.IAsynchronousClient asyncClient, Com.Cosmotech.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Cosmotech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Cosmotech.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Cosmotech.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Cosmotech.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Cosmotech.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Parameter Groups. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameterGroup">the Parameter Groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RunTemplateParameterGroup&gt;</returns>
        public List<RunTemplateParameterGroup> AddOrReplaceParameterGroups(string organizationId, string solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<RunTemplateParameterGroup>> localVarResponse = AddOrReplaceParameterGroupsWithHttpInfo(organizationId, solutionId, runTemplateParameterGroup);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Parameter Groups. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameterGroup">the Parameter Groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RunTemplateParameterGroup&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<RunTemplateParameterGroup>> AddOrReplaceParameterGroupsWithHttpInfo(string organizationId, string solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->AddOrReplaceParameterGroups");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->AddOrReplaceParameterGroups");
            }

            // verify the required parameter 'runTemplateParameterGroup' is set
            if (runTemplateParameterGroup == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateParameterGroup' when calling SolutionApi->AddOrReplaceParameterGroups");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = runTemplateParameterGroup;

            localVarRequestOptions.Operation = "SolutionApi.AddOrReplaceParameterGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<RunTemplateParameterGroup>>("/organizations/{organization_id}/solutions/{solution_id}/parameterGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceParameterGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Parameter Groups. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameterGroup">the Parameter Groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunTemplateParameterGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<RunTemplateParameterGroup>> AddOrReplaceParameterGroupsAsync(string organizationId, string solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<RunTemplateParameterGroup>> localVarResponse = await AddOrReplaceParameterGroupsWithHttpInfoAsync(organizationId, solutionId, runTemplateParameterGroup, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Parameter Groups. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameterGroup">the Parameter Groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunTemplateParameterGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<RunTemplateParameterGroup>>> AddOrReplaceParameterGroupsWithHttpInfoAsync(string organizationId, string solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->AddOrReplaceParameterGroups");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->AddOrReplaceParameterGroups");
            }

            // verify the required parameter 'runTemplateParameterGroup' is set
            if (runTemplateParameterGroup == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateParameterGroup' when calling SolutionApi->AddOrReplaceParameterGroups");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = runTemplateParameterGroup;

            localVarRequestOptions.Operation = "SolutionApi.AddOrReplaceParameterGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<RunTemplateParameterGroup>>("/organizations/{organization_id}/solutions/{solution_id}/parameterGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceParameterGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Parameters. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameter">the Parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RunTemplateParameter&gt;</returns>
        public List<RunTemplateParameter> AddOrReplaceParameters(string organizationId, string solutionId, List<RunTemplateParameter> runTemplateParameter, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<RunTemplateParameter>> localVarResponse = AddOrReplaceParametersWithHttpInfo(organizationId, solutionId, runTemplateParameter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Parameters. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameter">the Parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RunTemplateParameter&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<RunTemplateParameter>> AddOrReplaceParametersWithHttpInfo(string organizationId, string solutionId, List<RunTemplateParameter> runTemplateParameter, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->AddOrReplaceParameters");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->AddOrReplaceParameters");
            }

            // verify the required parameter 'runTemplateParameter' is set
            if (runTemplateParameter == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateParameter' when calling SolutionApi->AddOrReplaceParameters");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = runTemplateParameter;

            localVarRequestOptions.Operation = "SolutionApi.AddOrReplaceParameters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<RunTemplateParameter>>("/organizations/{organization_id}/solutions/{solution_id}/parameters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Parameters. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameter">the Parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunTemplateParameter&gt;</returns>
        public async System.Threading.Tasks.Task<List<RunTemplateParameter>> AddOrReplaceParametersAsync(string organizationId, string solutionId, List<RunTemplateParameter> runTemplateParameter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<RunTemplateParameter>> localVarResponse = await AddOrReplaceParametersWithHttpInfoAsync(organizationId, solutionId, runTemplateParameter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Parameters. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateParameter">the Parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunTemplateParameter&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<RunTemplateParameter>>> AddOrReplaceParametersWithHttpInfoAsync(string organizationId, string solutionId, List<RunTemplateParameter> runTemplateParameter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->AddOrReplaceParameters");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->AddOrReplaceParameters");
            }

            // verify the required parameter 'runTemplateParameter' is set
            if (runTemplateParameter == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateParameter' when calling SolutionApi->AddOrReplaceParameters");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = runTemplateParameter;

            localVarRequestOptions.Operation = "SolutionApi.AddOrReplaceParameters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<RunTemplateParameter>>("/organizations/{organization_id}/solutions/{solution_id}/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Run Templates. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RunTemplate&gt;</returns>
        public List<RunTemplate> AddOrReplaceRunTemplates(string organizationId, string solutionId, List<RunTemplate> runTemplate, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<RunTemplate>> localVarResponse = AddOrReplaceRunTemplatesWithHttpInfo(organizationId, solutionId, runTemplate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Run Templates. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RunTemplate&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<RunTemplate>> AddOrReplaceRunTemplatesWithHttpInfo(string organizationId, string solutionId, List<RunTemplate> runTemplate, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->AddOrReplaceRunTemplates");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->AddOrReplaceRunTemplates");
            }

            // verify the required parameter 'runTemplate' is set
            if (runTemplate == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplate' when calling SolutionApi->AddOrReplaceRunTemplates");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = runTemplate;

            localVarRequestOptions.Operation = "SolutionApi.AddOrReplaceRunTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<RunTemplate>>("/organizations/{organization_id}/solutions/{solution_id}/runTemplates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceRunTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Run Templates. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<RunTemplate>> AddOrReplaceRunTemplatesAsync(string organizationId, string solutionId, List<RunTemplate> runTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<RunTemplate>> localVarResponse = await AddOrReplaceRunTemplatesWithHttpInfoAsync(organizationId, solutionId, runTemplate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Run Templates. Any item with the same ID will be overwritten 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<RunTemplate>>> AddOrReplaceRunTemplatesWithHttpInfoAsync(string organizationId, string solutionId, List<RunTemplate> runTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->AddOrReplaceRunTemplates");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->AddOrReplaceRunTemplates");
            }

            // verify the required parameter 'runTemplate' is set
            if (runTemplate == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplate' when calling SolutionApi->AddOrReplaceRunTemplates");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = runTemplate;

            localVarRequestOptions.Operation = "SolutionApi.AddOrReplaceRunTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<RunTemplate>>("/organizations/{organization_id}/solutions/{solution_id}/runTemplates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrReplaceRunTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a control access to the Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionAccessControl">the new Solution security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionAccessControl</returns>
        public SolutionAccessControl AddSolutionAccessControl(string organizationId, string solutionId, SolutionAccessControl solutionAccessControl, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<SolutionAccessControl> localVarResponse = AddSolutionAccessControlWithHttpInfo(organizationId, solutionId, solutionAccessControl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a control access to the Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionAccessControl">the new Solution security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionAccessControl</returns>
        public Com.Cosmotech.Client.ApiResponse<SolutionAccessControl> AddSolutionAccessControlWithHttpInfo(string organizationId, string solutionId, SolutionAccessControl solutionAccessControl, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->AddSolutionAccessControl");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->AddSolutionAccessControl");
            }

            // verify the required parameter 'solutionAccessControl' is set
            if (solutionAccessControl == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionAccessControl' when calling SolutionApi->AddSolutionAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = solutionAccessControl;

            localVarRequestOptions.Operation = "SolutionApi.AddSolutionAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SolutionAccessControl>("/organizations/{organization_id}/solutions/{solution_id}/security/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSolutionAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a control access to the Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionAccessControl">the new Solution security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionAccessControl</returns>
        public async System.Threading.Tasks.Task<SolutionAccessControl> AddSolutionAccessControlAsync(string organizationId, string solutionId, SolutionAccessControl solutionAccessControl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<SolutionAccessControl> localVarResponse = await AddSolutionAccessControlWithHttpInfoAsync(organizationId, solutionId, solutionAccessControl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a control access to the Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionAccessControl">the new Solution security access to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionAccessControl)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<SolutionAccessControl>> AddSolutionAccessControlWithHttpInfoAsync(string organizationId, string solutionId, SolutionAccessControl solutionAccessControl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->AddSolutionAccessControl");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->AddSolutionAccessControl");
            }

            // verify the required parameter 'solutionAccessControl' is set
            if (solutionAccessControl == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionAccessControl' when calling SolutionApi->AddSolutionAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = solutionAccessControl;

            localVarRequestOptions.Operation = "SolutionApi.AddSolutionAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SolutionAccessControl>("/organizations/{organization_id}/solutions/{solution_id}/security/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSolutionAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solution">the Solution to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Solution</returns>
        public Solution CreateSolution(string organizationId, Solution solution, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Solution> localVarResponse = CreateSolutionWithHttpInfo(organizationId, solution);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solution">the Solution to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Solution</returns>
        public Com.Cosmotech.Client.ApiResponse<Solution> CreateSolutionWithHttpInfo(string organizationId, Solution solution, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->CreateSolution");
            }

            // verify the required parameter 'solution' is set
            if (solution == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solution' when calling SolutionApi->CreateSolution");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = solution;

            localVarRequestOptions.Operation = "SolutionApi.CreateSolution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Solution>("/organizations/{organization_id}/solutions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solution">the Solution to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Solution</returns>
        public async System.Threading.Tasks.Task<Solution> CreateSolutionAsync(string organizationId, Solution solution, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Solution> localVarResponse = await CreateSolutionWithHttpInfoAsync(organizationId, solution, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solution">the Solution to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Solution)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Solution>> CreateSolutionWithHttpInfoAsync(string organizationId, Solution solution, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->CreateSolution");
            }

            // verify the required parameter 'solution' is set
            if (solution == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solution' when calling SolutionApi->CreateSolution");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.Data = solution;

            localVarRequestOptions.Operation = "SolutionApi.CreateSolution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Solution>("/organizations/{organization_id}/solutions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSolution(string organizationId, string solutionId, int operationIndex = 0)
        {
            DeleteSolutionWithHttpInfo(organizationId, solutionId);
        }

        /// <summary>
        /// Delete a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> DeleteSolutionWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->DeleteSolution");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->DeleteSolution");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.DeleteSolution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/solutions/{solution_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSolutionAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSolutionWithHttpInfoAsync(organizationId, solutionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> DeleteSolutionWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->DeleteSolution");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->DeleteSolution");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.DeleteSolution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/solutions/{solution_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSolutionRunTemplate(string organizationId, string solutionId, string runTemplateId, int operationIndex = 0)
        {
            DeleteSolutionRunTemplateWithHttpInfo(organizationId, solutionId, runTemplateId);
        }

        /// <summary>
        /// Remove the specified Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> DeleteSolutionRunTemplateWithHttpInfo(string organizationId, string solutionId, string runTemplateId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->DeleteSolutionRunTemplate");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->DeleteSolutionRunTemplate");
            }

            // verify the required parameter 'runTemplateId' is set
            if (runTemplateId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateId' when calling SolutionApi->DeleteSolutionRunTemplate");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_template_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runTemplateId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.DeleteSolutionRunTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/solutions/{solution_id}/runTemplates/{run_template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSolutionRunTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSolutionRunTemplateAsync(string organizationId, string solutionId, string runTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSolutionRunTemplateWithHttpInfoAsync(organizationId, solutionId, runTemplateId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove the specified Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> DeleteSolutionRunTemplateWithHttpInfoAsync(string organizationId, string solutionId, string runTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->DeleteSolutionRunTemplate");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->DeleteSolutionRunTemplate");
            }

            // verify the required parameter 'runTemplateId' is set
            if (runTemplateId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateId' when calling SolutionApi->DeleteSolutionRunTemplate");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_template_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runTemplateId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.DeleteSolutionRunTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/solutions/{solution_id}/runTemplates/{run_template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSolutionRunTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a Run Template step handler zip file 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadRunTemplateHandler(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<byte[]> localVarResponse = DownloadRunTemplateHandlerWithHttpInfo(organizationId, solutionId, runTemplateId, handlerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a Run Template step handler zip file 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Com.Cosmotech.Client.ApiResponse<byte[]> DownloadRunTemplateHandlerWithHttpInfo(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->DownloadRunTemplateHandler");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->DownloadRunTemplateHandler");
            }

            // verify the required parameter 'runTemplateId' is set
            if (runTemplateId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateId' when calling SolutionApi->DownloadRunTemplateHandler");
            }

            // verify the required parameter 'handlerId' is set
            if (handlerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'handlerId' when calling SolutionApi->DownloadRunTemplateHandler");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_template_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("handler_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(handlerId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.DownloadRunTemplateHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<byte[]>("/organizations/{organization_id}/solutions/{solution_id}/runtemplates/{run_template_id}/handlers/{handler_id}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadRunTemplateHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a Run Template step handler zip file 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadRunTemplateHandlerAsync(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<byte[]> localVarResponse = await DownloadRunTemplateHandlerWithHttpInfoAsync(organizationId, solutionId, runTemplateId, handlerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a Run Template step handler zip file 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<byte[]>> DownloadRunTemplateHandlerWithHttpInfoAsync(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->DownloadRunTemplateHandler");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->DownloadRunTemplateHandler");
            }

            // verify the required parameter 'runTemplateId' is set
            if (runTemplateId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateId' when calling SolutionApi->DownloadRunTemplateHandler");
            }

            // verify the required parameter 'handlerId' is set
            if (handlerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'handlerId' when calling SolutionApi->DownloadRunTemplateHandler");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_template_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("handler_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(handlerId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.DownloadRunTemplateHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<byte[]>("/organizations/{organization_id}/solutions/{solution_id}/runtemplates/{run_template_id}/handlers/{handler_id}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadRunTemplateHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Solutions 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Solution&gt;</returns>
        public List<Solution> FindAllSolutions(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<Solution>> localVarResponse = FindAllSolutionsWithHttpInfo(organizationId, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Solutions 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Solution&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<Solution>> FindAllSolutionsWithHttpInfo(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->FindAllSolutions");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "SolutionApi.FindAllSolutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Solution>>("/organizations/{organization_id}/solutions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllSolutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Solutions 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Solution&gt;</returns>
        public async System.Threading.Tasks.Task<List<Solution>> FindAllSolutionsAsync(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<Solution>> localVarResponse = await FindAllSolutionsWithHttpInfoAsync(organizationId, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Solutions 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="page">page number to query (optional)</param>
        /// <param name="size">amount of result by page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Solution&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<Solution>>> FindAllSolutionsWithHttpInfoAsync(string organizationId, int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->FindAllSolutions");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "SolutionApi.FindAllSolutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Solution>>("/organizations/{organization_id}/solutions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllSolutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Solution</returns>
        public Solution FindSolutionById(string organizationId, string solutionId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Solution> localVarResponse = FindSolutionByIdWithHttpInfo(organizationId, solutionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Solution</returns>
        public Com.Cosmotech.Client.ApiResponse<Solution> FindSolutionByIdWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->FindSolutionById");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->FindSolutionById");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.FindSolutionById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Solution>("/organizations/{organization_id}/solutions/{solution_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSolutionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details of a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Solution</returns>
        public async System.Threading.Tasks.Task<Solution> FindSolutionByIdAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Solution> localVarResponse = await FindSolutionByIdWithHttpInfoAsync(organizationId, solutionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Solution)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Solution>> FindSolutionByIdWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->FindSolutionById");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->FindSolutionById");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.FindSolutionById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Solution>("/organizations/{organization_id}/solutions/{solution_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSolutionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a control access for the Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionAccessControl</returns>
        public SolutionAccessControl GetSolutionAccessControl(string organizationId, string solutionId, string identityId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<SolutionAccessControl> localVarResponse = GetSolutionAccessControlWithHttpInfo(organizationId, solutionId, identityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a control access for the Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionAccessControl</returns>
        public Com.Cosmotech.Client.ApiResponse<SolutionAccessControl> GetSolutionAccessControlWithHttpInfo(string organizationId, string solutionId, string identityId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->GetSolutionAccessControl");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->GetSolutionAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling SolutionApi->GetSolutionAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.GetSolutionAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SolutionAccessControl>("/organizations/{organization_id}/solutions/{solution_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSolutionAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a control access for the Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionAccessControl</returns>
        public async System.Threading.Tasks.Task<SolutionAccessControl> GetSolutionAccessControlAsync(string organizationId, string solutionId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<SolutionAccessControl> localVarResponse = await GetSolutionAccessControlWithHttpInfoAsync(organizationId, solutionId, identityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a control access for the Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionAccessControl)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<SolutionAccessControl>> GetSolutionAccessControlWithHttpInfoAsync(string organizationId, string solutionId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->GetSolutionAccessControl");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->GetSolutionAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling SolutionApi->GetSolutionAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.GetSolutionAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SolutionAccessControl>("/organizations/{organization_id}/solutions/{solution_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSolutionAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Solution security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionSecurity</returns>
        public SolutionSecurity GetSolutionSecurity(string organizationId, string solutionId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<SolutionSecurity> localVarResponse = GetSolutionSecurityWithHttpInfo(organizationId, solutionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Solution security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionSecurity</returns>
        public Com.Cosmotech.Client.ApiResponse<SolutionSecurity> GetSolutionSecurityWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->GetSolutionSecurity");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->GetSolutionSecurity");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.GetSolutionSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SolutionSecurity>("/organizations/{organization_id}/solutions/{solution_id}/security", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSolutionSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Solution security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionSecurity</returns>
        public async System.Threading.Tasks.Task<SolutionSecurity> GetSolutionSecurityAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<SolutionSecurity> localVarResponse = await GetSolutionSecurityWithHttpInfoAsync(organizationId, solutionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Solution security information 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionSecurity)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<SolutionSecurity>> GetSolutionSecurityWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->GetSolutionSecurity");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->GetSolutionSecurity");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.GetSolutionSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SolutionSecurity>("/organizations/{organization_id}/solutions/{solution_id}/security", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSolutionSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Solution security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetSolutionSecurityUsers(string organizationId, string solutionId, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<string>> localVarResponse = GetSolutionSecurityUsersWithHttpInfo(organizationId, solutionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Solution security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<string>> GetSolutionSecurityUsersWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->GetSolutionSecurityUsers");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->GetSolutionSecurityUsers");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.GetSolutionSecurityUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/organizations/{organization_id}/solutions/{solution_id}/security/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSolutionSecurityUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Solution security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetSolutionSecurityUsersAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<string>> localVarResponse = await GetSolutionSecurityUsersWithHttpInfoAsync(organizationId, solutionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Solution security users list 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<string>>> GetSolutionSecurityUsersWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->GetSolutionSecurityUsers");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->GetSolutionSecurityUsers");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.GetSolutionSecurityUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/organizations/{organization_id}/solutions/{solution_id}/security/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSolutionSecurityUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Run Templates from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveAllRunTemplates(string organizationId, string solutionId, int operationIndex = 0)
        {
            RemoveAllRunTemplatesWithHttpInfo(organizationId, solutionId);
        }

        /// <summary>
        /// Remove all Run Templates from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> RemoveAllRunTemplatesWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->RemoveAllRunTemplates");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->RemoveAllRunTemplates");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.RemoveAllRunTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/solutions/{solution_id}/runTemplates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllRunTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Run Templates from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAllRunTemplatesAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveAllRunTemplatesWithHttpInfoAsync(organizationId, solutionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove all Run Templates from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> RemoveAllRunTemplatesWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->RemoveAllRunTemplates");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->RemoveAllRunTemplates");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.RemoveAllRunTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/solutions/{solution_id}/runTemplates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllRunTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Parameter Groups from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveAllSolutionParameterGroups(string organizationId, string solutionId, int operationIndex = 0)
        {
            RemoveAllSolutionParameterGroupsWithHttpInfo(organizationId, solutionId);
        }

        /// <summary>
        /// Remove all Parameter Groups from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> RemoveAllSolutionParameterGroupsWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->RemoveAllSolutionParameterGroups");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->RemoveAllSolutionParameterGroups");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.RemoveAllSolutionParameterGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/solutions/{solution_id}/parameterGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllSolutionParameterGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Parameter Groups from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAllSolutionParameterGroupsAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveAllSolutionParameterGroupsWithHttpInfoAsync(organizationId, solutionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove all Parameter Groups from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> RemoveAllSolutionParameterGroupsWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->RemoveAllSolutionParameterGroups");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->RemoveAllSolutionParameterGroups");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.RemoveAllSolutionParameterGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/solutions/{solution_id}/parameterGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllSolutionParameterGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Parameters from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveAllSolutionParameters(string organizationId, string solutionId, int operationIndex = 0)
        {
            RemoveAllSolutionParametersWithHttpInfo(organizationId, solutionId);
        }

        /// <summary>
        /// Remove all Parameters from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> RemoveAllSolutionParametersWithHttpInfo(string organizationId, string solutionId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->RemoveAllSolutionParameters");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->RemoveAllSolutionParameters");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.RemoveAllSolutionParameters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/solutions/{solution_id}/parameters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllSolutionParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all Parameters from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAllSolutionParametersAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveAllSolutionParametersWithHttpInfoAsync(organizationId, solutionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove all Parameters from the Solution specified 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> RemoveAllSolutionParametersWithHttpInfoAsync(string organizationId, string solutionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->RemoveAllSolutionParameters");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->RemoveAllSolutionParameters");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.RemoveAllSolutionParameters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/solutions/{solution_id}/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllSolutionParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified access from the given Organization Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveSolutionAccessControl(string organizationId, string solutionId, string identityId, int operationIndex = 0)
        {
            RemoveSolutionAccessControlWithHttpInfo(organizationId, solutionId, identityId);
        }

        /// <summary>
        /// Remove the specified access from the given Organization Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> RemoveSolutionAccessControlWithHttpInfo(string organizationId, string solutionId, string identityId, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->RemoveSolutionAccessControl");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->RemoveSolutionAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling SolutionApi->RemoveSolutionAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.RemoveSolutionAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/organizations/{organization_id}/solutions/{solution_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSolutionAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified access from the given Organization Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveSolutionAccessControlAsync(string organizationId, string solutionId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveSolutionAccessControlWithHttpInfoAsync(organizationId, solutionId, identityId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove the specified access from the given Organization Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> RemoveSolutionAccessControlWithHttpInfoAsync(string organizationId, string solutionId, string identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->RemoveSolutionAccessControl");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->RemoveSolutionAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling SolutionApi->RemoveSolutionAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "SolutionApi.RemoveSolutionAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/organizations/{organization_id}/solutions/{solution_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSolutionAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the Solution default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionRole">This change the solution default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the solution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionSecurity</returns>
        public SolutionSecurity SetSolutionDefaultSecurity(string organizationId, string solutionId, SolutionRole solutionRole, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<SolutionSecurity> localVarResponse = SetSolutionDefaultSecurityWithHttpInfo(organizationId, solutionId, solutionRole);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the Solution default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionRole">This change the solution default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the solution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionSecurity</returns>
        public Com.Cosmotech.Client.ApiResponse<SolutionSecurity> SetSolutionDefaultSecurityWithHttpInfo(string organizationId, string solutionId, SolutionRole solutionRole, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->SetSolutionDefaultSecurity");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->SetSolutionDefaultSecurity");
            }

            // verify the required parameter 'solutionRole' is set
            if (solutionRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionRole' when calling SolutionApi->SetSolutionDefaultSecurity");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = solutionRole;

            localVarRequestOptions.Operation = "SolutionApi.SetSolutionDefaultSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SolutionSecurity>("/organizations/{organization_id}/solutions/{solution_id}/security/default", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetSolutionDefaultSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the Solution default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionRole">This change the solution default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the solution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionSecurity</returns>
        public async System.Threading.Tasks.Task<SolutionSecurity> SetSolutionDefaultSecurityAsync(string organizationId, string solutionId, SolutionRole solutionRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<SolutionSecurity> localVarResponse = await SetSolutionDefaultSecurityWithHttpInfoAsync(organizationId, solutionId, solutionRole, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the Solution default security 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solutionRole">This change the solution default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the solution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionSecurity)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<SolutionSecurity>> SetSolutionDefaultSecurityWithHttpInfoAsync(string organizationId, string solutionId, SolutionRole solutionRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->SetSolutionDefaultSecurity");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->SetSolutionDefaultSecurity");
            }

            // verify the required parameter 'solutionRole' is set
            if (solutionRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionRole' when calling SolutionApi->SetSolutionDefaultSecurity");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = solutionRole;

            localVarRequestOptions.Operation = "SolutionApi.SetSolutionDefaultSecurity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SolutionSecurity>("/organizations/{organization_id}/solutions/{solution_id}/security/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetSolutionDefaultSecurity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solution">the new Solution details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Solution</returns>
        public Solution UpdateSolution(string organizationId, string solutionId, Solution solution, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<Solution> localVarResponse = UpdateSolutionWithHttpInfo(organizationId, solutionId, solution);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solution">the new Solution details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Solution</returns>
        public Com.Cosmotech.Client.ApiResponse<Solution> UpdateSolutionWithHttpInfo(string organizationId, string solutionId, Solution solution, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->UpdateSolution");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->UpdateSolution");
            }

            // verify the required parameter 'solution' is set
            if (solution == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solution' when calling SolutionApi->UpdateSolution");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = solution;

            localVarRequestOptions.Operation = "SolutionApi.UpdateSolution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Solution>("/organizations/{organization_id}/solutions/{solution_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solution">the new Solution details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Solution</returns>
        public async System.Threading.Tasks.Task<Solution> UpdateSolutionAsync(string organizationId, string solutionId, Solution solution, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<Solution> localVarResponse = await UpdateSolutionWithHttpInfoAsync(organizationId, solutionId, solution, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="solution">the new Solution details. This endpoint can&#39;t be used to update security</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Solution)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Solution>> UpdateSolutionWithHttpInfoAsync(string organizationId, string solutionId, Solution solution, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->UpdateSolution");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->UpdateSolution");
            }

            // verify the required parameter 'solution' is set
            if (solution == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solution' when calling SolutionApi->UpdateSolution");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.Data = solution;

            localVarRequestOptions.Operation = "SolutionApi.UpdateSolution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Solution>("/organizations/{organization_id}/solutions/{solution_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified access to User for a Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="solutionRole">The new Solution Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SolutionAccessControl</returns>
        public SolutionAccessControl UpdateSolutionAccessControl(string organizationId, string solutionId, string identityId, SolutionRole solutionRole, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<SolutionAccessControl> localVarResponse = UpdateSolutionAccessControlWithHttpInfo(organizationId, solutionId, identityId, solutionRole);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified access to User for a Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="solutionRole">The new Solution Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SolutionAccessControl</returns>
        public Com.Cosmotech.Client.ApiResponse<SolutionAccessControl> UpdateSolutionAccessControlWithHttpInfo(string organizationId, string solutionId, string identityId, SolutionRole solutionRole, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->UpdateSolutionAccessControl");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->UpdateSolutionAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling SolutionApi->UpdateSolutionAccessControl");
            }

            // verify the required parameter 'solutionRole' is set
            if (solutionRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionRole' when calling SolutionApi->UpdateSolutionAccessControl");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter
            localVarRequestOptions.Data = solutionRole;

            localVarRequestOptions.Operation = "SolutionApi.UpdateSolutionAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SolutionAccessControl>("/organizations/{organization_id}/solutions/{solution_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSolutionAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified access to User for a Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="solutionRole">The new Solution Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolutionAccessControl</returns>
        public async System.Threading.Tasks.Task<SolutionAccessControl> UpdateSolutionAccessControlAsync(string organizationId, string solutionId, string identityId, SolutionRole solutionRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<SolutionAccessControl> localVarResponse = await UpdateSolutionAccessControlWithHttpInfoAsync(organizationId, solutionId, identityId, solutionRole, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified access to User for a Solution 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="identityId">the User identifier</param>
        /// <param name="solutionRole">The new Solution Access Control</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolutionAccessControl)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<SolutionAccessControl>> UpdateSolutionAccessControlWithHttpInfoAsync(string organizationId, string solutionId, string identityId, SolutionRole solutionRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->UpdateSolutionAccessControl");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->UpdateSolutionAccessControl");
            }

            // verify the required parameter 'identityId' is set
            if (identityId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'identityId' when calling SolutionApi->UpdateSolutionAccessControl");
            }

            // verify the required parameter 'solutionRole' is set
            if (solutionRole == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionRole' when calling SolutionApi->UpdateSolutionAccessControl");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(identityId)); // path parameter
            localVarRequestOptions.Data = solutionRole;

            localVarRequestOptions.Operation = "SolutionApi.UpdateSolutionAccessControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SolutionAccessControl>("/organizations/{organization_id}/solutions/{solution_id}/security/access/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSolutionAccessControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RunTemplate&gt;</returns>
        public List<RunTemplate> UpdateSolutionRunTemplate(string organizationId, string solutionId, string runTemplateId, RunTemplate runTemplate, int operationIndex = 0)
        {
            Com.Cosmotech.Client.ApiResponse<List<RunTemplate>> localVarResponse = UpdateSolutionRunTemplateWithHttpInfo(organizationId, solutionId, runTemplateId, runTemplate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RunTemplate&gt;</returns>
        public Com.Cosmotech.Client.ApiResponse<List<RunTemplate>> UpdateSolutionRunTemplateWithHttpInfo(string organizationId, string solutionId, string runTemplateId, RunTemplate runTemplate, int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->UpdateSolutionRunTemplate");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->UpdateSolutionRunTemplate");
            }

            // verify the required parameter 'runTemplateId' is set
            if (runTemplateId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateId' when calling SolutionApi->UpdateSolutionRunTemplate");
            }

            // verify the required parameter 'runTemplate' is set
            if (runTemplate == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplate' when calling SolutionApi->UpdateSolutionRunTemplate");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_template_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runTemplateId)); // path parameter
            localVarRequestOptions.Data = runTemplate;

            localVarRequestOptions.Operation = "SolutionApi.UpdateSolutionRunTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<List<RunTemplate>>("/organizations/{organization_id}/solutions/{solution_id}/runTemplates/{run_template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSolutionRunTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<RunTemplate>> UpdateSolutionRunTemplateAsync(string organizationId, string solutionId, string runTemplateId, RunTemplate runTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Cosmotech.Client.ApiResponse<List<RunTemplate>> localVarResponse = await UpdateSolutionRunTemplateWithHttpInfoAsync(organizationId, solutionId, runTemplateId, runTemplate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified Solution Run Template 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="runTemplate">the Run Templates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<List<RunTemplate>>> UpdateSolutionRunTemplateWithHttpInfoAsync(string organizationId, string solutionId, string runTemplateId, RunTemplate runTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->UpdateSolutionRunTemplate");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->UpdateSolutionRunTemplate");
            }

            // verify the required parameter 'runTemplateId' is set
            if (runTemplateId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateId' when calling SolutionApi->UpdateSolutionRunTemplate");
            }

            // verify the required parameter 'runTemplate' is set
            if (runTemplate == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplate' when calling SolutionApi->UpdateSolutionRunTemplate");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/yaml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_template_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runTemplateId)); // path parameter
            localVarRequestOptions.Data = runTemplate;

            localVarRequestOptions.Operation = "SolutionApi.UpdateSolutionRunTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<List<RunTemplate>>("/organizations/{organization_id}/solutions/{solution_id}/runTemplates/{run_template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSolutionRunTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a Run Template step handler zip file 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="body"></param>
        /// <param name="overwrite">whether to overwrite any existing handler resource (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UploadRunTemplateHandler(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, System.IO.Stream body, bool? overwrite = default(bool?), int operationIndex = 0)
        {
            UploadRunTemplateHandlerWithHttpInfo(organizationId, solutionId, runTemplateId, handlerId, body, overwrite);
        }

        /// <summary>
        /// Upload a Run Template step handler zip file 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="body"></param>
        /// <param name="overwrite">whether to overwrite any existing handler resource (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Cosmotech.Client.ApiResponse<Object> UploadRunTemplateHandlerWithHttpInfo(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, System.IO.Stream body, bool? overwrite = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->UploadRunTemplateHandler");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->UploadRunTemplateHandler");
            }

            // verify the required parameter 'runTemplateId' is set
            if (runTemplateId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateId' when calling SolutionApi->UploadRunTemplateHandler");
            }

            // verify the required parameter 'handlerId' is set
            if (handlerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'handlerId' when calling SolutionApi->UploadRunTemplateHandler");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'body' when calling SolutionApi->UploadRunTemplateHandler");
            }

            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_template_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("handler_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(handlerId)); // path parameter
            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SolutionApi.UploadRunTemplateHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/organizations/{organization_id}/solutions/{solution_id}/runtemplates/{run_template_id}/handlers/{handler_id}/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadRunTemplateHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a Run Template step handler zip file 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="body"></param>
        /// <param name="overwrite">whether to overwrite any existing handler resource (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadRunTemplateHandlerAsync(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, System.IO.Stream body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UploadRunTemplateHandlerWithHttpInfoAsync(organizationId, solutionId, runTemplateId, handlerId, body, overwrite, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Upload a Run Template step handler zip file 
        /// </summary>
        /// <exception cref="Com.Cosmotech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the Organization identifier</param>
        /// <param name="solutionId">the Solution identifier</param>
        /// <param name="runTemplateId">the Run Template identifier</param>
        /// <param name="handlerId">the Handler identifier</param>
        /// <param name="body"></param>
        /// <param name="overwrite">whether to overwrite any existing handler resource (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Cosmotech.Client.ApiResponse<Object>> UploadRunTemplateHandlerWithHttpInfoAsync(string organizationId, string solutionId, string runTemplateId, RunTemplateHandlerId handlerId, System.IO.Stream body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'organizationId' when calling SolutionApi->UploadRunTemplateHandler");
            }

            // verify the required parameter 'solutionId' is set
            if (solutionId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'solutionId' when calling SolutionApi->UploadRunTemplateHandler");
            }

            // verify the required parameter 'runTemplateId' is set
            if (runTemplateId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'runTemplateId' when calling SolutionApi->UploadRunTemplateHandler");
            }

            // verify the required parameter 'handlerId' is set
            if (handlerId == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'handlerId' when calling SolutionApi->UploadRunTemplateHandler");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Cosmotech.Client.ApiException(400, "Missing required parameter 'body' when calling SolutionApi->UploadRunTemplateHandler");
            }


            Com.Cosmotech.Client.RequestOptions localVarRequestOptions = new Com.Cosmotech.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Cosmotech.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Cosmotech.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("solution_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(solutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("run_template_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(runTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("handler_id", Com.Cosmotech.Client.ClientUtils.ParameterToString(handlerId)); // path parameter
            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Cosmotech.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SolutionApi.UploadRunTemplateHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/organizations/{organization_id}/solutions/{solution_id}/runtemplates/{run_template_id}/handlers/{handler_id}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadRunTemplateHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
